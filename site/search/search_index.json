{"config":{"lang":["en"],"separator":"[\\s\\-/\\\\]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cadwork Python Documentation","text":"<p>In front of you, you see the first version of the Cadwork Python Guide. This document is written in cooperation of the cadwork branches. Since version 27 cadwork offers an API connection to the script language Python. By scripting in cadwork with Python you can automate and customize your operations. </p> <p>The API provides a multitude of basic functions of cadwork 3D. On the basis of the API external programs can be written, with which it is possible to e.g. create and manipulate parts.</p> <p>List calculations, list outputs, various import and export functions and much more is available via the API. This allows the implementation of customer specific functions without changing the program code of cadwork. By using the API, a wide range of helpers for various areas can be created and directly integrated into cadwork 3D. Cadwork itself delivers some of these small helpers by default. But also the development of small and large helpers by you as a user is possible.</p> <p>The Python Guide should enable you to start scripting in cadwork 3D. We hope we can convince you of the great potential with Python in cadwork. </p>"},{"location":"#discussion-form","title":"Discussion - Form","text":"<p>GitHub Discussion - Ask and answer questions from the Community </p>"},{"location":"#introduction","title":"Introduction","text":""},{"location":"#what-is-an-api","title":"What Is an API?","text":"<p>An application programming interface (API) is a connection between computers or between computer programs. It is a type of software interface, offering a service to other pieces of software. A document or standard that describes how to build such a connection or interface is called an API specification. A computer system that meets this standard is said to implement or expose an API. The term API may refer either to the specification or to the implementation.</p> <p></p>"},{"location":"#why-python","title":"Why Python?","text":"<ul> <li>Python is easy to learn. Its syntax is easy and code is very readable.</li> <li>Python has a lot of applications. It's used for developing web applications, data science, rapid application development, and so on.</li> <li>Python allows you to write programs in fewer lines of code than most of the programming languages.</li> <li>The popularity of Python is growing rapidly. Now it's one of the most popular programming languages.</li> </ul>"},{"location":"#what-is-python","title":"What Is Python?","text":"<p>Python is an interpreted, object-oriented, high-level programming language with dynamic semantics. Its high-level built in data structures, combined with dynamic typing and dynamic binding, make it very attractive for Rapid Application Development, as well as for use as a scripting or glue language to connect existing components together. Python's simple, easy to learn syntax emphasizes readability and therefore reduces the cost of program maintenance. Python supports modules and packages, which encourages program modularity and code reuse. The Python interpreter and the extensive standard library are available in source or binary form without charge for all major platforms, and can be freely distributed.</p> <p>Often, programmers fall in love with Python because of the increased productivity it provides. Since there is no compilation step, the edit-test-debug cycle is incredibly fast. Debugging Python programs is easy: a bug or bad input will never cause a segmentation fault. Instead, when the interpreter discovers an error, it raises an exception. When the program doesn't catch the exception, the interpreter prints a stack trace. A source level debugger allows inspection of local and global variables, evaluation of arbitrary expressions, setting breakpoints, stepping through the code a line at a time, and so on. The debugger is written in Python itself, testifying to Python's introspective power. On the other hand, often the quickest way to debug a program is to add a few print statements to the source: the fast edit-test-debug cycle makes this simple approach very effective.<sup>1</sup></p> <pre><code>print(\"Hello cadwork World, let's get started!\")\n</code></pre> <p>Python provides some built-in data types, in particular, dict, list, set and frozenset, and tuple. The str class is used to hold Unicode strings, and the bytes and bytearray classes are used to hold binary data.<sup>2</sup></p> <p>If you are unfamiliar with Python and still want to write helper scripts, I recommend doing a tutorial and then come back to cadwork.  </p> <ul> <li>The Python Tutorial</li> <li>LearnPython</li> <li>RealPython</li> </ul> <ol> <li> <p>python \u21a9</p> </li> <li> <p>data types \u21a9</p> </li> </ol>"},{"location":"about/","title":"About Guide","text":""},{"location":"about/#authors","title":"Authors","text":"<p>Cadwork Montreal</p> <p>Cadwork Herisau</p>"},{"location":"about/#sources-github","title":"Sources GitHub","text":"<p>Github cadwork</p>"},{"location":"auto_attributes/","title":"Auto Attributes","text":""},{"location":"auto_attributes/#script-filled-attributes","title":"Script filled attributes","text":"<p>Each component in cadwork is described geometrically and with regard to its position in the  entire construction project. On the other hand there is an almost unlimited number  of further attributes is available. Some of these attributes like color, material, name,  building (building) and storey (storey) have to be set during the generation of the component.  during the generation of the component. Others are optionally available to the user. Each of these  attributes are explicitly defined by the user by setting them via Modify. Attributes are used to fully describe the part properties. </p> <p>Furthermore, they are used for the creation of a suitable structure of the construction project  and for the transfer of specific information to downstream systems such as an  such as an ERP system.</p> <p>Often, the content of an attribute is dependent on the content of other attributes or even  geometric information. In this case, it is tedious to define the content manually.  manually. For this reason cadwork provides in version 29 attributes which can  which calculate their content independently with the help of a script at runtime.  These are the so-called script-filled attributes. As script language Python  is used. The Python script has access to various properties of the parts via the cadwork API.  of the parts. These can be evaluated in the script and the content of the attribute  can be calculated.</p> <p>In contrast to all previous attributes, the content of a script-filled  attribute is not defined manually by the user. The task of the user is to create a  Python script, which on the basis of other element properties (geometry and attributes) to calculate the content of the script-filled attribute. The  calculated content is displayed as for all other attributes (Modify,  info window, plan outputs), can be used for activating/deactivating as well as showing/hiding  can be used for activating/deactivating and hiding, can be used as a comparison and sorting criterion for the  list calculation and is exported to the different lists.  The only difference to the known attributes is the automated generation of the  content via a Python script.</p>"},{"location":"auto_attributes/#creation-of-script-filled-attributes","title":"Creation of script-filled attributes","text":"<p>These attributes are created similar to the user-defined attributes in the Attributes dialog (User profile -&gt; Wood... -&gt; Attributes) in the new Script Filled -&gt; Configuration tab.</p> <p></p> <p>A created script-filled attribute is available for each element type in cadwork. In the tab \"Type  script populated\" the evaluation of the script can be limited to single element types. Tjis can be useful if, for example  different evaluations are required for plates and beams. If the evaluation is intended only for elements of the type beam, the content of this  attribute remains empty for all other element types. If the element type is subsequently changed, a recalculation of the attributes is triggered.</p>"},{"location":"auto_attributes/#execution-status","title":"execution status","text":"<p>The execution status of the scripts can be controlled. The icon for configuring the script-filled attributes is visualized in the Windows menu bar to the left of the message center icon. This display hides a button that can be used to subsequently change the selected status. </p> <p></p>"},{"location":"auto_attributes/#available-functions","title":"available functions","text":"<p>The available functions are marked in the documentation with an info description. </p>"},{"location":"auto_attributes/#example-code","title":"example code","text":""},{"location":"auto_attributes/#group-and-length","title":"group and length","text":"<p>In this example, the group as well as the component length is concatenated. The length is rounded to 4 decimal digits.</p> group_length.py<pre><code>import cadwork\nimport attribute_controller\nimport geometry_controller\n\nelement_ids = cadwork.get_auto_attribute_elements()#gets the specified element\n\nfor element_id in element_ids:\n    length = geometry_controller.get_length(element_id)\n    group = attribute_controller.get_group(element_id)\n    result = ' Group:' + group + 'Length:' + str(length)\n    cadwork.set_auto_attribute([element_id], result)#sets the attribute\n</code></pre>"},{"location":"auto_attributes/#dimension-check","title":"dimension check","text":"<p>This script checks whether the cross-sections are standard dimensions or not.</p> dimension_check.py<pre><code>import cadwork\nimport element_controller as ec\nimport attribute_controller as ac\nimport geometry_controller as gc\n\nelement_ids = cadwork.get_auto_attribute_elements()\n\nfor element_id in element_ids:\n    height = round(gc.get_height(element_id),3)\n    width = round(gc.get_width(element_id),3)\n    if height % 20 == 0 and width % 20 == 0:\n        cadwork.set_auto_attribute([element_id], 'Standard cross-section')\n    else:\n        cadwork.set_auto_attribute([element_id], 'Special cross-section')\n</code></pre>"},{"location":"auto_attributes/#concatenate-attributes-and-round-dimension","title":"concatenate attributes and round dimension","text":"<p>In this example, the attributes name and material are concatenated with the geometric properties width and height.  The width and height are rounded to the nearest 10.</p> attributes_dimension.py<pre><code>import cadwork\nimport element_controller as ec\nimport attribute_controller as ac\nimport geometry_controller as gc\n\n\nelement_ids = cadwork.get_auto_attribute_elements()\n\nfor element_id in element_ids:\n    name = ac.get_name(element_id)\n    material = ac.get_element_material_name(element_id)\n    width = round(gc.get_width(element_id), -1)\n    height = round(gc.get_height(element_id), -1)\n\n    cadwork.set_auto_attribute([element_id], f'{name};{material};{width};{height}')\n</code></pre>"},{"location":"auto_attributes/#material-and-storey","title":"material and storey","text":"<p>Concatenation of the Building Storey with the material. </p> material_storey.py<pre><code>import cadwork\nimport attribute_controller as ac\nimport bim_controller as bc\n\nelement_ids = cadwork.get_auto_attribute_elements()\n\nfor element_id in element_ids:\n    storey = bc.get_storey(element_id)\n    material = ac.get_element_material_name(element_id)\n\n    cadwork.set_auto_attribute([element_id], f'{material} - {storey}')\n</code></pre>"},{"location":"community/","title":"Community","text":"<p>Questions, bugs, requests for extensions, etc.. can be posted on our GitHub repository.  The posts are publicly viewable and therefore help the entire cadwork python community. </p> <p>let's grow the community </p> <p>GitHub Issues</p> <p></p>"},{"location":"community/#opensource-cwmath","title":"OpenSource cwmath","text":"<p>From the community for the community.  Together we develop a package in which mathematical functions are made available to the community. </p> <p>Help us to grow the package.</p> <p>GitHub cwmath</p>"},{"location":"debug/","title":"Debugging","text":"<p>Debugging python script in cadwork This section refers to calling the plugins from the Plugin Bar. If you want to debug a script in cadwork, then you can enable the console in User Test in the user settings. When cadwork is restarted, the console opens. In the console you will see the screen output, or errors.</p> <p>User Test -&gt; Userprofile -&gt; Test Options... -&gt; Console</p> <p></p>"},{"location":"debug/#console","title":"Console","text":"<p>Bugs present in the script can be detected in the console.</p> <p>Any print statements are also visible in the console.</p> <pre><code>print(\"hello world\")\n</code></pre> <p>Print output in console:</p> <p></p> <p>Displayed Bug in console:</p> <p></p> <p>or use the debugger from Python IDLE.</p> <p></p>"},{"location":"debug/#pycharm-professional","title":"Pycharm Professional","text":""},{"location":"debug/#remote-debugging-with-the-python-remote-debug-server-configuration","title":"Remote debugging with the Python remote debug server configuration","text":"<p>Pycharm debug server configuration </p> <ul> <li>Install the pydevd-pycharm package on the remote machine by running the following command:</li> </ul> <p>pip install pydevd-pycharm~= <p>for example, pip install pydevd-pycharm~=191.3490)</p> <ul> <li>Modify the source code file as follows:</li> </ul> <pre><code>import math\n#==============this code added==================================================================:\nimport pydevd_pycharm\n\npydevd_pycharm.settrace('172.20.208.95', port=12345, stdoutToServer=True,\n                        stderrToServer=True)\n#================================================================================================\nclass Solver:\n\n    def demo(self, a, b, c):\n        d = b ** 2 - 4 * a * c\n        if d &gt; 0:\n            disc = math.sqrt(d)\n            root1 = (-b + disc) / (2 * a)\n            root2 = (-b - disc) / (2 * a)\n            return root1, root2\n        elif d == 0:\n            return -b / (2 * a)\n        else:\n            return \"This equation has no roots\"\n\nif __name__ == '__main__':\n    solver = Solver()\n\nwhile True:\n    a = int(input(\"a: \"))\n    b = int(input(\"b: \"))\n    c = int(input(\"c: \"))\n    result = solver.demo(a, b, c)\n    print(result)\n</code></pre>"},{"location":"get_started/","title":"Set upt Python in cadwork - Step by Step","text":"<p>To use Python scripts in cadwork, they must be located in the userprofile in the folder api.x64. </p> <p>Click in a 3D file on Help --&gt; Info and open the folder named Userprofile which brings you to the api.x64 directory.</p> <p></p> <p>A folder must be created in the api.x64 directory for each script. The Python script must have the same name as the folder so that it can be executed.  </p> <p></p> <p></p> <p>Once you have placed a folder and a script in the directory, you can start a cadwork 3D file. </p> <p>Now show the plugin bar (Window -&gt; Plugins). For the moment you see a button with the name of the plugin/script folder. </p> <p>Instead of this name you can place an icon in the api.x64 folder under the plugin directory.</p> <p>Scripts that should be callable from the plugin bar must be placed in the folder ..\\userprofile_28\\3d\\API.x64. A folder must be created in this directory. The name of the folder must have the same name as the script.</p> <ul> <li>..\\userprofile_28\\3d\\API.x64 (Directory)<ul> <li>MyFirstScript (Folder)<ul> <li>MyFirstScript.py (Python File)</li> <li>Icon.png (Plugin Icon, size ~30x30 pixel)</li> </ul> </li> </ul> </li> </ul>"},{"location":"get_started/#add-a-plugin-icon","title":"add a plugin icon","text":"<p>You can add an icon, which will be displayed in the plugin bar. Just add an PNG or SVG File into the API directory c:\\users\\public\\documents\\cadwork\\userprofil_27\\API.x64\\PythonConsole. The file must have the following name Icon.png or Icon.svg . The icon should be scaled down to 30x30 pixels.</p>"},{"location":"get_started/#plugin-info","title":"Plugin Info","text":"<p>For the plugins you can add a description. To do this, you can use the following xml file and customize and extend it according to your needs.  Save the XML file under the name plugin_info.xml in the directory of your plugin. The plugin info is then displayed as soon as the mouse pointer is hovered over the icon.</p> <p> </p>"},{"location":"get_started/#plugin_infoxml","title":"plugin_info.xml","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;PluginInfo&gt;\n    &lt;Version&gt;1.0.0.0&lt;/Version&gt;\n    &lt;Date&gt;2022-04-12&lt;/Date&gt;\n    &lt;Author&gt;your Name&lt;/Author&gt;\n    &lt;Name&gt;\n      &lt;Text language=\"German\"&gt;Plugin Title - foo bar baz&lt;/Text&gt;\n      &lt;Text language=\"English\"&gt;Plugin Title - foo bar baz&lt;/Text&gt;\n      &lt;Text language=\"French\"&gt; Plugin Title - foo bar baz&lt;/Text&gt;\n      &lt;Text language=\"Italian\"/&gt;\n      &lt;Text language=\"Spanish\"/&gt;\n      &lt;Text language=\"Czech\"/&gt;\n      &lt;Text language=\"Finnish\"/&gt;\n      &lt;Text language=\"Russian\"/&gt;\n      &lt;Text language=\"Polish\"/&gt;\n      &lt;Text language=\"Romanian\"/&gt;\n      &lt;Text language=\"Norwegian\"/&gt;\n      &lt;Text language=\"Chinese\"/&gt;\n      &lt;Text language=\"Portuguese\"/&gt;\n      &lt;Text language=\"Estonian\"/&gt;\n      &lt;Text language=\"Japanese\"/&gt;\n    &lt;/Name&gt;\n    &lt;Description&gt;\n      &lt;Text language=\"German\"&gt;\n&lt;![CDATA[\nHallo Welt... Plugin Beschreibung\n]]&gt;\n      &lt;/Text&gt;\n      &lt;Text language=\"English\"&gt;\n&lt;![CDATA[\nHello World... Plugin Description\n]]&gt;\n      &lt;/Text&gt;\n      &lt;Text language=\"French\"&gt;\n&lt;![CDATA[\nBonjour le monde... Description du plugin\n]]&gt;\n      &lt;/Text&gt;\n      &lt;Text language=\"Italian\"/&gt;\n      &lt;Text language=\"Spanish\"/&gt;\n      &lt;Text language=\"Czech\"/&gt;\n      &lt;Text language=\"Finnish\"/&gt;\n      &lt;Text language=\"Russian\"/&gt;\n      &lt;Text language=\"Polish\"/&gt;\n      &lt;Text language=\"Romanian\"/&gt;\n      &lt;Text language=\"Norwegian\"/&gt;\n      &lt;Text language=\"Chinese\"/&gt;\n      &lt;Text language=\"Portuguese\"/&gt;\n      &lt;Text language=\"Estonian\"/&gt;\n      &lt;Text language=\"Japanese\"/&gt;\n    &lt;/Description&gt;\n&lt;/PluginInfo&gt;\n</code></pre>"},{"location":"get_started/#easy-start-with-python-idle","title":"easy start with Python IDLE","text":"<p>IDLE is Python\u2019s Integrated Development and Learning Environment.</p> <p>The IDLE allows you to run Python scripts directly in cadwork. </p> <p>IDLE has the following features:</p> <ul> <li>coded in 100% pure Python, using the tkinter GUI toolkit</li> <li>cross-platform: works mostly the same on Windows, Unix, and macOS</li> <li>Python shell window (interactive interpreter) with colorizing of code input, output, and error messages</li> <li>multi-window text editor with multiple undo, Python colorizing, smart indent, call tips, auto completion, and other features</li> <li>search within any window, replace within editor windows, and search through multiple files (grep)</li> <li>debugger with persistent breakpoints, stepping, and viewing of global and local namespaces configuration, browsers, and other dialogs</li> </ul> <p>Menus IDLE has two main window types, the Shell window and the Editor window. It is possible to have multiple editor windows simultaneously. On Windows and Linux, each has its own top menu. Each menu documented below indicates which window type it is associated with. Output windows, such as used for Edit =&gt; Find in Files, are a subtype of editor window. They currently have the same top menu but a different default title and context menu. On macOS, there is one application menu. It dynamically changes according to the window currently selected. It has an IDLE menu, and some entries described below are moved around to conform to Apple guidelines.</p>"},{"location":"get_started/#download-clone-idle-in-cadwork-userprofile","title":"download / clone IDLE in cadwork userprofile","text":"<p>Go to Github - cadwork -&gt; click on Button Code and clone or Download ZIP into your directory -&gt; c:\\users\\public\\documents\\cadwork\\userprofil_28\\API.x64\\PythonConsole'. </p> <p></p>"},{"location":"get_started/#run-code","title":"run Code","text":"<p>Open cadwork 3D and open the Python Console (IDLE) from the plugin bar. </p> <p>Save your .py script an hit key F5 or go via Menu -&gt; Run -&gt; Run Module </p> <p>Example Code:</p> <pre><code># import modules\nimport  cadwork   \nimport  element_controller      as ec\nimport  attribute_controller    as ac\n\n# get active element_ids\nelement_ids = ec.get_active_identifiable_element_ids()\n\nfor element_id in element_ids:\n    subgroup = ac.get_subgroup(element_id) # get subgroup name of active element_ids\n    print(subgroup) # print the subgroup names\n</code></pre>"},{"location":"get_started/#use-your-prefered-ide-advanced-user","title":"Use your prefered IDE (advanced user)","text":"<p>Of course, you can also use any other Python IDE.  For this purpose e.g. PyCharm is recommended.  Install the CWAPI3D package into your environment via <code>pip install cwapi3d</code>. Open your IDE and start with your script.  Install a specific version <code>pip install &lt;PACKAGE&gt;==&lt;VERSION&gt;</code></p>"},{"location":"get_started/#python-version-used-in-cadwork","title":"Python version used in cadwork","text":"<p>Cadwork uses CPython version 3.9.10</p>"},{"location":"get_started/#install-cwapi3d-package-on-your-device","title":"Install CWAPI3D package on your device","text":"<p><pre><code>pip install cwapi3d\n</code></pre> Github - cwapi3d python</p> <p>PyPi Python Package</p> <p>The script cannot be run from the IDE (PyCharm, VS Code, ...). The script call must be made in cadwork (Plugin Bar). </p> <p>Example Video - How to Python in cadwork </p>"},{"location":"modules/","title":"Import Packages and Modules","text":"<p>The module cadwork is to be loaded into the namespace at any time. This module is needed for many processes. <code>import cadwork</code> </p> <p>Import packages  As CPython is used in cadwork, it is possible to work with external modules. The modules included in Python as standard can be integrated normally by loading the modules. </p> <pre><code># import modules\nimport  cadwork  \nimport  math\nimport  csv\nimport  tkinter\n...\n...\n</code></pre> <p>Import external packages </p> <p>For external modules, their path variable must be added to the system.</p> <p>sys.path in Python</p> <p>Sys is a built-in Python module that contains parameters specific to the system i.e. it contains variables and methods that interact with the interpreter and are also governed by it. </p> <p>sys.path sys.path is a built-in variable within the sys module. It contains a list of directories that the interpreter will search in for the required module. </p> <p>When a module(a module is a python file) is imported within a Python file, the interpreter first searches for the specified module among its built-in modules. If not found it looks through the list of directories(a directory is a folder that contains related modules) defined by sys.path.</p> <p>source: GeeksforGeeks</p> <p>Initializing sys.path </p> <p>By default, the interpreter looks for a module within the current directory. To make the interpreter search in some other directory you just simply have to change the current directory. The following example depicts a default path taken by the interpreter:</p> <pre><code># import modules\nimport  sys                                 \nimport  utility_controller as uc\n\n# get userprofil path\nUSERPROFIL = uc.get_3d_userprofil_path()   \n\n# appending a path\nsys.path.append(USERPROFIL + '\\\\api.x64\\\\FolderName\\\\PackageFolder')\n\n# printing all paths\nprint(sys.path)\n\n\n# import external modules\nimport PackageFolder                    \n</code></pre>"},{"location":"release/","title":"Release Notes","text":"Date Action Changes controller cadwork 3D build cwapi3d 06.09.2022  Add get_rgb_from_cadwork_color_id visualization 29.309 1.3.14 06.09.2022  Update set_color (update / correction signature) visualization 29.309 1.3.14 06.09.2022  Update create_rectangular_beam_vectors (update signature) element 29.309 1.3.14 06.09.2022  Update export_production_list (add .csv format extension) list 29.309 1.3.14 06.09.2022  Update export_part_list (add .csv format extension) list 29.309 1.3.14 06.09.2022  Update export_production_list_with_settings (add .csv format extension) list 29.309 1.3.14 06.09.2022  Update export_part_list_with_settings (add .csv format extension) list 29.309 1.3.14 13.10.2022  Add get_user_points utility 29.341 1.3.14 13.10.2022  Add get_user_points_with_count utility 29.341 1.3.14 20.10.2022  Add get_scene_list scene 29.341 1.3.14 20.10.2022  Add is_circular_mep cadwork 29.344 1.3.14 20.10.2022  Add is_rectangular_mep cadwork 29.344 1.3.14 10.05.2023  Add get_machine_calculation_state machine 30.218 2.0.0 10.05.2023  Add get_machine_calculation_set_machine_type machine 30.218 2.0.0 16.05.2023  Add execute_shortcut utility 30.218 2.0.0 16.05.2023  Add set_grade material 30.218 2.0.0 16.05.2023  Add get_grade material 30.218 2.0.0 16.05.2023  Add set_quality material 30.218 2.0.0 16.05.2023  Add get_quality material 30.218 2.0.0 16.05.2023  Add set_composition material 30.218 2.0.0 16.05.2023  Add get_composition material 30.218 2.0.0 16.05.2023  Add set_texture_rotated visualization 30.218 2.0.0 16.05.2023  Add is_texture_rotated visualization 30.218 2.0.0 16.05.2023  Add get_name_list_items attribute 30.218 2.0.0 16.05.2023  Add add_item_to_name_list attribute 30.218 2.0.0 16.05.2023  Add get_user_path_from_dialog_in_path utility 30.218 2.0.0 16.05.2023  Add import_element_light file 30.218 2.0.0 01.06.2023  Add enumeration types cadwork 30.240 2.0.9 12.06.2023  Add get_joined_elements element 30.240 2.0.9 12.06.2023  Add start_element_module_calculation_silently element 30.240 2.0.9 12.06.2023  Add add dimension controller dimension 30.240 2.0.9 12.06.2023  Add export_ifc2x3_silently bim 30.317 30.317.0 12.06.2023  Add export_ifc4_silently bim 30.317 30.317.0 12.06.2023  Add add extended_settings cadwork 30.317 30.317.0 12.06.2023  Add convert_bolt_to_standardconnector element 30.317 30.317.0 12.06.2023  Add create_division_zone geometry 30.317 30.317.0 12.06.2023  Add delete_division_zone geometry 30.317 30.317.0 12.06.2023  Add get_division_zone_points geometry 30.317 30.317.0 12.06.2023  Add get_3d_hwnd utility 30.317 30.317.0 05.10.2023  Add export_ifc2x3_silently bim 30.334 30.334.0 05.10.2023  Add export_ifc4_silently bim 30.334 30.334.0 05.10.2023  Add get_element_id_from_base64_ifc_guid bim 30.334 30.334.0 05.10.2023  Add get_ifc_base64_guid bim 30.334 30.334.0 05.10.2023  Add export_ifc2x3_silently_with_options bim 30.334 30.334.0 05.10.2023  Add export_ifc4_silently_with_options bim 30.334 30.334.0 05.10.2023  Add ifc_options cadwork 30.334 30.334.0 05.10.2023  Add rhino_options cadwork 30.334 30.334.0 05.10.2023  Add export_rhino_file_with_options file 30.334 30.334.0"},{"location":"videos/","title":"Videos","text":"This is video shows you how to build a plugin with python in cadwork.             Video Language : English                       This is video shows you how to build and use python for auto populated attributes in cadwork 3D.             Video Language : German                       This video gives you an overview about the python API in cadwork 3D.              Video Language : German"},{"location":"documentation/attribute_controller/","title":"Attribute Controller","text":"<p>rendering: show_root_heading: false show_source: true</p>"},{"location":"documentation/attribute_controller/#attribute_controller","title":"<code>attribute_controller</code>  <code>special</code>","text":""},{"location":"documentation/attribute_controller/#attribute_controller.add_item_to_comment_list","title":"<code>add_item_to_comment_list(a0)</code>","text":"<p>add item to comment list</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> str</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def add_item_to_comment_list(a0: str) -&gt; None:\n    \"\"\"add item to comment list\n    Args:\n        a0 ( str): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.add_item_to_group_list","title":"<code>add_item_to_group_list(a0)</code>","text":"<p>add item to group list</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> str</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def add_item_to_group_list(a0: str) -&gt; None:\n    \"\"\"add item to group list\n    Args:\n        a0 ( str): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.add_item_to_name_list","title":"<code>add_item_to_name_list(a0)</code>","text":"<p>add item to name list</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> str</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def add_item_to_name_list(a0: str) -&gt; None:\n    \"\"\"add item to name list\n    Args:\n        a0 ( str): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.add_item_to_sku_list","title":"<code>add_item_to_sku_list(a0)</code>","text":"<p>add item to sku list</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> str</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def add_item_to_sku_list(a0: str) -&gt; None:\n    \"\"\"add item to sku list\n    Args:\n        a0 ( str): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.add_item_to_subgroup_list","title":"<code>add_item_to_subgroup_list(a0)</code>","text":"<p>add item to subgroup list</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> str</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def add_item_to_subgroup_list(a0: str) -&gt; None:\n    \"\"\"add item to subgroup list\n    Args:\n        a0 ( str): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.add_item_to_user_attribute_list","title":"<code>add_item_to_user_attribute_list(a0, a1)</code>","text":"<p>add item to user attribute list</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <code>a1</code> <code> str</code> <p>a1</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def add_item_to_user_attribute_list(a0: int, a1: str) -&gt; None:\n    \"\"\"add item to user attribute list\n    Args:\n        a0 ( int): a0\n        a1 ( str): a1\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.clear_errors","title":"<code>clear_errors()</code>","text":"<p>clear errors</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def clear_errors() -&gt; None:\n    \"\"\"clear errors\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.delete_additional_data","title":"<code>delete_additional_data(element_id_list, data_id)</code>","text":"<p>Deletes the element additional data</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>data_id</code> <code> str</code> <p>data_id</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def delete_additional_data(element_id_list: List[int], data_id: str) -&gt; None:\n    \"\"\"Deletes the element additional data\n    Args:\n        element_id_list ( List[int]): element_id_list\n        data_id ( str): data_id\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.delete_item_from_comment_list","title":"<code>delete_item_from_comment_list(a0)</code>","text":"<p>delete item from comment list</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> str</code> <p>a0</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def delete_item_from_comment_list(a0: str) -&gt; bool:\n    \"\"\"delete item from comment list\n    Args:\n        a0 ( str): a0\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.delete_item_from_group_list","title":"<code>delete_item_from_group_list(a0)</code>","text":"<p>delete item from group list</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> str</code> <p>a0</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def delete_item_from_group_list(a0: str) -&gt; bool:\n    \"\"\"delete item from group list\n    Args:\n        a0 ( str): a0\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.delete_item_from_sku_list","title":"<code>delete_item_from_sku_list(a0)</code>","text":"<p>delete item from sku list</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> str</code> <p>a0</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def delete_item_from_sku_list(a0: str) -&gt; bool:\n    \"\"\"delete item from sku list\n    Args:\n        a0 ( str): a0\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.delete_item_from_subgroup_list","title":"<code>delete_item_from_subgroup_list(a0)</code>","text":"<p>delete item from subgroup list</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> str</code> <p>a0</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def delete_item_from_subgroup_list(a0: str) -&gt; bool:\n    \"\"\"delete item from subgroup list\n    Args:\n        a0 ( str): a0\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.delete_item_from_user_attribute_list","title":"<code>delete_item_from_user_attribute_list(a0, a1)</code>","text":"<p>delete item from user attribute list</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <code>a1</code> <code> str</code> <p>a1</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def delete_item_from_user_attribute_list(a0: int, a1: str) -&gt; bool:\n    \"\"\"delete item from user attribute list\n    Args:\n        a0 ( int): a0\n        a1 ( str): a1\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.disable_attribute_display","title":"<code>disable_attribute_display()</code>","text":"<p>disable attribute display</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def disable_attribute_display() -&gt; None:\n    \"\"\"disable attribute display\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.enable_attribute_display","title":"<code>enable_attribute_display()</code>","text":"<p>enable attribute display</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def enable_attribute_display() -&gt; None:\n    \"\"\"enable attribute display\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_additional_data","title":"<code>get_additional_data(element_id, data_id)</code>","text":"<p>Gets the element additional data</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <code>data_id</code> <code> str</code> <p>data_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>element additional data (str)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_additional_data(element_id: int, data_id: str) -&gt; str:\n    \"\"\"Gets the element additional data\n    Args:\n        element_id ( int): element_id\n        data_id ( str): data_id\n\n    Returns:\n        element additional data (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_additional_guid","title":"<code>get_additional_guid(a0, a1)</code>","text":"<p>get additional guid</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <code>a1</code> <code> str</code> <p>a1</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_additional_guid(a0: int, a1: str) -&gt; str:\n    \"\"\"get additional guid\n    Args:\n        a0 ( int): a0\n        a1 ( str): a1\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_assembly_number","title":"<code>get_assembly_number(element_id)</code>","text":"<p>get assembly number</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_assembly_number(element_id: int) -&gt; str:\n    \"\"\"get assembly number\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_associated_nesting_name","title":"<code>get_associated_nesting_name(element_id)</code>","text":"<p>get associated nesting name</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_associated_nesting_name(element_id: int) -&gt; str:\n    \"\"\"get associated nesting name\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_associated_nesting_number","title":"<code>get_associated_nesting_number(element_id)</code>","text":"<p>get associated nesting number</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_associated_nesting_number(element_id: int) -&gt; str:\n    \"\"\"get associated nesting number\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_attribute_display_settings_for_2d","title":"<code>get_attribute_display_settings_for_2d()</code>","text":"<p>get attribute display settings for 2d</p> <p>Returns:</p> Type Description <code>attribute_display_settings</code> <p>attribute_display_settings</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_attribute_display_settings_for_2d() -&gt; attribute_display_settings:\n    \"\"\"get attribute display settings for 2d\n    Args:\n\n    Returns:\n        attribute_display_settings\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_attribute_display_settings_for_2d_with_layout","title":"<code>get_attribute_display_settings_for_2d_with_layout()</code>","text":"<p>get attribute display settings for 2d with layout</p> <p>Returns:</p> Type Description <code>attribute_display_settings</code> <p>attribute_display_settings</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_attribute_display_settings_for_2d_with_layout() -&gt; attribute_display_settings:\n    \"\"\"get attribute display settings for 2d with layout\n    Args:\n\n    Returns:\n        attribute_display_settings\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_attribute_display_settings_for_2d_without_layout","title":"<code>get_attribute_display_settings_for_2d_without_layout()</code>","text":"<p>get attribute display settings for 2d without layout</p> <p>Returns:</p> Type Description <code>attribute_display_settings</code> <p>attribute_display_settings</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_attribute_display_settings_for_2d_without_layout() -&gt; attribute_display_settings:\n    \"\"\"get attribute display settings for 2d without layout\n    Args:\n\n    Returns:\n        attribute_display_settings\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_attribute_display_settings_for_3d","title":"<code>get_attribute_display_settings_for_3d()</code>","text":"<p>get attribute display settings for 3d</p> <p>Returns:</p> Type Description <code>attribute_display_settings</code> <p>attribute_display_settings</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_attribute_display_settings_for_3d() -&gt; attribute_display_settings:\n    \"\"\"get attribute display settings for 3d\n    Args:\n\n    Returns:\n        attribute_display_settings\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_attribute_display_settings_for_container","title":"<code>get_attribute_display_settings_for_container()</code>","text":"<p>get attribute display settings for container</p> <p>Returns:</p> Type Description <code>attribute_display_settings</code> <p>attribute_display_settings</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_attribute_display_settings_for_container() -&gt; attribute_display_settings:\n    \"\"\"get attribute display settings for container\n    Args:\n\n    Returns:\n        attribute_display_settings\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_attribute_display_settings_for_export_solid","title":"<code>get_attribute_display_settings_for_export_solid()</code>","text":"<p>get attribute display settings for export solid</p> <p>Returns:</p> Type Description <code>attribute_display_settings</code> <p>attribute_display_settings</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_attribute_display_settings_for_export_solid() -&gt; attribute_display_settings:\n    \"\"\"get attribute display settings for export solid\n    Args:\n\n    Returns:\n        attribute_display_settings\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_attribute_display_settings_for_framed_wall_axis","title":"<code>get_attribute_display_settings_for_framed_wall_axis()</code>","text":"<p>get attribute display settings for framed wall axis</p> <p>Returns:</p> Type Description <code>attribute_display_settings</code> <p>attribute_display_settings</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_attribute_display_settings_for_framed_wall_axis() -&gt; attribute_display_settings:\n    \"\"\"get attribute display settings for framed wall axis\n    Args:\n\n    Returns:\n        attribute_display_settings\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_attribute_display_settings_for_framed_wall_beam","title":"<code>get_attribute_display_settings_for_framed_wall_beam()</code>","text":"<p>get attribute display settings for framed wall beam</p> <p>Returns:</p> Type Description <code>attribute_display_settings</code> <p>attribute_display_settings</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_attribute_display_settings_for_framed_wall_beam() -&gt; attribute_display_settings:\n    \"\"\"get attribute display settings for framed wall beam\n    Args:\n\n    Returns:\n        attribute_display_settings\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_attribute_display_settings_for_framed_wall_opening","title":"<code>get_attribute_display_settings_for_framed_wall_opening()</code>","text":"<p>get attribute display settings for framed wall opening</p> <p>Returns:</p> Type Description <code>attribute_display_settings</code> <p>attribute_display_settings</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_attribute_display_settings_for_framed_wall_opening() -&gt; attribute_display_settings:\n    \"\"\"get attribute display settings for framed wall opening\n    Args:\n\n    Returns:\n        attribute_display_settings\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_attribute_display_settings_for_framed_wall_panel","title":"<code>get_attribute_display_settings_for_framed_wall_panel()</code>","text":"<p>get attribute display settings for framed wall panel</p> <p>Returns:</p> Type Description <code>attribute_display_settings</code> <p>attribute_display_settings</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_attribute_display_settings_for_framed_wall_panel() -&gt; attribute_display_settings:\n    \"\"\"get attribute display settings for framed wall panel\n    Args:\n\n    Returns:\n        attribute_display_settings\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_attribute_display_settings_for_log_wall_axis","title":"<code>get_attribute_display_settings_for_log_wall_axis()</code>","text":"<p>get attribute display settings for log wall axis</p> <p>Returns:</p> Type Description <code>attribute_display_settings</code> <p>attribute_display_settings</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_attribute_display_settings_for_log_wall_axis() -&gt; attribute_display_settings:\n    \"\"\"get attribute display settings for log wall axis\n    Args:\n\n    Returns:\n        attribute_display_settings\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_attribute_display_settings_for_log_wall_beam","title":"<code>get_attribute_display_settings_for_log_wall_beam()</code>","text":"<p>get attribute display settings for log wall beam</p> <p>Returns:</p> Type Description <code>attribute_display_settings</code> <p>attribute_display_settings</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_attribute_display_settings_for_log_wall_beam() -&gt; attribute_display_settings:\n    \"\"\"get attribute display settings for log wall beam\n    Args:\n\n    Returns:\n        attribute_display_settings\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_attribute_display_settings_for_log_wall_opening","title":"<code>get_attribute_display_settings_for_log_wall_opening()</code>","text":"<p>get attribute display settings for log wall opening</p> <p>Returns:</p> Type Description <code>attribute_display_settings</code> <p>attribute_display_settings</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_attribute_display_settings_for_log_wall_opening() -&gt; attribute_display_settings:\n    \"\"\"get attribute display settings for log wall opening\n    Args:\n\n    Returns:\n        attribute_display_settings\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_attribute_display_settings_for_log_wall_panel","title":"<code>get_attribute_display_settings_for_log_wall_panel()</code>","text":"<p>get attribute display settings for log wall panel</p> <p>Returns:</p> Type Description <code>attribute_display_settings</code> <p>attribute_display_settings</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_attribute_display_settings_for_log_wall_panel() -&gt; attribute_display_settings:\n    \"\"\"get attribute display settings for log wall panel\n    Args:\n\n    Returns:\n        attribute_display_settings\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_attribute_display_settings_for_machine","title":"<code>get_attribute_display_settings_for_machine()</code>","text":"<p>get attribute display settings for machine</p> <p>Returns:</p> Type Description <code>attribute_display_settings</code> <p>attribute_display_settings</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_attribute_display_settings_for_machine() -&gt; attribute_display_settings:\n    \"\"\"get attribute display settings for machine\n    Args:\n\n    Returns:\n        attribute_display_settings\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_attribute_display_settings_for_nesting_element","title":"<code>get_attribute_display_settings_for_nesting_element()</code>","text":"<p>get attribute display settings for nesting element</p> <p>Returns:</p> Type Description <code>attribute_display_settings</code> <p>attribute_display_settings</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_attribute_display_settings_for_nesting_element() -&gt; attribute_display_settings:\n    \"\"\"get attribute display settings for nesting element\n    Args:\n\n    Returns:\n        attribute_display_settings\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_attribute_display_settings_for_nesting_volume","title":"<code>get_attribute_display_settings_for_nesting_volume()</code>","text":"<p>get attribute display settings for nesting volume</p> <p>Returns:</p> Type Description <code>attribute_display_settings</code> <p>attribute_display_settings</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_attribute_display_settings_for_nesting_volume() -&gt; attribute_display_settings:\n    \"\"\"get attribute display settings for nesting volume\n    Args:\n\n    Returns:\n        attribute_display_settings\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_attribute_display_settings_for_solid_wall_axis","title":"<code>get_attribute_display_settings_for_solid_wall_axis()</code>","text":"<p>get attribute display settings for solid wall axis</p> <p>Returns:</p> Type Description <code>attribute_display_settings</code> <p>attribute_display_settings</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_attribute_display_settings_for_solid_wall_axis() -&gt; attribute_display_settings:\n    \"\"\"get attribute display settings for solid wall axis\n    Args:\n\n    Returns:\n        attribute_display_settings\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_attribute_display_settings_for_solid_wall_beam","title":"<code>get_attribute_display_settings_for_solid_wall_beam()</code>","text":"<p>get attribute display settings for solid wall beam</p> <p>Returns:</p> Type Description <code>attribute_display_settings</code> <p>attribute_display_settings</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_attribute_display_settings_for_solid_wall_beam() -&gt; attribute_display_settings:\n    \"\"\"get attribute display settings for solid wall beam\n    Args:\n\n    Returns:\n        attribute_display_settings\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_attribute_display_settings_for_solid_wall_opening","title":"<code>get_attribute_display_settings_for_solid_wall_opening()</code>","text":"<p>get attribute display settings for solid wall opening</p> <p>Returns:</p> Type Description <code>attribute_display_settings</code> <p>attribute_display_settings</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_attribute_display_settings_for_solid_wall_opening() -&gt; attribute_display_settings:\n    \"\"\"get attribute display settings for solid wall opening\n    Args:\n\n    Returns:\n        attribute_display_settings\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_attribute_display_settings_for_solid_wall_panel","title":"<code>get_attribute_display_settings_for_solid_wall_panel()</code>","text":"<p>get attribute display settings for solid wall panel</p> <p>Returns:</p> Type Description <code>attribute_display_settings</code> <p>attribute_display_settings</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_attribute_display_settings_for_solid_wall_panel() -&gt; attribute_display_settings:\n    \"\"\"get attribute display settings for solid wall panel\n    Args:\n\n    Returns:\n        attribute_display_settings\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_auto_attribute","title":"<code>get_auto_attribute(element_id, number)</code>","text":"<p>get auto attribute</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <code>number</code> <code> int</code> <p>number</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_auto_attribute(element_id: int, number: int) -&gt; str:\n    \"\"\"get auto attribute\n    Args:\n        element_id ( int): element_id\n        number ( int): number\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_auto_attribute_name","title":"<code>get_auto_attribute_name(number)</code>","text":"<p>get auto attribute name</p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code> int</code> <p>number</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_auto_attribute_name(number: int) -&gt; str:\n    \"\"\"get auto attribute name\n    Args:\n        number ( int): number\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_comment","title":"<code>get_comment(element_id)</code>","text":"<p>Gets the element comment</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>element comment (str)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_comment(element_id: int) -&gt; str:\n    \"\"\"Gets the element comment\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element comment (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_comment_list_items","title":"<code>get_comment_list_items()</code>","text":"<p>get comment list items</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_comment_list_items() -&gt; List[str]:\n    \"\"\"get comment list items\n    Args:\n\n    Returns:\n        List[str]\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_container_number","title":"<code>get_container_number(a0)</code>","text":"<p>get container number</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_container_number(a0: int) -&gt; int:\n    \"\"\"get container number\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_container_number_with_prefix","title":"<code>get_container_number_with_prefix(a0)</code>","text":"<p>get container number with prefix</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_container_number_with_prefix(a0: int) -&gt; str:\n    \"\"\"get container number with prefix\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_cutting_set","title":"<code>get_cutting_set(element_id)</code>","text":"<p>Gets the element cutting set</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>element cutting set (str)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_cutting_set(element_id: int) -&gt; str:\n    \"\"\"Gets the element cutting set\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element cutting set (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_element_grouping_type","title":"<code>get_element_grouping_type()</code>","text":"<p>Get the element grouping type (group, subgroup)</p> <p>Returns:</p> Type Description <code>element_grouping_type</code> <p>element grouping type (element_grouping_type)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_element_grouping_type() -&gt; element_grouping_type:\n    \"\"\"Get the element grouping type (group, subgroup)\n    Args:\n\n    Returns:\n        element grouping type (element_grouping_type)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_element_material_name","title":"<code>get_element_material_name(element_id)</code>","text":"<p>Gets the element material name</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>element material name (str)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_element_material_name(element_id: int) -&gt; str:\n    \"\"\"Gets the element material name\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element material name (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_element_type","title":"<code>get_element_type(element_id)</code>","text":"<p>Gets the element type</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>element_type</code> <p>element type (element_type)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_element_type(element_id: int) -&gt; element_type:\n    \"\"\"Gets the element type\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element type (element_type)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_extended_settings","title":"<code>get_extended_settings(element_id)</code>","text":"<p>Gets the element extended settings</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>extended_settings</code> <p>element extended settings (extended_settings)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_extended_settings(element_id: int) -&gt; extended_settings:\n    \"\"\"Gets the element extended settings\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element extended settings (extended_settings)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_fastening_attribute","title":"<code>get_fastening_attribute(element_id)</code>","text":"<p>Get the element fastening attribute</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>element fastening attribute (str)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_fastening_attribute(element_id: int) -&gt; str:\n    \"\"\"Get the element fastening attribute\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element fastening attribute (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_group","title":"<code>get_group(element_id)</code>","text":"<p>Gets the element group</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>element group (str)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_group(element_id: int) -&gt; str:\n    \"\"\"Gets the element group\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element group (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_group_list_items","title":"<code>get_group_list_items()</code>","text":"<p>get group list items</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_group_list_items() -&gt; List[str]:\n    \"\"\"get group list items\n    Args:\n\n    Returns:\n        List[str]\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_ignore_in_vba_calculation","title":"<code>get_ignore_in_vba_calculation(element)</code>","text":"<p>get ignore in vba calculation</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code> int</code> <p>element</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_ignore_in_vba_calculation(element: int) -&gt; bool:\n    \"\"\"get ignore in vba calculation\n    Args:\n        element ( int): element\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_last_error","title":"<code>get_last_error(error_code)</code>","text":"<p>Gets the last error</p> <p>Parameters:</p> Name Type Description Default <code>error_code</code> <code> int</code> <p>error_code</p> required <p>Returns:</p> Type Description <code>str</code> <p>error string (str)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_last_error(error_code: int) -&gt; str:\n    \"\"\"Gets the last error\n    Args:\n        error_code ( int): error_code\n\n    Returns:\n        error string (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_list_quantity","title":"<code>get_list_quantity(element_id)</code>","text":"<p>get list quantity</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_list_quantity(element_id: int) -&gt; int:\n    \"\"\"get list quantity\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_machine_calculation_set","title":"<code>get_machine_calculation_set(element_id)</code>","text":"<p>Gets the element machine calculation set</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>element machine calculation set (str)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_machine_calculation_set(element_id: int) -&gt; str:\n    \"\"\"Gets the element machine calculation set\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element machine calculation set (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_machine_calculation_set_machine_type","title":"<code>get_machine_calculation_set_machine_type(a0)</code>","text":"<p>get machine calculation set machine type</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_machine_calculation_set_machine_type(a0: int) -&gt; str:\n    \"\"\"get machine calculation set machine type\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_machine_calculation_state","title":"<code>get_machine_calculation_state(a0)</code>","text":"<p>get machine calculation state</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_machine_calculation_state(a0: int) -&gt; str:\n    \"\"\"get machine calculation state\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_name","title":"<code>get_name(element_id)</code>","text":"<p>Gets the element name</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>element name (str)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_name(element_id: int) -&gt; str:\n    \"\"\"Gets the element name\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element name (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_name_extended_settings","title":"<code>get_name_extended_settings(name)</code>","text":"<p>Gets the extended settings for an element name</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code> str</code> <p>name</p> required <p>Returns:</p> Type Description <code>extended_settings</code> <p>extended settings (extended_settings)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_name_extended_settings(name: str) -&gt; extended_settings:\n    \"\"\"Gets the extended settings for an element name\n    Args:\n        name ( str): name\n\n    Returns:\n        extended settings (extended_settings)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_name_list_items","title":"<code>get_name_list_items()</code>","text":"<p>get name list items</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_name_list_items() -&gt; List[str]:\n    \"\"\"get name list items\n    Args:\n\n    Returns:\n        List[str]\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_name_process_type","title":"<code>get_name_process_type(name)</code>","text":"<p>Gets the process type for an element name</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code> str</code> <p>name</p> required <p>Returns:</p> Type Description <code>process_type</code> <p>process type (process_type)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_name_process_type(name: str) -&gt; process_type:\n    \"\"\"Gets the process type for an element name\n    Args:\n        name ( str): name\n\n    Returns:\n        process type (process_type)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_node_symbol","title":"<code>get_node_symbol(element)</code>","text":"<p>get node symbol</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code> int</code> <p>element</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_node_symbol(element: int) -&gt; int:\n    \"\"\"get node symbol\n    Args:\n        element ( int): element\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_output_type","title":"<code>get_output_type(element_id)</code>","text":"<p>Gets the element output type</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>process_type</code> <p>element output type (process_type)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_output_type(element_id: int) -&gt; process_type:\n    \"\"\"Gets the element output type\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element output type (process_type)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_part_number","title":"<code>get_part_number(element_id)</code>","text":"<p>Gets the element part number</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>int</code> <p>element part number (int)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_part_number(element_id: int) -&gt; int:\n    \"\"\"Gets the element part number\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element part number (int)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_prefab_layer","title":"<code>get_prefab_layer(element_id)</code>","text":"<p>Gets the element prefab layer</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>element prefab layer (str)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_prefab_layer(element_id: int) -&gt; str:\n    \"\"\"Gets the element prefab layer\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element prefab layer (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_prefab_layer_all_assigned","title":"<code>get_prefab_layer_all_assigned(a0)</code>","text":"<p>get prefab layer all assigned</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_prefab_layer_all_assigned(a0: int) -&gt; List[int]:\n    \"\"\"get prefab layer all assigned\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_prefab_layer_with_dimensions","title":"<code>get_prefab_layer_with_dimensions(a0)</code>","text":"<p>get prefab layer with dimensions</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_prefab_layer_with_dimensions(a0: int) -&gt; List[int]:\n    \"\"\"get prefab layer with dimensions\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_prefab_layer_without_dimensions","title":"<code>get_prefab_layer_without_dimensions(a0)</code>","text":"<p>get prefab layer without dimensions</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_prefab_layer_without_dimensions(a0: int) -&gt; List[int]:\n    \"\"\"get prefab layer without dimensions\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_production_number","title":"<code>get_production_number(element_id)</code>","text":"<p>Gets the element production number</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>int</code> <p>element production number (int)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_production_number(element_id: int) -&gt; int:\n    \"\"\"Gets the element production number\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element production number (int)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_sku","title":"<code>get_sku(element_id)</code>","text":"<p>Gets the element SKU</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>element SKU (str)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_sku(element_id: int) -&gt; str:\n    \"\"\"Gets the element SKU\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element SKU (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_sku_list_items","title":"<code>get_sku_list_items()</code>","text":"<p>get sku list items</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_sku_list_items() -&gt; List[str]:\n    \"\"\"get sku list items\n    Args:\n\n    Returns:\n        List[str]\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_standard_element_name","title":"<code>get_standard_element_name(element_id)</code>","text":"<p>get standard element name</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_standard_element_name(element_id: int) -&gt; str:\n    \"\"\"get standard element name\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_steel_shape_name","title":"<code>get_steel_shape_name(element_id)</code>","text":"<p>get steel shape name</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_steel_shape_name(element_id: int) -&gt; str:\n    \"\"\"get steel shape name\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_subgroup","title":"<code>get_subgroup(element_id)</code>","text":"<p>Gets the element subgroup</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>element subgroup (str)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_subgroup(element_id: int) -&gt; str:\n    \"\"\"Gets the element subgroup\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element subgroup (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_subgroup_list_items","title":"<code>get_subgroup_list_items()</code>","text":"<p>get subgroup list items</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_subgroup_list_items() -&gt; List[str]:\n    \"\"\"get subgroup list items\n    Args:\n\n    Returns:\n        List[str]\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_user_attribute","title":"<code>get_user_attribute(element_id, number)</code>","text":"<p>Gets the element user attribute</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <code>number</code> <code> int</code> <p>number</p> required <p>Returns:</p> Type Description <code>str</code> <p>element user attribute (str)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_user_attribute(element_id: int, number: int) -&gt; str:\n    \"\"\"Gets the element user attribute\n    Args:\n        element_id ( int): element_id\n        number ( int): number\n\n    Returns:\n        element user attribute (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_user_attribute_count","title":"<code>get_user_attribute_count()</code>","text":"<p>get user attribute count</p> <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_user_attribute_count() -&gt; int:\n    \"\"\"get user attribute count\n    Args:\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_user_attribute_list_items","title":"<code>get_user_attribute_list_items(a0)</code>","text":"<p>get user attribute list items</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_user_attribute_list_items(a0: int) -&gt; List[str]:\n    \"\"\"get user attribute list items\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        List[str]\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_user_attribute_name","title":"<code>get_user_attribute_name(number)</code>","text":"<p>Gets the user attribute name</p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code> int</code> <p>number</p> required <p>Returns:</p> Type Description <code>str</code> <p>user attribute name (str)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_user_attribute_name(number: int) -&gt; str:\n    \"\"\"Gets the user attribute name\n    Args:\n        number ( int): number\n\n    Returns:\n        user attribute name (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.get_wall_situation","title":"<code>get_wall_situation(element_id)</code>","text":"<p>Gets the element wall situation</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>element wall situation (str)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def get_wall_situation(element_id: int) -&gt; str:\n    \"\"\"Gets the element wall situation\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element wall situation (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_architecture_wall_2dc","title":"<code>is_architecture_wall_2dc(element)</code>","text":"<p>Tests if the element has a 2dc reference wall</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code> int</code> <p>element</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is architecturewall 2dc (bool)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_architecture_wall_2dc(element: int) -&gt; bool:\n    \"\"\"Tests if the element has a 2dc reference wall\n    Args:\n        element ( int): element\n\n    Returns:\n        is architecturewall 2dc (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_architecture_wall_xml","title":"<code>is_architecture_wall_xml(element)</code>","text":"<p>Tests if the element has a xml reference wall</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code> int</code> <p>element</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is architecturewall xml (bool)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_architecture_wall_xml(element: int) -&gt; bool:\n    \"\"\"Tests if the element has a xml reference wall\n    Args:\n        element ( int): element\n\n    Returns:\n        is architecturewall xml (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_attribute_display_enabled","title":"<code>is_attribute_display_enabled()</code>","text":"<p>is attribute display enabled</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_attribute_display_enabled() -&gt; bool:\n    \"\"\"is attribute display enabled\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_auxiliary","title":"<code>is_auxiliary(element_id)</code>","text":"<p>Tests if element is auxiliary</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is element auxiliary (bool)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_auxiliary(element_id: int) -&gt; bool:\n    \"\"\"Tests if element is auxiliary\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        is element auxiliary (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_beam","title":"<code>is_beam(element_id)</code>","text":"<p>Tests if element is beam</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is element beam (bool)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_beam(element_id: int) -&gt; bool:\n    \"\"\"Tests if element is beam\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        is element beam (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_btl_processing_group","title":"<code>is_btl_processing_group(a0)</code>","text":"<p>is btl processing group</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_btl_processing_group(a0: int) -&gt; bool:\n    \"\"\"is btl processing group\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_caddy_object","title":"<code>is_caddy_object(element_id)</code>","text":"<p>Tests if the element is caddy object</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is element caddy object (bool)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_caddy_object(element_id: int) -&gt; bool:\n    \"\"\"Tests if the element is caddy object\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        is element caddy object (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_circular_mep","title":"<code>is_circular_mep(a0)</code>","text":"<p>is circular mep</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_circular_mep(a0: int) -&gt; bool:\n    \"\"\"is circular mep\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_connector_axis","title":"<code>is_connector_axis(element_id)</code>","text":"<p>Tests if element is connector axis</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is element connector axis (bool)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_connector_axis(element_id: int) -&gt; bool:\n    \"\"\"Tests if element is connector axis\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        is element connector axis (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_container","title":"<code>is_container(element_id)</code>","text":"<p>Tests if element is container</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is element container (bool)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_container(element_id: int) -&gt; bool:\n    \"\"\"Tests if element is container\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        is element container (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_drilling","title":"<code>is_drilling(element_id)</code>","text":"<p>Tests if element is drilling</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is element drilling (bool)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_drilling(element_id: int) -&gt; bool:\n    \"\"\"Tests if element is drilling\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        is element drilling (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_envelope","title":"<code>is_envelope(element_id)</code>","text":"<p>is envelope</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_envelope(element_id: int) -&gt; bool:\n    \"\"\"is envelope\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_export_solid","title":"<code>is_export_solid(element_id)</code>","text":"<p>Tests if element is export solid</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is element export solid (bool)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_export_solid(element_id: int) -&gt; bool:\n    \"\"\"Tests if element is export solid\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        is element export solid (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_floor","title":"<code>is_floor(element_id)</code>","text":"<p>Tests if element is floor</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is element floor (bool)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_floor(element_id: int) -&gt; bool:\n    \"\"\"Tests if element is floor\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        is element floor (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_framed_floor","title":"<code>is_framed_floor(element_id)</code>","text":"<p>is framed floor</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_framed_floor(element_id: int) -&gt; bool:\n    \"\"\"is framed floor\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_framed_roof","title":"<code>is_framed_roof(element_id)</code>","text":"<p>is framed roof</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_framed_roof(element_id: int) -&gt; bool:\n    \"\"\"is framed roof\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_framed_wall","title":"<code>is_framed_wall(element_id)</code>","text":"<p>is framed wall</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_framed_wall(element_id: int) -&gt; bool:\n    \"\"\"is framed wall\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_hundegger_processing_group","title":"<code>is_hundegger_processing_group(a0)</code>","text":"<p>is hundegger processing group</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_hundegger_processing_group(a0: int) -&gt; bool:\n    \"\"\"is hundegger processing group\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_line","title":"<code>is_line(element_id)</code>","text":"<p>Tests if the element is a Line</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is Line (bool)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_line(element_id: int) -&gt; bool:\n    \"\"\"Tests if the element is a Line\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        is Line (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_log_wall","title":"<code>is_log_wall(element_id)</code>","text":"<p>is log wall</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_log_wall(element_id: int) -&gt; bool:\n    \"\"\"is log wall\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_metal","title":"<code>is_metal(element_id)</code>","text":"<p>Tests if element is metal</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is element metal (bool)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_metal(element_id: int) -&gt; bool:\n    \"\"\"Tests if element is metal\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        is element metal (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_nesting_parent","title":"<code>is_nesting_parent(a0)</code>","text":"<p>is nesting parent</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_nesting_parent(a0: int) -&gt; bool:\n    \"\"\"is nesting parent\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_nesting_raw_part","title":"<code>is_nesting_raw_part(a0)</code>","text":"<p>is nesting raw part</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_nesting_raw_part(a0: int) -&gt; bool:\n    \"\"\"is nesting raw part\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_node","title":"<code>is_node(element_id)</code>","text":"<p>Tests if element is node</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is element node (bool)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_node(element_id: int) -&gt; bool:\n    \"\"\"Tests if element is node\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        is element node (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_opening","title":"<code>is_opening(element_id)</code>","text":"<p>Tests if element is opening</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is element opening (bool)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_opening(element_id: int) -&gt; bool:\n    \"\"\"Tests if element is opening\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        is element opening (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_panel","title":"<code>is_panel(element_id)</code>","text":"<p>Tests if element is panel</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is element panel (bool)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_panel(element_id: int) -&gt; bool:\n    \"\"\"Tests if element is panel\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        is element panel (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_processing","title":"<code>is_processing(element_id)</code>","text":"<p>is processing</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_processing(element_id: int) -&gt; bool:\n    \"\"\"is processing\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_rectangular_mep","title":"<code>is_rectangular_mep(a0)</code>","text":"<p>is rectangular mep</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_rectangular_mep(a0: int) -&gt; bool:\n    \"\"\"is rectangular mep\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_roof","title":"<code>is_roof(element_id)</code>","text":"<p>Tests if element is roof</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is element roof (bool)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_roof(element_id: int) -&gt; bool:\n    \"\"\"Tests if element is roof\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        is element roof (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_roof_surface","title":"<code>is_roof_surface(element_id)</code>","text":"<p>Tests if the element is roof surface</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is element roof surface (bool)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_roof_surface(element_id: int) -&gt; bool:\n    \"\"\"Tests if the element is roof surface\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        is element roof surface (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_solid_floor","title":"<code>is_solid_floor(element_id)</code>","text":"<p>is solid floor</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_solid_floor(element_id: int) -&gt; bool:\n    \"\"\"is solid floor\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_solid_roof","title":"<code>is_solid_roof(element_id)</code>","text":"<p>is solid roof</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_solid_roof(element_id: int) -&gt; bool:\n    \"\"\"is solid roof\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_solid_wall","title":"<code>is_solid_wall(element_id)</code>","text":"<p>is solid wall</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_solid_wall(element_id: int) -&gt; bool:\n    \"\"\"is solid wall\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_surface","title":"<code>is_surface(element_id)</code>","text":"<p>Tests if the element is a Surface</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is Surface (bool)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_surface(element_id: int) -&gt; bool:\n    \"\"\"Tests if the element is a Surface\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        is Surface (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.is_wall","title":"<code>is_wall(element_id)</code>","text":"<p>Tests if element is wall</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is element wall (bool)</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def is_wall(element_id: int) -&gt; bool:\n    \"\"\"Tests if element is wall\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        is element wall (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_additional_data","title":"<code>set_additional_data(element_id_list, data_id, data_text)</code>","text":"<p>Sets the element additional data</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>data_id</code> <code> str</code> <p>data_id</p> required <code>data_text</code> <code> str</code> <p>data_text</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_additional_data(element_id_list: List[int], data_id: str, data_text: str) -&gt; None:\n    \"\"\"Sets the element additional data\n    Args:\n        element_id_list ( List[int]): element_id_list\n        data_id ( str): data_id\n        data_text ( str): data_text\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_additional_guid","title":"<code>set_additional_guid(a0, a1, a2)</code>","text":"<p>set additional guid</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <code>a1</code> <code> str</code> <p>a1</p> required <code>a2</code> <code> str</code> <p>a2</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_additional_guid(a0: List[int], a1: str, a2: str) -&gt; None:\n    \"\"\"set additional guid\n    Args:\n        a0 ( List[int]): a0\n        a1 ( str): a1\n        a2 ( str): a2\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_assembly_number","title":"<code>set_assembly_number(element_id_list, assembly_number)</code>","text":"<p>set assembly number</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>assembly_number</code> <code> str</code> <p>assembly_number</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_assembly_number(element_id_list: List[int], assembly_number: str) -&gt; None:\n    \"\"\"set assembly number\n    Args:\n        element_id_list ( List[int]): element_id_list\n        assembly_number ( str): assembly_number\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_attribute_display_settings_for_2d","title":"<code>set_attribute_display_settings_for_2d(a0)</code>","text":"<p>set attribute display settings for 2d</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> attribute_display_settings</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_attribute_display_settings_for_2d(a0: attribute_display_settings) -&gt; None:\n    \"\"\"set attribute display settings for 2d\n    Args:\n        a0 ( attribute_display_settings): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_attribute_display_settings_for_2d_with_layout","title":"<code>set_attribute_display_settings_for_2d_with_layout(a0)</code>","text":"<p>set attribute display settings for 2d with layout</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> attribute_display_settings</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_attribute_display_settings_for_2d_with_layout(a0: attribute_display_settings) -&gt; None:\n    \"\"\"set attribute display settings for 2d with layout\n    Args:\n        a0 ( attribute_display_settings): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_attribute_display_settings_for_2d_without_layout","title":"<code>set_attribute_display_settings_for_2d_without_layout(a0)</code>","text":"<p>set attribute display settings for 2d without layout</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> attribute_display_settings</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_attribute_display_settings_for_2d_without_layout(a0: attribute_display_settings) -&gt; None:\n    \"\"\"set attribute display settings for 2d without layout\n    Args:\n        a0 ( attribute_display_settings): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_attribute_display_settings_for_3d","title":"<code>set_attribute_display_settings_for_3d(a0)</code>","text":"<p>set attribute display settings for 3d</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> attribute_display_settings</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_attribute_display_settings_for_3d(a0: attribute_display_settings) -&gt; None:\n    \"\"\"set attribute display settings for 3d\n    Args:\n        a0 ( attribute_display_settings): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_attribute_display_settings_for_container","title":"<code>set_attribute_display_settings_for_container(a0)</code>","text":"<p>set attribute display settings for container</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> attribute_display_settings</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_attribute_display_settings_for_container(a0: attribute_display_settings) -&gt; None:\n    \"\"\"set attribute display settings for container\n    Args:\n        a0 ( attribute_display_settings): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_attribute_display_settings_for_export_solid","title":"<code>set_attribute_display_settings_for_export_solid(a0)</code>","text":"<p>set attribute display settings for export solid</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> attribute_display_settings</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_attribute_display_settings_for_export_solid(a0: attribute_display_settings) -&gt; None:\n    \"\"\"set attribute display settings for export solid\n    Args:\n        a0 ( attribute_display_settings): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_attribute_display_settings_for_framed_wall_axis","title":"<code>set_attribute_display_settings_for_framed_wall_axis(a0)</code>","text":"<p>set attribute display settings for framed wall axis</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> attribute_display_settings</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_attribute_display_settings_for_framed_wall_axis(a0: attribute_display_settings) -&gt; None:\n    \"\"\"set attribute display settings for framed wall axis\n    Args:\n        a0 ( attribute_display_settings): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_attribute_display_settings_for_framed_wall_beam","title":"<code>set_attribute_display_settings_for_framed_wall_beam(a0)</code>","text":"<p>set attribute display settings for framed wall beam</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> attribute_display_settings</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_attribute_display_settings_for_framed_wall_beam(a0: attribute_display_settings) -&gt; None:\n    \"\"\"set attribute display settings for framed wall beam\n    Args:\n        a0 ( attribute_display_settings): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_attribute_display_settings_for_framed_wall_opening","title":"<code>set_attribute_display_settings_for_framed_wall_opening(a0)</code>","text":"<p>set attribute display settings for framed wall opening</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> attribute_display_settings</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_attribute_display_settings_for_framed_wall_opening(a0: attribute_display_settings) -&gt; None:\n    \"\"\"set attribute display settings for framed wall opening\n    Args:\n        a0 ( attribute_display_settings): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_attribute_display_settings_for_framed_wall_panel","title":"<code>set_attribute_display_settings_for_framed_wall_panel(a0)</code>","text":"<p>set attribute display settings for framed wall panel</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> attribute_display_settings</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_attribute_display_settings_for_framed_wall_panel(a0: attribute_display_settings) -&gt; None:\n    \"\"\"set attribute display settings for framed wall panel\n    Args:\n        a0 ( attribute_display_settings): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_attribute_display_settings_for_log_wall_axis","title":"<code>set_attribute_display_settings_for_log_wall_axis(a0)</code>","text":"<p>set attribute display settings for log wall axis</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> attribute_display_settings</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_attribute_display_settings_for_log_wall_axis(a0: attribute_display_settings) -&gt; None:\n    \"\"\"set attribute display settings for log wall axis\n    Args:\n        a0 ( attribute_display_settings): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_attribute_display_settings_for_log_wall_beam","title":"<code>set_attribute_display_settings_for_log_wall_beam(a0)</code>","text":"<p>set attribute display settings for log wall beam</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> attribute_display_settings</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_attribute_display_settings_for_log_wall_beam(a0: attribute_display_settings) -&gt; None:\n    \"\"\"set attribute display settings for log wall beam\n    Args:\n        a0 ( attribute_display_settings): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_attribute_display_settings_for_log_wall_opening","title":"<code>set_attribute_display_settings_for_log_wall_opening(a0)</code>","text":"<p>set attribute display settings for log wall opening</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> attribute_display_settings</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_attribute_display_settings_for_log_wall_opening(a0: attribute_display_settings) -&gt; None:\n    \"\"\"set attribute display settings for log wall opening\n    Args:\n        a0 ( attribute_display_settings): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_attribute_display_settings_for_log_wall_panel","title":"<code>set_attribute_display_settings_for_log_wall_panel(a0)</code>","text":"<p>set attribute display settings for log wall panel</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> attribute_display_settings</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_attribute_display_settings_for_log_wall_panel(a0: attribute_display_settings) -&gt; None:\n    \"\"\"set attribute display settings for log wall panel\n    Args:\n        a0 ( attribute_display_settings): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_attribute_display_settings_for_machine","title":"<code>set_attribute_display_settings_for_machine(a0)</code>","text":"<p>set attribute display settings for machine</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> attribute_display_settings</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_attribute_display_settings_for_machine(a0: attribute_display_settings) -&gt; None:\n    \"\"\"set attribute display settings for machine\n    Args:\n        a0 ( attribute_display_settings): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_attribute_display_settings_for_nesting_element","title":"<code>set_attribute_display_settings_for_nesting_element(a0)</code>","text":"<p>set attribute display settings for nesting element</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> attribute_display_settings</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_attribute_display_settings_for_nesting_element(a0: attribute_display_settings) -&gt; None:\n    \"\"\"set attribute display settings for nesting element\n    Args:\n        a0 ( attribute_display_settings): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_attribute_display_settings_for_nesting_volume","title":"<code>set_attribute_display_settings_for_nesting_volume(a0)</code>","text":"<p>set attribute display settings for nesting volume</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> attribute_display_settings</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_attribute_display_settings_for_nesting_volume(a0: attribute_display_settings) -&gt; None:\n    \"\"\"set attribute display settings for nesting volume\n    Args:\n        a0 ( attribute_display_settings): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_attribute_display_settings_for_solid_wall_axis","title":"<code>set_attribute_display_settings_for_solid_wall_axis(a0)</code>","text":"<p>set attribute display settings for solid wall axis</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> attribute_display_settings</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_attribute_display_settings_for_solid_wall_axis(a0: attribute_display_settings) -&gt; None:\n    \"\"\"set attribute display settings for solid wall axis\n    Args:\n        a0 ( attribute_display_settings): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_attribute_display_settings_for_solid_wall_beam","title":"<code>set_attribute_display_settings_for_solid_wall_beam(a0)</code>","text":"<p>set attribute display settings for solid wall beam</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> attribute_display_settings</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_attribute_display_settings_for_solid_wall_beam(a0: attribute_display_settings) -&gt; None:\n    \"\"\"set attribute display settings for solid wall beam\n    Args:\n        a0 ( attribute_display_settings): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_attribute_display_settings_for_solid_wall_opening","title":"<code>set_attribute_display_settings_for_solid_wall_opening(a0)</code>","text":"<p>set attribute display settings for solid wall opening</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> attribute_display_settings</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_attribute_display_settings_for_solid_wall_opening(a0: attribute_display_settings) -&gt; None:\n    \"\"\"set attribute display settings for solid wall opening\n    Args:\n        a0 ( attribute_display_settings): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_attribute_display_settings_for_solid_wall_panel","title":"<code>set_attribute_display_settings_for_solid_wall_panel(a0)</code>","text":"<p>set attribute display settings for solid wall panel</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> attribute_display_settings</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_attribute_display_settings_for_solid_wall_panel(a0: attribute_display_settings) -&gt; None:\n    \"\"\"set attribute display settings for solid wall panel\n    Args:\n        a0 ( attribute_display_settings): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_comment","title":"<code>set_comment(element_id_list, comment)</code>","text":"<p>Sets the element comment</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>comment</code> <code> str</code> <p>comment</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_comment(element_id_list: List[int], comment: str) -&gt; None:\n    \"\"\"Sets the element comment\n    Args:\n        element_id_list ( List[int]): element_id_list\n        comment ( str): comment\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_container_number","title":"<code>set_container_number(a0, a1)</code>","text":"<p>set container number</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <code>a1</code> <code> int</code> <p>a1</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_container_number(a0: List[int], a1: int) -&gt; None:\n    \"\"\"set container number\n    Args:\n        a0 ( List[int]): a0\n        a1 ( int): a1\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_element_grouping_type","title":"<code>set_element_grouping_type(element_grouping_type)</code>","text":"<p>Set the element grouping type (group, subgroup)</p> <p>Parameters:</p> Name Type Description Default <code>element_grouping_type</code> <code> element_grouping_type</code> <p>element_grouping_type</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_element_grouping_type(element_grouping_type: element_grouping_type) -&gt; None:\n    \"\"\"Set the element grouping type (group, subgroup)\n    Args:\n        element_grouping_type ( element_grouping_type): element_grouping_type\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_element_material","title":"<code>set_element_material(element_id_list, material)</code>","text":"<p>Sets the element material</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>material</code> <code> int</code> <p>material</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_element_material(element_id_list: List[int], material: int) -&gt; None:\n    \"\"\"Sets the element material\n    Args:\n        element_id_list ( List[int]): element_id_list\n        material ( int): material\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_extended_settings","title":"<code>set_extended_settings(element_id_list, extended_settings)</code>","text":"<p>Sets the element extended settings</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>extended_settings</code> <code> None</code> <p>extended_settings</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_extended_settings(element_id_list: List[int], extended_settings: None) -&gt; None:\n    \"\"\"Sets the element extended settings\n    Args:\n        element_id_list ( List[int]): element_id_list\n        extended_settings ( None): extended_settings\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_fastening_attribute","title":"<code>set_fastening_attribute(element_id_list, value)</code>","text":"<p>Sets the element fastening attribute</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>value</code> <code> str</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_fastening_attribute(element_id_list: List[int], value: str) -&gt; None:\n    \"\"\"Sets the element fastening attribute\n    Args:\n        element_id_list ( List[int]): element_id_list\n        value ( str): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_floor","title":"<code>set_floor(element_id_list)</code>","text":"<p>Sets the element to floor</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_floor(element_id_list: List[int]) -&gt; None:\n    \"\"\"Sets the element to floor\n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_framed_wall","title":"<code>set_framed_wall(element_id_list)</code>","text":"<p>Sets the element to framed wall</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_framed_wall(element_id_list: List[int]) -&gt; None:\n    \"\"\"Sets the element to framed wall\n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_group","title":"<code>set_group(element_id_list, group)</code>","text":"<p>Sets the element group</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>group</code> <code> str</code> <p>group</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_group(element_id_list: List[int], group: str) -&gt; None:\n    \"\"\"Sets the element group\n    Args:\n        element_id_list ( List[int]): element_id_list\n        group ( str): group\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_ignore_in_vba_calculation","title":"<code>set_ignore_in_vba_calculation(elements, ignore)</code>","text":"<p>Sets if the element should be ignored in VBA Calculation</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>ignore</code> <code> bool</code> <p>ignore</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_ignore_in_vba_calculation(elements: List[int], ignore: bool) -&gt; None:\n    \"\"\"Sets if the element should be ignored in VBA Calculation\n    Args:\n        elements ( List[int]): elements\n        ignore ( bool): ignore\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_layer_settings","title":"<code>set_layer_settings(element_id_list, layer_settings)</code>","text":"<p>set layer settings</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>layer_settings</code> <code> None</code> <p>layer_settings</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_layer_settings(element_id_list: List[int], layer_settings: None) -&gt; None:\n    \"\"\"set layer settings\n    Args:\n        element_id_list ( List[int]): element_id_list\n        layer_settings ( None): layer_settings\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_list_quantity","title":"<code>set_list_quantity(element_id_list, list_quantity)</code>","text":"<p>set list quantity</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>list_quantity</code> <code> int</code> <p>list_quantity</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_list_quantity(element_id_list: List[int], list_quantity: int) -&gt; None:\n    \"\"\"set list quantity\n    Args:\n        element_id_list ( List[int]): element_id_list\n        list_quantity ( int): list_quantity\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_log_wall","title":"<code>set_log_wall(elements)</code>","text":"<p>Sets elements to log wall.</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_log_wall(elements: List[int]) -&gt; None:\n    \"\"\"Sets elements to log wall.\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_name","title":"<code>set_name(element_id_list, name)</code>","text":"<p>Sets the element name</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>name</code> <code> str</code> <p>name</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_name(element_id_list: List[int], name: str) -&gt; None:\n    \"\"\"Sets the element name\n    Args:\n        element_id_list ( List[int]): element_id_list\n        name ( str): name\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_name_extended_settings","title":"<code>set_name_extended_settings(name, extended_settings)</code>","text":"<p>Sets the extended settings for an element name</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code> str</code> <p>name</p> required <code>extended_settings</code> <code> None</code> <p>extended_settings</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_name_extended_settings(name: str, extended_settings: None) -&gt; None:\n    \"\"\"Sets the extended settings for an element name\n    Args:\n        name ( str): name\n        extended_settings ( None): extended_settings\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_name_process_type","title":"<code>set_name_process_type(name, process_type)</code>","text":"<p>Sets the process type for an element name</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code> str</code> <p>name</p> required <code>process_type</code> <code> None</code> <p>process_type</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_name_process_type(name: str, process_type: None) -&gt; None:\n    \"\"\"Sets the process type for an element name\n    Args:\n        name ( str): name\n        process_type ( None): process_type\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_node_symbol","title":"<code>set_node_symbol(elements, symbol)</code>","text":"<p>set node symbol</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>symbol</code> <code> int</code> <p>symbol</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_node_symbol(elements: List[int], symbol: int) -&gt; None:\n    \"\"\"set node symbol\n    Args:\n        elements ( List[int]): elements\n        symbol ( int): symbol\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_opening","title":"<code>set_opening(element_id_list)</code>","text":"<p>Sets the element to opening</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_opening(element_id_list: List[int]) -&gt; None:\n    \"\"\"Sets the element to opening\n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_output_type","title":"<code>set_output_type(element_id_list, process_type)</code>","text":"<p>Sets the element output type</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>process_type</code> <code> None</code> <p>process_type</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_output_type(element_id_list: List[int], process_type: None) -&gt; None:\n    \"\"\"Sets the element output type\n    Args:\n        element_id_list ( List[int]): element_id_list\n        process_type ( None): process_type\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_part_number","title":"<code>set_part_number(element_id_list, part_number)</code>","text":"<p>Sets the element part number</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>part_number</code> <code> int</code> <p>part_number</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_part_number(element_id_list: List[int], part_number: int) -&gt; None:\n    \"\"\"Sets the element part number\n    Args:\n        element_id_list ( List[int]): element_id_list\n        part_number ( int): part_number\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_process_type_and_extended_settings_from_name","title":"<code>set_process_type_and_extended_settings_from_name(element_id_list)</code>","text":"<p>Sets the element process type and extended settings from the element name</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_process_type_and_extended_settings_from_name(element_id_list: List[int]) -&gt; None:\n    \"\"\"Sets the element process type and extended settings from the element name\n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_production_number","title":"<code>set_production_number(element_id_list, production_number)</code>","text":"<p>Sets the element production number</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>production_number</code> <code> int</code> <p>production_number</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_production_number(element_id_list: List[int], production_number: int) -&gt; None:\n    \"\"\"Sets the element production number\n    Args:\n        element_id_list ( List[int]): element_id_list\n        production_number ( int): production_number\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_reference_wall_2dc","title":"<code>set_reference_wall_2dc(elements, _2dc_file_path)</code>","text":"<p>Applies a new 2dc reference wall to an element</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>_2dc_file_path</code> <code> str</code> <p>_2dc_file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_reference_wall_2dc(elements: List[int], _2dc_file_path: str) -&gt; None:\n    \"\"\"Applies a new 2dc reference wall to an element\n    Args:\n        elements ( List[int]): elements\n        _2dc_file_path ( str): _2dc_file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_roof","title":"<code>set_roof(elements)</code>","text":"<p>Sets elements to roof cover.</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_roof(elements: List[int]) -&gt; None:\n    \"\"\"Sets elements to roof cover.\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_sku","title":"<code>set_sku(element_id_list, sku)</code>","text":"<p>Sets the element SKU</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>sku</code> <code> str</code> <p>sku</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_sku(element_id_list: List[int], sku: str) -&gt; None:\n    \"\"\"Sets the element SKU\n    Args:\n        element_id_list ( List[int]): element_id_list\n        sku ( str): sku\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_solid_floor","title":"<code>set_solid_floor(elements)</code>","text":"<p>Sets elements to solid floor.</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_solid_floor(elements: List[int]) -&gt; None:\n    \"\"\"Sets elements to solid floor.\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_solid_roof","title":"<code>set_solid_roof(elements)</code>","text":"<p>Sets elements to solid roof cover.</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_solid_roof(elements: List[int]) -&gt; None:\n    \"\"\"Sets elements to solid roof cover.\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_solid_wall","title":"<code>set_solid_wall(elements)</code>","text":"<p>Sets elements to solid wall.</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_solid_wall(elements: List[int]) -&gt; None:\n    \"\"\"Sets elements to solid wall.\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_standard_part","title":"<code>set_standard_part(elements)</code>","text":"<p>Sets covers (wall,opening or floor) to standard part.</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_standard_part(elements: List[int]) -&gt; None:\n    \"\"\"Sets covers (wall,opening or floor) to standard part.\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_subgroup","title":"<code>set_subgroup(element_id_list, subgroup)</code>","text":"<p>Sets the element subgroup</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>subgroup</code> <code> str</code> <p>subgroup</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_subgroup(element_id_list: List[int], subgroup: str) -&gt; None:\n    \"\"\"Sets the element subgroup\n    Args:\n        element_id_list ( List[int]): element_id_list\n        subgroup ( str): subgroup\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_user_attribute","title":"<code>set_user_attribute(element_id_list, number, user_attribute)</code>","text":"<p>Sets the element user attribute</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>number</code> <code> int</code> <p>number</p> required <code>user_attribute</code> <code> str</code> <p>user_attribute</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_user_attribute(element_id_list: List[int], number: int, user_attribute: str) -&gt; None:\n    \"\"\"Sets the element user attribute\n    Args:\n        element_id_list ( List[int]): element_id_list\n        number ( int): number\n        user_attribute ( str): user_attribute\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_user_attribute_name","title":"<code>set_user_attribute_name(number, user_attribute_name)</code>","text":"<p>Sets the user attribute name</p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code> int</code> <p>number</p> required <code>user_attribute_name</code> <code> str</code> <p>user_attribute_name</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_user_attribute_name(number: int, user_attribute_name: str) -&gt; None:\n    \"\"\"Sets the user attribute name\n    Args:\n        number ( int): number\n        user_attribute_name ( str): user_attribute_name\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.set_wall","title":"<code>set_wall(a0)</code>","text":"<p>set wall</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def set_wall(a0: List[int]) -&gt; None:\n    \"\"\"set wall\n    Args:\n        a0 ( List[int]): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/attribute_controller/#attribute_controller.update_auto_attribute","title":"<code>update_auto_attribute()</code>","text":"<p>update auto attribute</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>attribute_controller\\__init__.py</code> <pre><code>def update_auto_attribute() -&gt; None:\n    \"\"\"update auto attribute\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/","title":"BIM Controller","text":""},{"location":"documentation/bim_controller/#bim_controller","title":"<code>bim_controller</code>  <code>special</code>","text":""},{"location":"documentation/bim_controller/#bim_controller.clear_errors","title":"<code>clear_errors()</code>","text":"<p>clear errors</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def clear_errors() -&gt; None:\n    \"\"\"clear errors\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.convert_exchange_objects","title":"<code>convert_exchange_objects(exchange_objects)</code>","text":"<p>converts a list of Exchange Objects to Cadwork Elements </p> <p>Parameters:</p> Name Type Description Default <code>exchange_objects</code> <code> List[int]</code> <p>exchange_objects</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def convert_exchange_objects(exchange_objects: List[int]) -&gt; List[int]:\n    \"\"\"converts a list of Exchange Objects to Cadwork Elements \n    Args:\n        exchange_objects ( List[int]): exchange_objects\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.export_bcf","title":"<code>export_bcf(file_path)</code>","text":"<p>export bcf</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def export_bcf(file_path: str) -&gt; bool:\n    \"\"\"export bcf\n    Args:\n        file_path ( str): file_path\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.export_ifc","title":"<code>export_ifc(element_i_ds, file_path)</code>","text":"<p>export ifc</p> <p>Parameters:</p> Name Type Description Default <code>element_i_ds</code> <code> List[int]</code> <p>element_i_ds</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def export_ifc(element_i_ds: List[int], file_path: str) -&gt; bool:\n    \"\"\"export ifc\n    Args:\n        element_i_ds ( List[int]): element_i_ds\n        file_path ( str): file_path\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.export_ifc2x3_silently","title":"<code>export_ifc2x3_silently(element_i_ds, file_path)</code>","text":"<p>export ifc2x3 silently</p> <p>Parameters:</p> Name Type Description Default <code>element_i_ds</code> <code> List[int]</code> <p>element_i_ds</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def export_ifc2x3_silently(element_i_ds: List[int], file_path: str) -&gt; bool:\n    \"\"\"export ifc2x3 silently\n    Args:\n        element_i_ds ( List[int]): element_i_ds\n        file_path ( str): file_path\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.export_ifc2x3_silently_with_options","title":"<code>export_ifc2x3_silently_with_options(element_i_ds, file_path, options)</code>","text":"<p>export ifc2x3 silently with options</p> <p>Parameters:</p> Name Type Description Default <code>element_i_ds</code> <code> List[int]</code> <p>element_i_ds</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <code>options</code> <code> ifc_options</code> <p>options</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def export_ifc2x3_silently_with_options(element_i_ds: List[int], file_path: str, options: ifc_options) -&gt; bool:\n    \"\"\"export ifc2x3 silently with options\n    Args:\n        element_i_ds ( List[int]): element_i_ds\n        file_path ( str): file_path\n        options ( ifc_options): options\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.export_ifc4_silently","title":"<code>export_ifc4_silently(element_i_ds, file_path)</code>","text":"<p>export ifc4 silently</p> <p>Parameters:</p> Name Type Description Default <code>element_i_ds</code> <code> List[int]</code> <p>element_i_ds</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def export_ifc4_silently(element_i_ds: List[int], file_path: str) -&gt; bool:\n    \"\"\"export ifc4 silently\n    Args:\n        element_i_ds ( List[int]): element_i_ds\n        file_path ( str): file_path\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.export_ifc4_silently_with_options","title":"<code>export_ifc4_silently_with_options(element_i_ds, file_path, options)</code>","text":"<p>export ifc4 silently with options</p> <p>Parameters:</p> Name Type Description Default <code>element_i_ds</code> <code> List[int]</code> <p>element_i_ds</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <code>options</code> <code> ifc_options</code> <p>options</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def export_ifc4_silently_with_options(element_i_ds: List[int], file_path: str, options: ifc_options) -&gt; bool:\n    \"\"\"export ifc4 silently with options\n    Args:\n        element_i_ds ( List[int]): element_i_ds\n        file_path ( str): file_path\n        options ( ifc_options): options\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.get_all_buildings","title":"<code>get_all_buildings()</code>","text":"<p>get all buildings</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def get_all_buildings() -&gt; List[str]:\n    \"\"\"get all buildings\n    Args:\n\n    Returns:\n        List[str]\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.get_all_storeys","title":"<code>get_all_storeys(building)</code>","text":"<p>get all storeys</p> <p>Parameters:</p> Name Type Description Default <code>building</code> <code> str</code> <p>building</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def get_all_storeys(building: str) -&gt; List[str]:\n    \"\"\"get all storeys\n    Args:\n        building ( str): building\n\n    Returns:\n        List[str]\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.get_building","title":"<code>get_building(element)</code>","text":"<p>get building</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code> int</code> <p>element</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def get_building(element: int) -&gt; str:\n    \"\"\"get building\n    Args:\n        element ( int): element\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.get_element_id_from_base64_ifc_guid","title":"<code>get_element_id_from_base64_ifc_guid(a1)</code>","text":"<p>get element id from base64 ifc guid</p> <p>Parameters:</p> Name Type Description Default <code>a1</code> <code> str</code> <p>a1</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def get_element_id_from_base64_ifc_guid(a1: str) -&gt; int:\n    \"\"\"get element id from base64 ifc guid\n    Args:\n        a1 ( str): a1\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.get_ifc2x3_element_type","title":"<code>get_ifc2x3_element_type(element_id)</code>","text":"<p>get ifc2x3 element type</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>ifc_2x3_element_type</code> <p>ifc_2x3_element_type</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def get_ifc2x3_element_type(element_id: int) -&gt; ifc_2x3_element_type:\n    \"\"\"get ifc2x3 element type\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        ifc_2x3_element_type\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.get_ifc2x3_element_type_display_string","title":"<code>get_ifc2x3_element_type_display_string(element_type)</code>","text":"<p>get ifc2x3 element type display string</p> <p>Parameters:</p> Name Type Description Default <code>element_type</code> <code> None</code> <p>element_type</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def get_ifc2x3_element_type_display_string(element_type: None) -&gt; str:\n    \"\"\"get ifc2x3 element type display string\n    Args:\n        element_type ( None): element_type\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.get_ifc2x3_element_type_string","title":"<code>get_ifc2x3_element_type_string(element_type)</code>","text":"<p>get ifc2x3 element type string</p> <p>Parameters:</p> Name Type Description Default <code>element_type</code> <code> None</code> <p>element_type</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def get_ifc2x3_element_type_string(element_type: None) -&gt; str:\n    \"\"\"get ifc2x3 element type string\n    Args:\n        element_type ( None): element_type\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.get_ifc_base64_guid","title":"<code>get_ifc_base64_guid(element_id)</code>","text":"<p>Get IFC base64 Guid from element ID </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>The IFC GUID in base64 string format (\"28kif20KPEuBjk2m1N3ep$\"). (str)</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def get_ifc_base64_guid(element_id: int) -&gt; str:\n    \"\"\"Get IFC base64 Guid from element ID \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        The IFC GUID in base64 string format (\"28kif20KPEuBjk2m1N3ep$\"). (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.get_ifc_guid","title":"<code>get_ifc_guid(element_id)</code>","text":"<p>get ifc guid</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def get_ifc_guid(element_id: int) -&gt; str:\n    \"\"\"get ifc guid\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.get_last_error","title":"<code>get_last_error(a0)</code>","text":"<p>get last error</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def get_last_error(a0: int) -&gt; str:\n    \"\"\"get last error\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.get_storey","title":"<code>get_storey(element)</code>","text":"<p>get storey</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code> int</code> <p>element</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def get_storey(element: int) -&gt; str:\n    \"\"\"get storey\n    Args:\n        element ( int): element\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.get_storey_height","title":"<code>get_storey_height(building, storey)</code>","text":"<p>get storey height</p> <p>Parameters:</p> Name Type Description Default <code>building</code> <code> str</code> <p>building</p> required <code>storey</code> <code> str</code> <p>storey</p> required <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def get_storey_height(building: str, storey: str) -&gt; float:\n    \"\"\"get storey height\n    Args:\n        building ( str): building\n        storey ( str): storey\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.import_bcf","title":"<code>import_bcf(file_path)</code>","text":"<p>import bcf</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def import_bcf(file_path: str) -&gt; bool:\n    \"\"\"import bcf\n    Args:\n        file_path ( str): file_path\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.import_ifc_as_graphical_object","title":"<code>import_ifc_as_graphical_object(file_path)</code>","text":"<p>import ifc as graphical object</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def import_ifc_as_graphical_object(file_path: str) -&gt; bool:\n    \"\"\"import ifc as graphical object\n    Args:\n        file_path ( str): file_path\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.import_ifc_return_exchange_objects","title":"<code>import_ifc_return_exchange_objects(file_path)</code>","text":"<p>imports an IFC File and returns the ids of the Exchange Objects </p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def import_ifc_return_exchange_objects(file_path: str) -&gt; List[int]:\n    \"\"\"imports an IFC File and returns the ids of the Exchange Objects \n    Args:\n        file_path ( str): file_path\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.set_building_and_storey","title":"<code>set_building_and_storey(element_id_list, building, storey)</code>","text":"<p>set building and storey</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>building</code> <code> str</code> <p>building</p> required <code>storey</code> <code> str</code> <p>storey</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def set_building_and_storey(element_id_list: List[int], building: str, storey: str) -&gt; None:\n    \"\"\"set building and storey\n    Args:\n        element_id_list ( List[int]): element_id_list\n        building ( str): building\n        storey ( str): storey\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.set_ifc2x3_element_type","title":"<code>set_ifc2x3_element_type(element_i_ds, element_type)</code>","text":"<p>set ifc2x3 element type</p> <p>Parameters:</p> Name Type Description Default <code>element_i_ds</code> <code> List[int]</code> <p>element_i_ds</p> required <code>element_type</code> <code> None</code> <p>element_type</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def set_ifc2x3_element_type(element_i_ds: List[int], element_type: None) -&gt; None:\n    \"\"\"set ifc2x3 element type\n    Args:\n        element_i_ds ( List[int]): element_i_ds\n        element_type ( None): element_type\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/bim_controller/#bim_controller.set_storey_height","title":"<code>set_storey_height(building, storey, height)</code>","text":"<p>set storey height</p> <p>Parameters:</p> Name Type Description Default <code>building</code> <code> str</code> <p>building</p> required <code>storey</code> <code> str</code> <p>storey</p> required <code>height</code> <code> float</code> <p>height</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>bim_controller\\__init__.py</code> <pre><code>def set_storey_height(building: str, storey: str, height: float) -&gt; None:\n    \"\"\"set storey height\n    Args:\n        building ( str): building\n        storey ( str): storey\n        height ( float): height\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/brep_data/","title":"BREP","text":"<p>rendering: show_root_heading: false show_source: true</p>"},{"location":"documentation/brep_data/#cadwork.facet_list","title":"<code>cadwork.facet_list</code>","text":""},{"location":"documentation/brep_data/#cadwork.facet_list.facet_list","title":"<code> facet_list        </code>","text":"Source code in <code>cadwork\\facet_list.py</code> <pre><code>class facet_list:\n    def count(self) -&gt; int:\n        \"\"\"count\n        Args:\n\n        Returns:\n            int\n        \"\"\"\n\n    def at(self, index: int) -&gt; point_3d:\n        \"\"\"at\n        Args:\n            index ( int): index\n\n        Returns:\n            point_3d\n        \"\"\"\n\n    def get_external_polygon(self, index: int) -&gt; vertex_list:\n        \"\"\"get external polygon\n        Args:\n            index ( int): index\n\n        Returns:\n            vertex_list\n        \"\"\"\n\n    def get_internal_polygons(self, index: int) -&gt; polygon_list:\n        \"\"\"get internal polygons\n        Args:\n            index ( int): index\n\n        Returns:\n            polygon_list\n        \"\"\"\n\n    def get_vertices_for_reference_face(self) -&gt; vertex_list:\n        \"\"\"get vertices for reference face\n        Args:\n\n        Returns:\n            vertex_list\n        \"\"\"\n\n    def get_external_polygon_for_reference_face(self) -&gt; vertex_list:\n        \"\"\"get external polygon for reference face\n        Args:\n\n        Returns:\n            vertex_list\n        \"\"\"\n\n    def get_internal_polygons_for_reference_face(self) -&gt; polygon_list:\n        \"\"\"get internal polygons for reference face\n        Args:\n\n        Returns:\n            polygon_list\n        \"\"\"\n\n    def get_normal_vector(self, index: int) -&gt; point_3d:\n        \"\"\"get normal vector\n        Args:\n            index ( int): index\n\n        Returns:\n            point_3d\n        \"\"\"\n\n    def get_distance_to_origin(self, index: int) -&gt; float:\n        \"\"\"get distance to origin\n        Args:\n            index ( int): index\n\n        Returns:\n            float\n        \"\"\"\n</code></pre>"},{"location":"documentation/brep_data/#cadwork.facet_list.facet_list.at","title":"<code>at(self, index)</code>","text":"<p>at</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code> int</code> <p>index</p> required <p>Returns:</p> Type Description <code>&lt;module 'cadwork.point_3d' from 'D:\\\\source\\\\mtldev\\\\cwapi3dpython\\\\src\\\\cadwork\\\\point_3d.py'&gt;</code> <p>point_3d</p> Source code in <code>cadwork\\facet_list.py</code> <pre><code>def at(self, index: int) -&gt; point_3d:\n    \"\"\"at\n    Args:\n        index ( int): index\n\n    Returns:\n        point_3d\n    \"\"\"\n</code></pre>"},{"location":"documentation/brep_data/#cadwork.facet_list.facet_list.count","title":"<code>count(self)</code>","text":"<p>count</p> <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>cadwork\\facet_list.py</code> <pre><code>def count(self) -&gt; int:\n    \"\"\"count\n    Args:\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/brep_data/#cadwork.facet_list.facet_list.get_distance_to_origin","title":"<code>get_distance_to_origin(self, index)</code>","text":"<p>get distance to origin</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code> int</code> <p>index</p> required <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>cadwork\\facet_list.py</code> <pre><code>def get_distance_to_origin(self, index: int) -&gt; float:\n    \"\"\"get distance to origin\n    Args:\n        index ( int): index\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/brep_data/#cadwork.facet_list.facet_list.get_external_polygon","title":"<code>get_external_polygon(self, index)</code>","text":"<p>get external polygon</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code> int</code> <p>index</p> required <p>Returns:</p> Type Description <code>&lt;module 'cadwork.vertex_list' from 'D:\\\\source\\\\mtldev\\\\cwapi3dpython\\\\src\\\\cadwork\\\\vertex_list.py'&gt;</code> <p>vertex_list</p> Source code in <code>cadwork\\facet_list.py</code> <pre><code>def get_external_polygon(self, index: int) -&gt; vertex_list:\n    \"\"\"get external polygon\n    Args:\n        index ( int): index\n\n    Returns:\n        vertex_list\n    \"\"\"\n</code></pre>"},{"location":"documentation/brep_data/#cadwork.facet_list.facet_list.get_external_polygon_for_reference_face","title":"<code>get_external_polygon_for_reference_face(self)</code>","text":"<p>get external polygon for reference face</p> <p>Returns:</p> Type Description <code>&lt;module 'cadwork.vertex_list' from 'D:\\\\source\\\\mtldev\\\\cwapi3dpython\\\\src\\\\cadwork\\\\vertex_list.py'&gt;</code> <p>vertex_list</p> Source code in <code>cadwork\\facet_list.py</code> <pre><code>def get_external_polygon_for_reference_face(self) -&gt; vertex_list:\n    \"\"\"get external polygon for reference face\n    Args:\n\n    Returns:\n        vertex_list\n    \"\"\"\n</code></pre>"},{"location":"documentation/brep_data/#cadwork.facet_list.facet_list.get_internal_polygons","title":"<code>get_internal_polygons(self, index)</code>","text":"<p>get internal polygons</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code> int</code> <p>index</p> required <p>Returns:</p> Type Description <code>&lt;module 'cadwork.polygon_list' from 'D:\\\\source\\\\mtldev\\\\cwapi3dpython\\\\src\\\\cadwork\\\\polygon_list.py'&gt;</code> <p>polygon_list</p> Source code in <code>cadwork\\facet_list.py</code> <pre><code>def get_internal_polygons(self, index: int) -&gt; polygon_list:\n    \"\"\"get internal polygons\n    Args:\n        index ( int): index\n\n    Returns:\n        polygon_list\n    \"\"\"\n</code></pre>"},{"location":"documentation/brep_data/#cadwork.facet_list.facet_list.get_internal_polygons_for_reference_face","title":"<code>get_internal_polygons_for_reference_face(self)</code>","text":"<p>get internal polygons for reference face</p> <p>Returns:</p> Type Description <code>&lt;module 'cadwork.polygon_list' from 'D:\\\\source\\\\mtldev\\\\cwapi3dpython\\\\src\\\\cadwork\\\\polygon_list.py'&gt;</code> <p>polygon_list</p> Source code in <code>cadwork\\facet_list.py</code> <pre><code>def get_internal_polygons_for_reference_face(self) -&gt; polygon_list:\n    \"\"\"get internal polygons for reference face\n    Args:\n\n    Returns:\n        polygon_list\n    \"\"\"\n</code></pre>"},{"location":"documentation/brep_data/#cadwork.facet_list.facet_list.get_normal_vector","title":"<code>get_normal_vector(self, index)</code>","text":"<p>get normal vector</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code> int</code> <p>index</p> required <p>Returns:</p> Type Description <code>&lt;module 'cadwork.point_3d' from 'D:\\\\source\\\\mtldev\\\\cwapi3dpython\\\\src\\\\cadwork\\\\point_3d.py'&gt;</code> <p>point_3d</p> Source code in <code>cadwork\\facet_list.py</code> <pre><code>def get_normal_vector(self, index: int) -&gt; point_3d:\n    \"\"\"get normal vector\n    Args:\n        index ( int): index\n\n    Returns:\n        point_3d\n    \"\"\"\n</code></pre>"},{"location":"documentation/brep_data/#cadwork.facet_list.facet_list.get_vertices_for_reference_face","title":"<code>get_vertices_for_reference_face(self)</code>","text":"<p>get vertices for reference face</p> <p>Returns:</p> Type Description <code>&lt;module 'cadwork.vertex_list' from 'D:\\\\source\\\\mtldev\\\\cwapi3dpython\\\\src\\\\cadwork\\\\vertex_list.py'&gt;</code> <p>vertex_list</p> Source code in <code>cadwork\\facet_list.py</code> <pre><code>def get_vertices_for_reference_face(self) -&gt; vertex_list:\n    \"\"\"get vertices for reference face\n    Args:\n\n    Returns:\n        vertex_list\n    \"\"\"\n</code></pre>"},{"location":"documentation/brep_data/#cadwork.edge_list","title":"<code>cadwork.edge_list</code>","text":""},{"location":"documentation/brep_data/#cadwork.edge_list.edge_list","title":"<code> edge_list        </code>","text":"Source code in <code>cadwork\\edge_list.py</code> <pre><code>class edge_list:\n    def count(self) -&gt; int:\n        \"\"\"count\n        Args:\n\n        Returns:\n            int\n        \"\"\"\n\n    def at(self, index: int) -&gt; point_3d:\n        \"\"\"at\n        Args:\n            index ( int): index\n\n        Returns:\n            point_3d\n        \"\"\"\n</code></pre>"},{"location":"documentation/brep_data/#cadwork.edge_list.edge_list.at","title":"<code>at(self, index)</code>","text":"<p>at</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code> int</code> <p>index</p> required <p>Returns:</p> Type Description <code>&lt;module 'cadwork.point_3d' from 'D:\\\\source\\\\mtldev\\\\cwapi3dpython\\\\src\\\\cadwork\\\\point_3d.py'&gt;</code> <p>point_3d</p> Source code in <code>cadwork\\edge_list.py</code> <pre><code>def at(self, index: int) -&gt; point_3d:\n    \"\"\"at\n    Args:\n        index ( int): index\n\n    Returns:\n        point_3d\n    \"\"\"\n</code></pre>"},{"location":"documentation/brep_data/#cadwork.edge_list.edge_list.count","title":"<code>count(self)</code>","text":"<p>count</p> <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>cadwork\\edge_list.py</code> <pre><code>def count(self) -&gt; int:\n    \"\"\"count\n    Args:\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/brep_data/#cadwork.polygon_list","title":"<code>cadwork.polygon_list</code>","text":""},{"location":"documentation/brep_data/#cadwork.polygon_list.polygon_list","title":"<code> polygon_list        </code>","text":"Source code in <code>cadwork\\polygon_list.py</code> <pre><code>class polygon_list:\n    def count(self) -&gt; int:\n        \"\"\"count\n        Args:\n\n        Returns:\n            int\n        \"\"\"\n\n    def at(self, index: int) -&gt; point_3d:\n        \"\"\"at\n        Args:\n            index ( int): index\n\n        Returns:\n            point_3d\n        \"\"\"\n</code></pre>"},{"location":"documentation/brep_data/#cadwork.polygon_list.polygon_list.at","title":"<code>at(self, index)</code>","text":"<p>at</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code> int</code> <p>index</p> required <p>Returns:</p> Type Description <code>&lt;module 'cadwork.point_3d' from 'D:\\\\source\\\\mtldev\\\\cwapi3dpython\\\\src\\\\cadwork\\\\point_3d.py'&gt;</code> <p>point_3d</p> Source code in <code>cadwork\\polygon_list.py</code> <pre><code>def at(self, index: int) -&gt; point_3d:\n    \"\"\"at\n    Args:\n        index ( int): index\n\n    Returns:\n        point_3d\n    \"\"\"\n</code></pre>"},{"location":"documentation/brep_data/#cadwork.polygon_list.polygon_list.count","title":"<code>count(self)</code>","text":"<p>count</p> <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>cadwork\\polygon_list.py</code> <pre><code>def count(self) -&gt; int:\n    \"\"\"count\n    Args:\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/brep_data/#cadwork.vertex_list","title":"<code>cadwork.vertex_list</code>","text":""},{"location":"documentation/brep_data/#cadwork.vertex_list.vertex_list","title":"<code> vertex_list        </code>","text":"Source code in <code>cadwork\\vertex_list.py</code> <pre><code>class vertex_list:\n    def count(self) -&gt; int:\n        \"\"\"count\n        Args:\n\n        Returns:\n            int\n        \"\"\"\n\n    def at(self, index: int) -&gt; point_3d:\n        \"\"\"at\n        Args:\n            index ( int): index\n\n        Returns:\n            point_3d\n        \"\"\"\n\n    def append(self, vertex: point_3d) -&gt; None:\n        \"\"\"append\n        Args:\n            vertex ( point_3d): vertex\n\n        Returns:\n            None\n        \"\"\"\n</code></pre>"},{"location":"documentation/brep_data/#cadwork.vertex_list.vertex_list.append","title":"<code>append(self, vertex)</code>","text":"<p>append</p> <p>Parameters:</p> Name Type Description Default <code>vertex</code> <code> point_3d</code> <p>vertex</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\vertex_list.py</code> <pre><code>def append(self, vertex: point_3d) -&gt; None:\n    \"\"\"append\n    Args:\n        vertex ( point_3d): vertex\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/brep_data/#cadwork.vertex_list.vertex_list.at","title":"<code>at(self, index)</code>","text":"<p>at</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code> int</code> <p>index</p> required <p>Returns:</p> Type Description <code>&lt;module 'cadwork.point_3d' from 'D:\\\\source\\\\mtldev\\\\cwapi3dpython\\\\src\\\\cadwork\\\\point_3d.py'&gt;</code> <p>point_3d</p> Source code in <code>cadwork\\vertex_list.py</code> <pre><code>def at(self, index: int) -&gt; point_3d:\n    \"\"\"at\n    Args:\n        index ( int): index\n\n    Returns:\n        point_3d\n    \"\"\"\n</code></pre>"},{"location":"documentation/brep_data/#cadwork.vertex_list.vertex_list.count","title":"<code>count(self)</code>","text":"<p>count</p> <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>cadwork\\vertex_list.py</code> <pre><code>def count(self) -&gt; int:\n    \"\"\"count\n    Args:\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/camera_data/","title":"Camera Data","text":"<p>rendering: show_root_heading: false show_source: true</p> <p>rendering: show_root_heading: false show_source: true</p>"},{"location":"documentation/camera_data/#cadwork.camera_data","title":"<code>cadwork.camera_data</code>","text":""},{"location":"documentation/camera_data/#cadwork.camera_data.camera_data","title":"<code> camera_data        </code>","text":"Source code in <code>cadwork\\camera_data.py</code> <pre><code>class camera_data:\n    def get_position(self) -&gt; point_3d:\n        \"\"\"get position\n        Args:\n\n        Returns:\n            point_3d\n        \"\"\"\n\n    def set_position(self, position: point_3d) -&gt; None:\n        \"\"\"set position\n        Args:\n            position ( point_3d): position\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_target(self) -&gt; point_3d:\n        \"\"\"get target\n        Args:\n\n        Returns:\n            point_3d\n        \"\"\"\n\n    def set_target(self, target: point_3d) -&gt; None:\n        \"\"\"set target\n        Args:\n            target ( point_3d): target\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_up_vector(self) -&gt; point_3d:\n        \"\"\"get up vector\n        Args:\n\n        Returns:\n            point_3d\n        \"\"\"\n\n    def set_up_vector(self, up_vector: point_3d) -&gt; None:\n        \"\"\"set up vector\n        Args:\n            up_vector ( point_3d): up_vector\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_projection_type(self) -&gt; projection_type:\n        \"\"\"get projection type\n        Args:\n\n        Returns:\n            projection_type\n        \"\"\"\n\n    def set_projection_type(self, projection_type: projection_type) -&gt; None:\n        \"\"\"set projection type\n        Args:\n            projection_type ( projection_type): projection_type\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_field_width(self) -&gt; float:\n        \"\"\"get field width\n        Args:\n\n        Returns:\n            float\n        \"\"\"\n\n    def set_field_width(self, field_width: float) -&gt; None:\n        \"\"\"set field width\n        Args:\n            field_width ( float): field_width\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_field_height(self) -&gt; float:\n        \"\"\"get field height\n        Args:\n\n        Returns:\n            float\n        \"\"\"\n\n    def set_field_height(self, field_height: float) -&gt; None:\n        \"\"\"set field height\n        Args:\n            field_height ( float): field_height\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_field_of_view(self) -&gt; float:\n        \"\"\"get field of view\n        Args:\n\n        Returns:\n            float\n        \"\"\"\n\n    def set_field_of_view(self, field_of_view: float) -&gt; None:\n        \"\"\"set field of view\n        Args:\n            field_of_view ( float): field_of_view\n\n        Returns:\n            None\n        \"\"\"\n</code></pre>"},{"location":"documentation/camera_data/#cadwork.camera_data.camera_data.get_field_height","title":"<code>get_field_height(self)</code>","text":"<p>get field height</p> <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>cadwork\\camera_data.py</code> <pre><code>def get_field_height(self) -&gt; float:\n    \"\"\"get field height\n    Args:\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/camera_data/#cadwork.camera_data.camera_data.get_field_of_view","title":"<code>get_field_of_view(self)</code>","text":"<p>get field of view</p> <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>cadwork\\camera_data.py</code> <pre><code>def get_field_of_view(self) -&gt; float:\n    \"\"\"get field of view\n    Args:\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/camera_data/#cadwork.camera_data.camera_data.get_field_width","title":"<code>get_field_width(self)</code>","text":"<p>get field width</p> <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>cadwork\\camera_data.py</code> <pre><code>def get_field_width(self) -&gt; float:\n    \"\"\"get field width\n    Args:\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/camera_data/#cadwork.camera_data.camera_data.get_position","title":"<code>get_position(self)</code>","text":"<p>get position</p> <p>Returns:</p> Type Description <code>&lt;module 'cadwork.point_3d' from 'D:\\\\source\\\\mtldev\\\\cwapi3dpython\\\\src\\\\cadwork\\\\point_3d.py'&gt;</code> <p>point_3d</p> Source code in <code>cadwork\\camera_data.py</code> <pre><code>def get_position(self) -&gt; point_3d:\n    \"\"\"get position\n    Args:\n\n    Returns:\n        point_3d\n    \"\"\"\n</code></pre>"},{"location":"documentation/camera_data/#cadwork.camera_data.camera_data.get_projection_type","title":"<code>get_projection_type(self)</code>","text":"<p>get projection type</p> <p>Returns:</p> Type Description <code>&lt;module 'cadwork.projection_type' from 'D:\\\\source\\\\mtldev\\\\cwapi3dpython\\\\src\\\\cadwork\\\\projection_type.py'&gt;</code> <p>projection_type</p> Source code in <code>cadwork\\camera_data.py</code> <pre><code>def get_projection_type(self) -&gt; projection_type:\n    \"\"\"get projection type\n    Args:\n\n    Returns:\n        projection_type\n    \"\"\"\n</code></pre>"},{"location":"documentation/camera_data/#cadwork.camera_data.camera_data.get_target","title":"<code>get_target(self)</code>","text":"<p>get target</p> <p>Returns:</p> Type Description <code>&lt;module 'cadwork.point_3d' from 'D:\\\\source\\\\mtldev\\\\cwapi3dpython\\\\src\\\\cadwork\\\\point_3d.py'&gt;</code> <p>point_3d</p> Source code in <code>cadwork\\camera_data.py</code> <pre><code>def get_target(self) -&gt; point_3d:\n    \"\"\"get target\n    Args:\n\n    Returns:\n        point_3d\n    \"\"\"\n</code></pre>"},{"location":"documentation/camera_data/#cadwork.camera_data.camera_data.get_up_vector","title":"<code>get_up_vector(self)</code>","text":"<p>get up vector</p> <p>Returns:</p> Type Description <code>&lt;module 'cadwork.point_3d' from 'D:\\\\source\\\\mtldev\\\\cwapi3dpython\\\\src\\\\cadwork\\\\point_3d.py'&gt;</code> <p>point_3d</p> Source code in <code>cadwork\\camera_data.py</code> <pre><code>def get_up_vector(self) -&gt; point_3d:\n    \"\"\"get up vector\n    Args:\n\n    Returns:\n        point_3d\n    \"\"\"\n</code></pre>"},{"location":"documentation/camera_data/#cadwork.camera_data.camera_data.set_field_height","title":"<code>set_field_height(self, field_height)</code>","text":"<p>set field height</p> <p>Parameters:</p> Name Type Description Default <code>field_height</code> <code> float</code> <p>field_height</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\camera_data.py</code> <pre><code>def set_field_height(self, field_height: float) -&gt; None:\n    \"\"\"set field height\n    Args:\n        field_height ( float): field_height\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/camera_data/#cadwork.camera_data.camera_data.set_field_of_view","title":"<code>set_field_of_view(self, field_of_view)</code>","text":"<p>set field of view</p> <p>Parameters:</p> Name Type Description Default <code>field_of_view</code> <code> float</code> <p>field_of_view</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\camera_data.py</code> <pre><code>def set_field_of_view(self, field_of_view: float) -&gt; None:\n    \"\"\"set field of view\n    Args:\n        field_of_view ( float): field_of_view\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/camera_data/#cadwork.camera_data.camera_data.set_field_width","title":"<code>set_field_width(self, field_width)</code>","text":"<p>set field width</p> <p>Parameters:</p> Name Type Description Default <code>field_width</code> <code> float</code> <p>field_width</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\camera_data.py</code> <pre><code>def set_field_width(self, field_width: float) -&gt; None:\n    \"\"\"set field width\n    Args:\n        field_width ( float): field_width\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/camera_data/#cadwork.camera_data.camera_data.set_position","title":"<code>set_position(self, position)</code>","text":"<p>set position</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code> point_3d</code> <p>position</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\camera_data.py</code> <pre><code>def set_position(self, position: point_3d) -&gt; None:\n    \"\"\"set position\n    Args:\n        position ( point_3d): position\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/camera_data/#cadwork.camera_data.camera_data.set_projection_type","title":"<code>set_projection_type(self, projection_type)</code>","text":"<p>set projection type</p> <p>Parameters:</p> Name Type Description Default <code>projection_type</code> <code> projection_type</code> <p>projection_type</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\camera_data.py</code> <pre><code>def set_projection_type(self, projection_type: projection_type) -&gt; None:\n    \"\"\"set projection type\n    Args:\n        projection_type ( projection_type): projection_type\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/camera_data/#cadwork.camera_data.camera_data.set_target","title":"<code>set_target(self, target)</code>","text":"<p>set target</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code> point_3d</code> <p>target</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\camera_data.py</code> <pre><code>def set_target(self, target: point_3d) -&gt; None:\n    \"\"\"set target\n    Args:\n        target ( point_3d): target\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/camera_data/#cadwork.camera_data.camera_data.set_up_vector","title":"<code>set_up_vector(self, up_vector)</code>","text":"<p>set up vector</p> <p>Parameters:</p> Name Type Description Default <code>up_vector</code> <code> point_3d</code> <p>up_vector</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\camera_data.py</code> <pre><code>def set_up_vector(self, up_vector: point_3d) -&gt; None:\n    \"\"\"set up vector\n    Args:\n        up_vector ( point_3d): up_vector\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/camera_data/#cadwork.projection_type","title":"<code>cadwork.projection_type</code>","text":""},{"location":"documentation/camera_data/#cadwork.projection_type.projection_type","title":"<code> projection_type            (IntEnum)         </code>","text":"<p>projection type</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cadwork.projection_type.Perspective\nPerspective\n</code></pre> Source code in <code>cadwork\\projection_type.py</code> <pre><code>@unique\nclass projection_type(IntEnum):\n    \"\"\"projection type\n\n    Examples:\n        &gt;&gt;&gt; cadwork.projection_type.Perspective\n        Perspective\n\n    Args:\n        Perspective = 1\n        Orthographic = 2\n\n    \"\"\"\n    Perspective = 1\n    Orthographic = 2\n\n    def __int__(self) -&gt; int:\n        return self.value\n</code></pre>"},{"location":"documentation/connector_axis_controller/","title":"Connector Axis Controller","text":""},{"location":"documentation/connector_axis_controller/#connector_axis_controller","title":"<code>connector_axis_controller</code>  <code>special</code>","text":""},{"location":"documentation/connector_axis_controller/#connector_axis_controller.check_axis","title":"<code>check_axis(axis_id)</code>","text":"<p>Returns if the axis is valid. </p> <p>Parameters:</p> Name Type Description Default <code>axis_id</code> <code> int</code> <p>axis_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def check_axis(axis_id: int) -&gt; bool:\n    \"\"\"Returns if the axis is valid. \n    Args:\n        axis_id ( int): axis_id\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.clear_errors","title":"<code>clear_errors()</code>","text":"<p>clear errors</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def clear_errors() -&gt; None:\n    \"\"\"clear errors\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.create_blank_connector","title":"<code>create_blank_connector(a0, a1, a2)</code>","text":"<p>create blank connector</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> float</code> <p>a0</p> required <code>a1</code> <code> point_3d</code> <p>a1</p> required <code>a2</code> <code> point_3d</code> <p>a2</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def create_blank_connector(a0: float, a1: point_3d, a2: point_3d) -&gt; int:\n    \"\"\"create blank connector\n    Args:\n        a0 ( float): a0\n        a1 ( point_3d): a1\n        a2 ( point_3d): a2\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.create_standard_connector","title":"<code>create_standard_connector(axis_name, point1, point2)</code>","text":"<p>Creates a standard connector axis between two points. </p> <p>Parameters:</p> Name Type Description Default <code>axis_name</code> <code> str</code> <p>axis_name</p> required <code>point1</code> <code> point_3d</code> <p>point1</p> required <code>point2</code> <code> point_3d</code> <p>point2</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def create_standard_connector(axis_name: str, point1: point_3d, point2: point_3d) -&gt; int:\n    \"\"\"Creates a standard connector axis between two points. \n    Args:\n        axis_name ( str): axis_name\n        point1 ( point_3d): point1\n        point2 ( point_3d): point2\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.get_axis_item_material","title":"<code>get_axis_item_material(guid)</code>","text":"<p>Returns the material of an axis item. </p> <p>Parameters:</p> Name Type Description Default <code>guid</code> <code> str</code> <p>guid</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def get_axis_item_material(guid: str) -&gt; str:\n    \"\"\"Returns the material of an axis item. \n    Args:\n        guid ( str): guid\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.get_axis_item_name","title":"<code>get_axis_item_name(guid)</code>","text":"<p>Returns the name of an axis item. </p> <p>Parameters:</p> Name Type Description Default <code>guid</code> <code> str</code> <p>guid</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def get_axis_item_name(guid: str) -&gt; str:\n    \"\"\"Returns the name of an axis item. \n    Args:\n        guid ( str): guid\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.get_axis_item_norm","title":"<code>get_axis_item_norm(guid)</code>","text":"<p>Returns the norm of an axis item. </p> <p>Parameters:</p> Name Type Description Default <code>guid</code> <code> str</code> <p>guid</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def get_axis_item_norm(guid: str) -&gt; str:\n    \"\"\"Returns the norm of an axis item. \n    Args:\n        guid ( str): guid\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.get_axis_item_order_number","title":"<code>get_axis_item_order_number(guid)</code>","text":"<p>Returns the strength category of an axis item. </p> <p>Parameters:</p> Name Type Description Default <code>guid</code> <code> str</code> <p>guid</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def get_axis_item_order_number(guid: str) -&gt; str:\n    \"\"\"Returns the strength category of an axis item. \n    Args:\n        guid ( str): guid\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.get_axis_item_strength_category","title":"<code>get_axis_item_strength_category(guid)</code>","text":"<p>Returns the strength category of an axis item. </p> <p>Parameters:</p> Name Type Description Default <code>guid</code> <code> str</code> <p>guid</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def get_axis_item_strength_category(guid: str) -&gt; str:\n    \"\"\"Returns the strength category of an axis item. \n    Args:\n        guid ( str): guid\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.get_axis_item_user_field","title":"<code>get_axis_item_user_field(guid, user_item_nr)</code>","text":"<p>Returns an userfield value of an axis item. </p> <p>Parameters:</p> Name Type Description Default <code>guid</code> <code> str</code> <p>guid</p> required <code>user_item_nr</code> <code> int</code> <p>user_item_nr</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def get_axis_item_user_field(guid: str, user_item_nr: int) -&gt; str:\n    \"\"\"Returns an userfield value of an axis item. \n    Args:\n        guid ( str): guid\n        user_item_nr ( int): user_item_nr\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.get_axis_items_guids","title":"<code>get_axis_items_guids(axis_id)</code>","text":"<p>Returns a list of GUIDs of all axis items. </p> <p>Parameters:</p> Name Type Description Default <code>axis_id</code> <code> int</code> <p>axis_id</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def get_axis_items_guids(axis_id: int) -&gt; List[str]:\n    \"\"\"Returns a list of GUIDs of all axis items. \n    Args:\n        axis_id ( int): axis_id\n\n    Returns:\n        List[str]\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.get_bolt_diameter","title":"<code>get_bolt_diameter(a0)</code>","text":"<p>get bolt diameter</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def get_bolt_diameter(a0: int) -&gt; float:\n    \"\"\"get bolt diameter\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.get_bolt_item_guid","title":"<code>get_bolt_item_guid(axis_id)</code>","text":"<p>Gets the Guid of the Bolt Item </p> <p>Parameters:</p> Name Type Description Default <code>axis_id</code> <code> int</code> <p>axis_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def get_bolt_item_guid(axis_id: int) -&gt; str:\n    \"\"\"Gets the Guid of the Bolt Item \n    Args:\n        axis_id ( int): axis_id\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.get_bolt_length","title":"<code>get_bolt_length(axis_id)</code>","text":"<p>Gets the Bolt Length </p> <p>Parameters:</p> Name Type Description Default <code>axis_id</code> <code> int</code> <p>axis_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def get_bolt_length(axis_id: int) -&gt; float:\n    \"\"\"Gets the Bolt Length \n    Args:\n        axis_id ( int): axis_id\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.get_bolt_length_automatic","title":"<code>get_bolt_length_automatic(axis_id)</code>","text":"<p>Returns if Bolt Length Automatic is set </p> <p>Parameters:</p> Name Type Description Default <code>axis_id</code> <code> int</code> <p>axis_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def get_bolt_length_automatic(axis_id: int) -&gt; bool:\n    \"\"\"Returns if Bolt Length Automatic is set \n    Args:\n        axis_id ( int): axis_id\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.get_bolt_order_number","title":"<code>get_bolt_order_number(axis_id)</code>","text":"<p>Returns the ordernumber of a bolt item. </p> <p>Parameters:</p> Name Type Description Default <code>axis_id</code> <code> int</code> <p>axis_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def get_bolt_order_number(axis_id: int) -&gt; str:\n    \"\"\"Returns the ordernumber of a bolt item. \n    Args:\n        axis_id ( int): axis_id\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.get_bolt_over_length","title":"<code>get_bolt_over_length(axis_id)</code>","text":"<p>Gets the Bolt OverLength </p> <p>Parameters:</p> Name Type Description Default <code>axis_id</code> <code> int</code> <p>axis_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def get_bolt_over_length(axis_id: int) -&gt; float:\n    \"\"\"Gets the Bolt OverLength \n    Args:\n        axis_id ( int): axis_id\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.get_item_guid_by_name","title":"<code>get_item_guid_by_name(name, item_type)</code>","text":"<p>get item guid by name</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code> str</code> <p>name</p> required <code>item_type</code> <code> int</code> <p>item_type</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def get_item_guid_by_name(name: str, item_type: int) -&gt; str:\n    \"\"\"get item guid by name\n    Args:\n        name ( str): name\n        item_type ( int): item_type\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.get_last_error","title":"<code>get_last_error(error_code)</code>","text":"<p>get last error</p> <p>Parameters:</p> Name Type Description Default <code>error_code</code> <code> int</code> <p>error_code</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def get_last_error(error_code: int) -&gt; str:\n    \"\"\"get last error\n    Args:\n        error_code ( int): error_code\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.get_section_contact_element","title":"<code>get_section_contact_element(a0, a1)</code>","text":"<p>get section contact element</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> float</code> <p>a0</p> required <code>a1</code> <code> int</code> <p>a1</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def get_section_contact_element(a0: float, a1: int) -&gt; int:\n    \"\"\"get section contact element\n    Args:\n        a0 ( float): a0\n        a1 ( int): a1\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.get_section_count","title":"<code>get_section_count(axis_id)</code>","text":"<p>Returns the number of sections. </p> <p>Parameters:</p> Name Type Description Default <code>axis_id</code> <code> int</code> <p>axis_id</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def get_section_count(axis_id: int) -&gt; int:\n    \"\"\"Returns the number of sections. \n    Args:\n        axis_id ( int): axis_id\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.get_section_diameter","title":"<code>get_section_diameter(axis_id, section_nr)</code>","text":"<p>Gets the Drilling Diameter of a specific Sections </p> <p>Parameters:</p> Name Type Description Default <code>axis_id</code> <code> int</code> <p>axis_id</p> required <code>section_nr</code> <code> int</code> <p>section_nr</p> required <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def get_section_diameter(axis_id: int, section_nr: int) -&gt; float:\n    \"\"\"Gets the Drilling Diameter of a specific Sections \n    Args:\n        axis_id ( int): axis_id\n        section_nr ( int): section_nr\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.get_section_material_name","title":"<code>get_section_material_name(axis_id, section_nr)</code>","text":"<p>Returns material of a section contact element. </p> <p>Parameters:</p> Name Type Description Default <code>axis_id</code> <code> int</code> <p>axis_id</p> required <code>section_nr</code> <code> int</code> <p>section_nr</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def get_section_material_name(axis_id: int, section_nr: int) -&gt; str:\n    \"\"\"Returns material of a section contact element. \n    Args:\n        axis_id ( int): axis_id\n        section_nr ( int): section_nr\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.get_standard_connector_list","title":"<code>get_standard_connector_list()</code>","text":"<p>Returns a list of all standard connectors. </p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def get_standard_connector_list() -&gt; List[str]:\n    \"\"\"Returns a list of all standard connectors. \n    Args:\n\n    Returns:\n        List[str]\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.import_from_file","title":"<code>import_from_file(a0)</code>","text":"<p>import from file</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> str</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def import_from_file(a0: str) -&gt; None:\n    \"\"\"import from file\n    Args:\n        a0 ( str): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.set_bolt_item","title":"<code>set_bolt_item(axis_id, item_guid)</code>","text":"<p>Sets the Bolt Item </p> <p>Parameters:</p> Name Type Description Default <code>axis_id</code> <code> int</code> <p>axis_id</p> required <code>item_guid</code> <code> str</code> <p>item_guid</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def set_bolt_item(axis_id: int, item_guid: str) -&gt; None:\n    \"\"\"Sets the Bolt Item \n    Args:\n        axis_id ( int): axis_id\n        item_guid ( str): item_guid\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.set_bolt_length","title":"<code>set_bolt_length(axis_id, length)</code>","text":"<p>Sets the Bolt Length </p> <p>Parameters:</p> Name Type Description Default <code>axis_id</code> <code> int</code> <p>axis_id</p> required <code>length</code> <code> float</code> <p>length</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def set_bolt_length(axis_id: int, length: float) -&gt; None:\n    \"\"\"Sets the Bolt Length \n    Args:\n        axis_id ( int): axis_id\n        length ( float): length\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.set_bolt_length_automatic","title":"<code>set_bolt_length_automatic(axis_id, length_automatic)</code>","text":"<p>Sets the Bolt Length Automatic </p> <p>Parameters:</p> Name Type Description Default <code>axis_id</code> <code> int</code> <p>axis_id</p> required <code>length_automatic</code> <code> bool</code> <p>length_automatic</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def set_bolt_length_automatic(axis_id: int, length_automatic: bool) -&gt; None:\n    \"\"\"Sets the Bolt Length Automatic \n    Args:\n        axis_id ( int): axis_id\n        length_automatic ( bool): length_automatic\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.set_bolt_over_length","title":"<code>set_bolt_over_length(axis_id, over_length)</code>","text":"<p>Sets the Bolt OverLength </p> <p>Parameters:</p> Name Type Description Default <code>axis_id</code> <code> int</code> <p>axis_id</p> required <code>over_length</code> <code> float</code> <p>over_length</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def set_bolt_over_length(axis_id: int, over_length: float) -&gt; None:\n    \"\"\"Sets the Bolt OverLength \n    Args:\n        axis_id ( int): axis_id\n        over_length ( float): over_length\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.set_diameter","title":"<code>set_diameter(axis_id, diameter)</code>","text":"<p>Sets the Drilling Diameter for all Sections </p> <p>Parameters:</p> Name Type Description Default <code>axis_id</code> <code> int</code> <p>axis_id</p> required <code>diameter</code> <code> float</code> <p>diameter</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def set_diameter(axis_id: int, diameter: float) -&gt; None:\n    \"\"\"Sets the Drilling Diameter for all Sections \n    Args:\n        axis_id ( int): axis_id\n        diameter ( float): diameter\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.set_section_diameter","title":"<code>set_section_diameter(axis_id, section_nr, diameter)</code>","text":"<p>Sets the Drilling Diameter for a specific Sections </p> <p>Parameters:</p> Name Type Description Default <code>axis_id</code> <code> int</code> <p>axis_id</p> required <code>section_nr</code> <code> int</code> <p>section_nr</p> required <code>diameter</code> <code> float</code> <p>diameter</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def set_section_diameter(axis_id: int, section_nr: int, diameter: float) -&gt; None:\n    \"\"\"Sets the Drilling Diameter for a specific Sections \n    Args:\n        axis_id ( int): axis_id\n        section_nr ( int): section_nr\n        diameter ( float): diameter\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.start_configuration_dialog","title":"<code>start_configuration_dialog()</code>","text":"<p>Starts the ConnectorAxis configuration dialog. </p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def start_configuration_dialog() -&gt; None:\n    \"\"\"Starts the ConnectorAxis configuration dialog. \n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/connector_axis_controller/#connector_axis_controller.update_axis_cutting_ability","title":"<code>update_axis_cutting_ability(axis_i_ds)</code>","text":"<p>updates the Connection Config (CuttingAbility) of Axis/VBAs </p> <p>Parameters:</p> Name Type Description Default <code>axis_i_ds</code> <code> List[int]</code> <p>axis_i_ds</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>connector_axis_controller\\__init__.py</code> <pre><code>def update_axis_cutting_ability(axis_i_ds: List[int]) -&gt; None:\n    \"\"\"updates the Connection Config (CuttingAbility) of Axis/VBAs \n    Args:\n        axis_i_ds ( List[int]): axis_i_ds\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/dimension_controller/","title":"Dimension Controller","text":"<p>rendering: show_root_heading: false show_source: true</p>"},{"location":"documentation/dimension_controller/#dimension_controller","title":"<code>dimension_controller</code>  <code>special</code>","text":""},{"location":"documentation/dimension_controller/#dimension_controller.add_segment","title":"<code>add_segment(element, segment)</code>","text":"<p>add segment</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code> int</code> <p>element</p> required <code>segment</code> <code> point_3d</code> <p>segment</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>dimension_controller\\__init__.py</code> <pre><code>def add_segment(element: int, segment: point_3d) -&gt; None:\n    \"\"\"add segment\n    Args:\n        element ( int): element\n        segment ( point_3d): segment\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/dimension_controller/#dimension_controller.create_dimension","title":"<code>create_dimension(xl, plane_normal, distance, dimension_points)</code>","text":"<p>create dimension</p> <p>Parameters:</p> Name Type Description Default <code>xl</code> <code> point_3d</code> <p>xl</p> required <code>plane_normal</code> <code> point_3d</code> <p>plane_normal</p> required <code>distance</code> <code> point_3d</code> <p>distance</p> required <code>dimension_points</code> <code> List[point_3d]</code> <p>dimension_points</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>dimension_controller\\__init__.py</code> <pre><code>def create_dimension(xl: point_3d, plane_normal: point_3d, distance: point_3d, dimension_points: List[point_3d]) -&gt; int:\n    \"\"\"create dimension\n    Args:\n        xl ( point_3d): xl\n        plane_normal ( point_3d): plane_normal\n        distance ( point_3d): distance\n        dimension_points ( List[point_3d]): dimension_points\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/dimension_controller/#dimension_controller.set_default_anchor_length","title":"<code>set_default_anchor_length(elements, length)</code>","text":"<p>set default anchor length</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>length</code> <code> float</code> <p>length</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>dimension_controller\\__init__.py</code> <pre><code>def set_default_anchor_length(elements: List[int], length: float) -&gt; None:\n    \"\"\"set default anchor length\n    Args:\n        elements ( List[int]): elements\n        length ( float): length\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/dimension_controller/#dimension_controller.set_line_color","title":"<code>set_line_color(elements, color_id)</code>","text":"<p>set line color</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>color_id</code> <code> int</code> <p>color_id</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>dimension_controller\\__init__.py</code> <pre><code>def set_line_color(elements: List[int], color_id: int) -&gt; None:\n    \"\"\"set line color\n    Args:\n        elements ( List[int]): elements\n        color_id ( int): color_id\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/dimension_controller/#dimension_controller.set_line_thickness","title":"<code>set_line_thickness(elements, thickness)</code>","text":"<p>set line thickness</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>thickness</code> <code> float</code> <p>thickness</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>dimension_controller\\__init__.py</code> <pre><code>def set_line_thickness(elements: List[int], thickness: float) -&gt; None:\n    \"\"\"set line thickness\n    Args:\n        elements ( List[int]): elements\n        thickness ( float): thickness\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/dimension_controller/#dimension_controller.set_orientation","title":"<code>set_orientation(elements, view_dir, view_dir_up)</code>","text":"<p>set orientation</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>view_dir</code> <code> point_3d</code> <p>view_dir</p> required <code>view_dir_up</code> <code> point_3d</code> <p>view_dir_up</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>dimension_controller\\__init__.py</code> <pre><code>def set_orientation(elements: List[int], view_dir: point_3d, view_dir_up: point_3d) -&gt; None:\n    \"\"\"set orientation\n    Args:\n        elements ( List[int]): elements\n        view_dir ( point_3d): view_dir\n        view_dir_up ( point_3d): view_dir_up\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/dimension_controller/#dimension_controller.set_precision","title":"<code>set_precision(elements, precision)</code>","text":"<p>set precision</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>precision</code> <code> int</code> <p>precision</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>dimension_controller\\__init__.py</code> <pre><code>def set_precision(elements: List[int], precision: int) -&gt; None:\n    \"\"\"set precision\n    Args:\n        elements ( List[int]): elements\n        precision ( int): precision\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/dimension_controller/#dimension_controller.set_text_color","title":"<code>set_text_color(elements, color_id)</code>","text":"<p>set text color</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>color_id</code> <code> int</code> <p>color_id</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>dimension_controller\\__init__.py</code> <pre><code>def set_text_color(elements: List[int], color_id: int) -&gt; None:\n    \"\"\"set text color\n    Args:\n        elements ( List[int]): elements\n        color_id ( int): color_id\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/dimension_controller/#dimension_controller.set_text_size","title":"<code>set_text_size(elements, text_size)</code>","text":"<p>set text size</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>text_size</code> <code> float</code> <p>text_size</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>dimension_controller\\__init__.py</code> <pre><code>def set_text_size(elements: List[int], text_size: float) -&gt; None:\n    \"\"\"set text size\n    Args:\n        elements ( List[int]): elements\n        text_size ( float): text_size\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/dimension_controller/#dimension_controller.set_total_dimension","title":"<code>set_total_dimension(elements, total)</code>","text":"<p>set total dimension</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>total</code> <code> bool</code> <p>total</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>dimension_controller\\__init__.py</code> <pre><code>def set_total_dimension(elements: List[int], total: bool) -&gt; None:\n    \"\"\"set total dimension\n    Args:\n        elements ( List[int]): elements\n        total ( bool): total\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/","title":"Element Controller","text":""},{"location":"documentation/element_controller/#element_controller","title":"<code>element_controller</code>  <code>special</code>","text":""},{"location":"documentation/element_controller/#element_controller.activate_parts_without_situation","title":"<code>activate_parts_without_situation()</code>","text":"<p>activate parts without situation</p> <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def activate_parts_without_situation() -&gt; List[int]:\n    \"\"\"activate parts without situation\n    Args:\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.activate_rv_without_situation","title":"<code>activate_rv_without_situation()</code>","text":"<p>activate rv without situation</p> <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def activate_rv_without_situation() -&gt; List[int]:\n    \"\"\"activate rv without situation\n    Args:\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.add_created_elements_to_undo","title":"<code>add_created_elements_to_undo(elements)</code>","text":"<p>add created elements to undo</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def add_created_elements_to_undo(elements: List[int]) -&gt; None:\n    \"\"\"add created elements to undo\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.add_element_to_detail","title":"<code>add_element_to_detail(a0, a1)</code>","text":"<p>add element to detail</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <code>a1</code> <code> int</code> <p>a1</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def add_element_to_detail(a0: List[int], a1: int) -&gt; None:\n    \"\"\"add element to detail\n    Args:\n        a0 ( List[int]): a0\n        a1 ( int): a1\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.add_elements_to_detail","title":"<code>add_elements_to_detail(a0, a1)</code>","text":"<p>add elements to detail</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <code>a1</code> <code> int</code> <p>a1</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def add_elements_to_detail(a0: List[int], a1: int) -&gt; None:\n    \"\"\"add elements to detail\n    Args:\n        a0 ( List[int]): a0\n        a1 ( int): a1\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.add_elements_to_undo","title":"<code>add_elements_to_undo(elements, cmd)</code>","text":"<p>add elements to undo</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>cmd</code> <code> int</code> <p>cmd</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def add_elements_to_undo(elements: List[int], cmd: int) -&gt; None:\n    \"\"\"add elements to undo\n    Args:\n        elements ( List[int]): elements\n        cmd ( int): cmd\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.add_modified_elements_to_undo","title":"<code>add_modified_elements_to_undo(elements)</code>","text":"<p>add modified elements to undo</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def add_modified_elements_to_undo(elements: List[int]) -&gt; None:\n    \"\"\"add modified elements to undo\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.apply_transformation_coordinate","title":"<code>apply_transformation_coordinate(elements, old_point, old_xl, old_yl, new_point, new_xl, new_yl)</code>","text":"<p>apply transformation coordinate</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>old_point</code> <code> point_3d</code> <p>old_point</p> required <code>old_xl</code> <code> point_3d</code> <p>old_xl</p> required <code>old_yl</code> <code> point_3d</code> <p>old_yl</p> required <code>new_point</code> <code> point_3d</code> <p>new_point</p> required <code>new_xl</code> <code> point_3d</code> <p>new_xl</p> required <code>new_yl</code> <code> point_3d</code> <p>new_yl</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def apply_transformation_coordinate(elements: List[int], old_point: point_3d, old_xl: point_3d, old_yl: point_3d, new_point: point_3d, new_xl: point_3d, new_yl: point_3d) -&gt; None:\n    \"\"\"apply transformation coordinate\n    Args:\n        elements ( List[int]): elements\n        old_point ( point_3d): old_point\n        old_xl ( point_3d): old_xl\n        old_yl ( point_3d): old_yl\n        new_point ( point_3d): new_point\n        new_xl ( point_3d): new_xl\n        new_yl ( point_3d): new_yl\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.auto_set_parts_situation","title":"<code>auto_set_parts_situation(a0)</code>","text":"<p>auto set parts situation</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def auto_set_parts_situation(a0: List[int]) -&gt; None:\n    \"\"\"auto set parts situation\n    Args:\n        a0 ( List[int]): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.auto_set_rough_volume_situation","title":"<code>auto_set_rough_volume_situation(a0)</code>","text":"<p>auto set rough volume situation</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def auto_set_rough_volume_situation(a0: List[int]) -&gt; None:\n    \"\"\"auto set rough volume situation\n    Args:\n        a0 ( List[int]): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.chamfer_edge","title":"<code>chamfer_edge(a0, a1, a2, a3)</code>","text":"<p>chamfer edge</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <code>a1</code> <code> point_3d</code> <p>a1</p> required <code>a2</code> <code> point_3d</code> <p>a2</p> required <code>a3</code> <code> float</code> <p>a3</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def chamfer_edge(a0: int, a1: point_3d, a2: point_3d, a3: float) -&gt; None:\n    \"\"\"chamfer edge\n    Args:\n        a0 ( int): a0\n        a1 ( point_3d): a1\n        a2 ( point_3d): a2\n        a3 ( float): a3\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.check_element_duplicates","title":"<code>check_element_duplicates(elements)</code>","text":"<p>check element duplicates</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def check_element_duplicates(elements: List[int]) -&gt; List[int]:\n    \"\"\"check element duplicates\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.check_element_id","title":"<code>check_element_id(element_id)</code>","text":"<p>check element id</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def check_element_id(element_id: int) -&gt; bool:\n    \"\"\"check element id\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.check_if_elements_are_in_collision","title":"<code>check_if_elements_are_in_collision(first_element_id, second_element_id)</code>","text":"<p>check if elements are in collision</p> <p>Parameters:</p> Name Type Description Default <code>first_element_id</code> <code> int</code> <p>first_element_id</p> required <code>second_element_id</code> <code> int</code> <p>second_element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def check_if_elements_are_in_collision(first_element_id: int, second_element_id: int) -&gt; bool:\n    \"\"\"check if elements are in collision\n    Args:\n        first_element_id ( int): first_element_id\n        second_element_id ( int): second_element_id\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.check_if_elements_are_in_contact","title":"<code>check_if_elements_are_in_contact(first_element_id, second_element_id)</code>","text":"<p>check if elements are in contact</p> <p>Parameters:</p> Name Type Description Default <code>first_element_id</code> <code> int</code> <p>first_element_id</p> required <code>second_element_id</code> <code> int</code> <p>second_element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def check_if_elements_are_in_contact(first_element_id: int, second_element_id: int) -&gt; bool:\n    \"\"\"check if elements are in contact\n    Args:\n        first_element_id ( int): first_element_id\n        second_element_id ( int): second_element_id\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.check_if_point_is_in_element","title":"<code>check_if_point_is_in_element(point, element_id)</code>","text":"<p>check if point is in element</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code> point_3d</code> <p>point</p> required <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def check_if_point_is_in_element(point: point_3d, element_id: int) -&gt; bool:\n    \"\"\"check if point is in element\n    Args:\n        point ( point_3d): point\n        element_id ( int): element_id\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.check_if_point_is_on_element","title":"<code>check_if_point_is_on_element(point, element_id)</code>","text":"<p>check if point is on element</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code> point_3d</code> <p>point</p> required <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def check_if_point_is_on_element(point: point_3d, element_id: int) -&gt; bool:\n    \"\"\"check if point is on element\n    Args:\n        point ( point_3d): point\n        element_id ( int): element_id\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.clear_errors","title":"<code>clear_errors()</code>","text":"<p>clear errors</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def clear_errors() -&gt; None:\n    \"\"\"clear errors\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.convert_auxiliary_to_beam","title":"<code>convert_auxiliary_to_beam(a0)</code>","text":"<p>convert auxiliary to beam</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def convert_auxiliary_to_beam(a0: List[int]) -&gt; None:\n    \"\"\"convert auxiliary to beam\n    Args:\n        a0 ( List[int]): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.convert_auxiliary_to_panel","title":"<code>convert_auxiliary_to_panel(a0)</code>","text":"<p>convert auxiliary to panel</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def convert_auxiliary_to_panel(a0: List[int]) -&gt; None:\n    \"\"\"convert auxiliary to panel\n    Args:\n        a0 ( List[int]): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.convert_beam_to_panel","title":"<code>convert_beam_to_panel(element_id_list)</code>","text":"<p>convert beam to panel</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def convert_beam_to_panel(element_id_list: List[int]) -&gt; None:\n    \"\"\"convert beam to panel\n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.convert_bolt_to_standardconnector","title":"<code>convert_bolt_to_standardconnector(elements, standard_element_name)</code>","text":"<p>convert bolt to standardconnector</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>standard_element_name</code> <code> str</code> <p>standard_element_name</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def convert_bolt_to_standardconnector(elements: List[int], standard_element_name: str) -&gt; None:\n    \"\"\"convert bolt to standardconnector\n    Args:\n        elements ( List[int]): elements\n        standard_element_name ( str): standard_element_name\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.convert_circular_beam_to_drilling","title":"<code>convert_circular_beam_to_drilling(elements)</code>","text":"<p>converts circular/round beams into drillings </p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def convert_circular_beam_to_drilling(elements: List[int]) -&gt; None:\n    \"\"\"converts circular/round beams into drillings \n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.convert_container_to_container_block","title":"<code>convert_container_to_container_block(elements)</code>","text":"<p>convert container to container block</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def convert_container_to_container_block(elements: List[int]) -&gt; None:\n    \"\"\"convert container to container block\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.convert_drilling_to_circular_beam","title":"<code>convert_drilling_to_circular_beam(elements)</code>","text":"<p>convert drilling to circular beam</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def convert_drilling_to_circular_beam(elements: List[int]) -&gt; None:\n    \"\"\"convert drilling to circular beam\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.convert_elements_to_auxiliary_elements","title":"<code>convert_elements_to_auxiliary_elements(a0)</code>","text":"<p>convert elements to auxiliary elements</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def convert_elements_to_auxiliary_elements(a0: List[int]) -&gt; None:\n    \"\"\"convert elements to auxiliary elements\n    Args:\n        a0 ( List[int]): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.convert_lines_to_surfaces","title":"<code>convert_lines_to_surfaces(elements)</code>","text":"<p>convert lines to surfaces</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def convert_lines_to_surfaces(elements: List[int]) -&gt; List[int]:\n    \"\"\"convert lines to surfaces\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.convert_panel_to_beam","title":"<code>convert_panel_to_beam(element_id_list)</code>","text":"<p>convert panel to beam</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def convert_panel_to_beam(element_id_list: List[int]) -&gt; None:\n    \"\"\"convert panel to beam\n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.convert_surfaces_to_volume","title":"<code>convert_surfaces_to_volume(elements)</code>","text":"<p>convert surfaces to volume</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def convert_surfaces_to_volume(elements: List[int]) -&gt; int:\n    \"\"\"convert surfaces to volume\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.copy_elements","title":"<code>copy_elements(element_id_list, copy_vector)</code>","text":"<p>copy elements</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>copy_vector</code> <code> point_3d</code> <p>copy_vector</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def copy_elements(element_id_list: List[int], copy_vector: point_3d) -&gt; List[int]:\n    \"\"\"copy elements\n    Args:\n        element_id_list ( List[int]): element_id_list\n        copy_vector ( point_3d): copy_vector\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_auto_container_from_standard","title":"<code>create_auto_container_from_standard(elements, output_name, standard_element_name)</code>","text":"<p>create auto container from standard</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>output_name</code> <code> str</code> <p>output_name</p> required <code>standard_element_name</code> <code> str</code> <p>standard_element_name</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_auto_container_from_standard(elements: List[int], output_name: str, standard_element_name: str) -&gt; int:\n    \"\"\"create auto container from standard\n    Args:\n        elements ( List[int]): elements\n        output_name ( str): output_name\n        standard_element_name ( str): standard_element_name\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_auto_container_from_standard_with_reference","title":"<code>create_auto_container_from_standard_with_reference(elements, output_name, standard_element_name, reference_id)</code>","text":"<p>create auto container from standard with reference</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>output_name</code> <code> str</code> <p>output_name</p> required <code>standard_element_name</code> <code> str</code> <p>standard_element_name</p> required <code>reference_id</code> <code> int</code> <p>reference_id</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_auto_container_from_standard_with_reference(elements: List[int], output_name: str, standard_element_name: str, reference_id: int) -&gt; int:\n    \"\"\"create auto container from standard with reference\n    Args:\n        elements ( List[int]): elements\n        output_name ( str): output_name\n        standard_element_name ( str): standard_element_name\n        reference_id ( int): reference_id\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_auto_export_solid_from_standard","title":"<code>create_auto_export_solid_from_standard(elements, output_name, standard_element_name)</code>","text":"<p>create auto export solid from standard</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>output_name</code> <code> str</code> <p>output_name</p> required <code>standard_element_name</code> <code> str</code> <p>standard_element_name</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_auto_export_solid_from_standard(elements: List[int], output_name: str, standard_element_name: str) -&gt; int:\n    \"\"\"create auto export solid from standard\n    Args:\n        elements ( List[int]): elements\n        output_name ( str): output_name\n        standard_element_name ( str): standard_element_name\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_auto_export_solid_from_standard_with_reference","title":"<code>create_auto_export_solid_from_standard_with_reference(elements, output_name, standard_element_name, reference_id)</code>","text":"<p>create auto export solid from standard with reference</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>output_name</code> <code> str</code> <p>output_name</p> required <code>standard_element_name</code> <code> str</code> <p>standard_element_name</p> required <code>reference_id</code> <code> int</code> <p>reference_id</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_auto_export_solid_from_standard_with_reference(elements: List[int], output_name: str, standard_element_name: str, reference_id: int) -&gt; int:\n    \"\"\"create auto export solid from standard with reference\n    Args:\n        elements ( List[int]): elements\n        output_name ( str): output_name\n        standard_element_name ( str): standard_element_name\n        reference_id ( int): reference_id\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_bounding_box_global","title":"<code>create_bounding_box_global(a1)</code>","text":"<p>create bounding box global</p> <p>Parameters:</p> Name Type Description Default <code>a1</code> <code> List[int]</code> <p>a1</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_bounding_box_global(a1: List[int]) -&gt; int:\n    \"\"\"create bounding box global\n    Args:\n        a1 ( List[int]): a1\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_bounding_box_local","title":"<code>create_bounding_box_local(a0, a1)</code>","text":"<p>create bounding box local</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <code>a1</code> <code> List[int]</code> <p>a1</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_bounding_box_local(a0: int, a1: List[int]) -&gt; int:\n    \"\"\"create bounding box local\n    Args:\n        a0 ( int): a0\n        a1 ( List[int]): a1\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_circular_axis_points","title":"<code>create_circular_axis_points(a0, a1, a2)</code>","text":"<p>create circular axis points</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> float</code> <p>a0</p> required <code>a1</code> <code> point_3d</code> <p>a1</p> required <code>a2</code> <code> point_3d</code> <p>a2</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_circular_axis_points(a0: float, a1: point_3d, a2: point_3d) -&gt; int:\n    \"\"\"create circular axis points\n    Args:\n        a0 ( float): a0\n        a1 ( point_3d): a1\n        a2 ( point_3d): a2\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_circular_axis_vector","title":"<code>create_circular_axis_vector(a0, a1, a2, a3)</code>","text":"<p>create circular axis vector</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> float</code> <p>a0</p> required <code>a1</code> <code> float</code> <p>a1</p> required <code>a2</code> <code> point_3d</code> <p>a2</p> required <code>a3</code> <code> point_3d</code> <p>a3</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_circular_axis_vector(a0: float, a1: float, a2: point_3d, a3: point_3d) -&gt; int:\n    \"\"\"create circular axis vector\n    Args:\n        a0 ( float): a0\n        a1 ( float): a1\n        a2 ( point_3d): a2\n        a3 ( point_3d): a3\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_circular_beam_points","title":"<code>create_circular_beam_points(diameter, p1, p2, p3)</code>","text":"<p>create circular beam points</p> <p>Parameters:</p> Name Type Description Default <code>diameter</code> <code> float</code> <p>diameter</p> required <code>p1</code> <code> point_3d</code> <p>p1</p> required <code>p2</code> <code> point_3d</code> <p>p2</p> required <code>p3</code> <code> point_3d</code> <p>p3</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_circular_beam_points(diameter: float, p1: point_3d, p2: point_3d, p3: point_3d) -&gt; int:\n    \"\"\"create circular beam points\n    Args:\n        diameter ( float): diameter\n        p1 ( point_3d): p1\n        p2 ( point_3d): p2\n        p3 ( point_3d): p3\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_circular_beam_vectors","title":"<code>create_circular_beam_vectors(diameter, length, p1, xl, zl)</code>","text":"<p>create circular beam vectors</p> <p>Parameters:</p> Name Type Description Default <code>diameter</code> <code> float</code> <p>diameter</p> required <code>length</code> <code> float</code> <p>length</p> required <code>p1</code> <code> point_3d</code> <p>p1</p> required <code>xl</code> <code> point_3d</code> <p>xl</p> required <code>zl</code> <code> point_3d</code> <p>zl</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_circular_beam_vectors(diameter: float, length: float, p1: point_3d, xl: point_3d, zl: point_3d) -&gt; int:\n    \"\"\"create circular beam vectors\n    Args:\n        diameter ( float): diameter\n        length ( float): length\n        p1 ( point_3d): p1\n        xl ( point_3d): xl\n        zl ( point_3d): zl\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_circular_mep","title":"<code>create_circular_mep(diameter, points)</code>","text":"<p>create circular mep</p> <p>Parameters:</p> Name Type Description Default <code>diameter</code> <code> float</code> <p>diameter</p> required <code>points</code> <code> List[point_3d]</code> <p>points</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_circular_mep(diameter: float, points: List[point_3d]) -&gt; int:\n    \"\"\"create circular mep\n    Args:\n        diameter ( float): diameter\n        points ( List[point_3d]): points\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_drilling_points","title":"<code>create_drilling_points(diameter, p1, p2)</code>","text":"<p>create drilling points</p> <p>Parameters:</p> Name Type Description Default <code>diameter</code> <code> float</code> <p>diameter</p> required <code>p1</code> <code> point_3d</code> <p>p1</p> required <code>p2</code> <code> point_3d</code> <p>p2</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_drilling_points(diameter: float, p1: point_3d, p2: point_3d) -&gt; int:\n    \"\"\"create drilling points\n    Args:\n        diameter ( float): diameter\n        p1 ( point_3d): p1\n        p2 ( point_3d): p2\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_drilling_vectors","title":"<code>create_drilling_vectors(diameter, length, p1, xl)</code>","text":"<p>create drilling vectors</p> <p>Parameters:</p> Name Type Description Default <code>diameter</code> <code> float</code> <p>diameter</p> required <code>length</code> <code> float</code> <p>length</p> required <code>p1</code> <code> point_3d</code> <p>p1</p> required <code>xl</code> <code> point_3d</code> <p>xl</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_drilling_vectors(diameter: float, length: float, p1: point_3d, xl: point_3d) -&gt; int:\n    \"\"\"create drilling vectors\n    Args:\n        diameter ( float): diameter\n        length ( float): length\n        p1 ( point_3d): p1\n        xl ( point_3d): xl\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_line_points","title":"<code>create_line_points(p1, p2)</code>","text":"<p>create line points</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code> point_3d</code> <p>p1</p> required <code>p2</code> <code> point_3d</code> <p>p2</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_line_points(p1: point_3d, p2: point_3d) -&gt; int:\n    \"\"\"create line points\n    Args:\n        p1 ( point_3d): p1\n        p2 ( point_3d): p2\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_line_vectors","title":"<code>create_line_vectors(length, p1, xl)</code>","text":"<p>create line vectors</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code> float</code> <p>length</p> required <code>p1</code> <code> point_3d</code> <p>p1</p> required <code>xl</code> <code> point_3d</code> <p>xl</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_line_vectors(length: float, p1: point_3d, xl: point_3d) -&gt; int:\n    \"\"\"create line vectors\n    Args:\n        length ( float): length\n        p1 ( point_3d): p1\n        xl ( point_3d): xl\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_linear_optimization","title":"<code>create_linear_optimization(elements, optimization_number, total_length, start_cut, end_cut, saw_kerf, is_production_list)</code>","text":"<p>create linear optimization</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>optimization_number</code> <code> int</code> <p>optimization_number</p> required <code>total_length</code> <code> float</code> <p>total_length</p> required <code>start_cut</code> <code> float</code> <p>start_cut</p> required <code>end_cut</code> <code> float</code> <p>end_cut</p> required <code>saw_kerf</code> <code> float</code> <p>saw_kerf</p> required <code>is_production_list</code> <code> bool</code> <p>is_production_list</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_linear_optimization(elements: List[int], optimization_number: int, total_length: float, start_cut: float, end_cut: float, saw_kerf: float, is_production_list: bool) -&gt; int:\n    \"\"\"create linear optimization\n    Args:\n        elements ( List[int]): elements\n        optimization_number ( int): optimization_number\n        total_length ( float): total_length\n        start_cut ( float): start_cut\n        end_cut ( float): end_cut\n        saw_kerf ( float): saw_kerf\n        is_production_list ( bool): is_production_list\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_multi_wall","title":"<code>create_multi_wall(elements)</code>","text":"<p>create multi wall</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_multi_wall(elements: List[int]) -&gt; None:\n    \"\"\"create multi wall\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_node","title":"<code>create_node(p1)</code>","text":"<p>create node</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code> point_3d</code> <p>p1</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_node(p1: point_3d) -&gt; int:\n    \"\"\"create node\n    Args:\n        p1 ( point_3d): p1\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_normal_axis_points","title":"<code>create_normal_axis_points(p1, p2)</code>","text":"<p>create normal axis points</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code> point_3d</code> <p>p1</p> required <code>p2</code> <code> point_3d</code> <p>p2</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_normal_axis_points(p1: point_3d, p2: point_3d) -&gt; int:\n    \"\"\"create normal axis points\n    Args:\n        p1 ( point_3d): p1\n        p2 ( point_3d): p2\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_normal_axis_vectors","title":"<code>create_normal_axis_vectors(length, p1, xl)</code>","text":"<p>create normal axis vectors</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code> float</code> <p>length</p> required <code>p1</code> <code> point_3d</code> <p>p1</p> required <code>xl</code> <code> point_3d</code> <p>xl</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_normal_axis_vectors(length: float, p1: point_3d, xl: point_3d) -&gt; int:\n    \"\"\"create normal axis vectors\n    Args:\n        length ( float): length\n        p1 ( point_3d): p1\n        xl ( point_3d): xl\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_polygon_beam","title":"<code>create_polygon_beam(polygon_vertices, thickness, xl, zl)</code>","text":"<p>create polygon beam</p> <p>Parameters:</p> Name Type Description Default <code>polygon_vertices</code> <code> List[point_3d]</code> <p>polygon_vertices</p> required <code>thickness</code> <code> float</code> <p>thickness</p> required <code>xl</code> <code> point_3d</code> <p>xl</p> required <code>zl</code> <code> point_3d</code> <p>zl</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_polygon_beam(polygon_vertices: List[point_3d], thickness: float, xl: point_3d, zl: point_3d) -&gt; int:\n    \"\"\"create polygon beam\n    Args:\n        polygon_vertices ( List[point_3d]): polygon_vertices\n        thickness ( float): thickness\n        xl ( point_3d): xl\n        zl ( point_3d): zl\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_polygon_panel","title":"<code>create_polygon_panel(polygon_vertices, thickness, xl, zl)</code>","text":"<p>create polygon panel</p> <p>Parameters:</p> Name Type Description Default <code>polygon_vertices</code> <code> List[point_3d]</code> <p>polygon_vertices</p> required <code>thickness</code> <code> float</code> <p>thickness</p> required <code>xl</code> <code> point_3d</code> <p>xl</p> required <code>zl</code> <code> point_3d</code> <p>zl</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_polygon_panel(polygon_vertices: List[point_3d], thickness: float, xl: point_3d, zl: point_3d) -&gt; int:\n    \"\"\"create polygon panel\n    Args:\n        polygon_vertices ( List[point_3d]): polygon_vertices\n        thickness ( float): thickness\n        xl ( point_3d): xl\n        zl ( point_3d): zl\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_rectangular_beam_points","title":"<code>create_rectangular_beam_points(width, height, p1, p2, p3)</code>","text":"<p>create rectangular beam points</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code> float</code> <p>width</p> required <code>height</code> <code> float</code> <p>height</p> required <code>p1</code> <code> point_3d</code> <p>p1</p> required <code>p2</code> <code> point_3d</code> <p>p2</p> required <code>p3</code> <code> point_3d</code> <p>p3</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_rectangular_beam_points(width: float, height: float, p1: point_3d, p2: point_3d, p3: point_3d) -&gt; int:\n    \"\"\"create rectangular beam points\n    Args:\n        width ( float): width\n        height ( float): height\n        p1 ( point_3d): p1\n        p2 ( point_3d): p2\n        p3 ( point_3d): p3\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_rectangular_beam_vectors","title":"<code>create_rectangular_beam_vectors(width, height, length, p1, xl, zl)</code>","text":"<p>create rectangular beam vectors</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code> float</code> <p>width</p> required <code>height</code> <code> float</code> <p>height</p> required <code>length</code> <code> float</code> <p>length</p> required <code>p1</code> <code> point_3d</code> <p>p1</p> required <code>xl</code> <code> point_3d</code> <p>xl</p> required <code>zl</code> <code> point_3d</code> <p>zl</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_rectangular_beam_vectors(width: float, height: float, length: float, p1: point_3d, xl: point_3d, zl: point_3d) -&gt; int:\n    \"\"\"create rectangular beam vectors\n    Args:\n        width ( float): width\n        height ( float): height\n        length ( float): length\n        p1 ( point_3d): p1\n        xl ( point_3d): xl\n        zl ( point_3d): zl\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_rectangular_mep","title":"<code>create_rectangular_mep(width, depth, points)</code>","text":"<p>create rectangular mep</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code> float</code> <p>width</p> required <code>depth</code> <code> float</code> <p>depth</p> required <code>points</code> <code> List[point_3d]</code> <p>points</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_rectangular_mep(width: float, depth: float, points: List[point_3d]) -&gt; int:\n    \"\"\"create rectangular mep\n    Args:\n        width ( float): width\n        depth ( float): depth\n        points ( List[point_3d]): points\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_rectangular_panel_points","title":"<code>create_rectangular_panel_points(width, thickness, p1, p2, p3)</code>","text":"<p>create rectangular panel points</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code> float</code> <p>width</p> required <code>thickness</code> <code> float</code> <p>thickness</p> required <code>p1</code> <code> point_3d</code> <p>p1</p> required <code>p2</code> <code> point_3d</code> <p>p2</p> required <code>p3</code> <code> point_3d</code> <p>p3</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_rectangular_panel_points(width: float, thickness: float, p1: point_3d, p2: point_3d, p3: point_3d) -&gt; int:\n    \"\"\"create rectangular panel points\n    Args:\n        width ( float): width\n        thickness ( float): thickness\n        p1 ( point_3d): p1\n        p2 ( point_3d): p2\n        p3 ( point_3d): p3\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_rectangular_panel_vectors","title":"<code>create_rectangular_panel_vectors(width, thickness, length, p1, xl, zl)</code>","text":"<p>create rectangular panel vectors</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code> float</code> <p>width</p> required <code>thickness</code> <code> float</code> <p>thickness</p> required <code>length</code> <code> float</code> <p>length</p> required <code>p1</code> <code> point_3d</code> <p>p1</p> required <code>xl</code> <code> point_3d</code> <p>xl</p> required <code>zl</code> <code> point_3d</code> <p>zl</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_rectangular_panel_vectors(width: float, thickness: float, length: float, p1: point_3d, xl: point_3d, zl: point_3d) -&gt; int:\n    \"\"\"create rectangular panel vectors\n    Args:\n        width ( float): width\n        thickness ( float): thickness\n        length ( float): length\n        p1 ( point_3d): p1\n        xl ( point_3d): xl\n        zl ( point_3d): zl\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_square_beam_points","title":"<code>create_square_beam_points(width, p1, p2, p3)</code>","text":"<p>create square beam points</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code> float</code> <p>width</p> required <code>p1</code> <code> point_3d</code> <p>p1</p> required <code>p2</code> <code> point_3d</code> <p>p2</p> required <code>p3</code> <code> point_3d</code> <p>p3</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_square_beam_points(width: float, p1: point_3d, p2: point_3d, p3: point_3d) -&gt; int:\n    \"\"\"create square beam points\n    Args:\n        width ( float): width\n        p1 ( point_3d): p1\n        p2 ( point_3d): p2\n        p3 ( point_3d): p3\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_square_beam_vectors","title":"<code>create_square_beam_vectors(width, length, p1, xl, zl)</code>","text":"<p>create square beam vectors</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code> float</code> <p>width</p> required <code>length</code> <code> float</code> <p>length</p> required <code>p1</code> <code> point_3d</code> <p>p1</p> required <code>xl</code> <code> point_3d</code> <p>xl</p> required <code>zl</code> <code> point_3d</code> <p>zl</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_square_beam_vectors(width: float, length: float, p1: point_3d, xl: point_3d, zl: point_3d) -&gt; int:\n    \"\"\"create square beam vectors\n    Args:\n        width ( float): width\n        length ( float): length\n        p1 ( point_3d): p1\n        xl ( point_3d): xl\n        zl ( point_3d): zl\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_standard_beam_points","title":"<code>create_standard_beam_points(standard_element_name, p1, p2, p3)</code>","text":"<p>create standard beam points</p> <p>Parameters:</p> Name Type Description Default <code>standard_element_name</code> <code> str</code> <p>standard_element_name</p> required <code>p1</code> <code> point_3d</code> <p>p1</p> required <code>p2</code> <code> point_3d</code> <p>p2</p> required <code>p3</code> <code> point_3d</code> <p>p3</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_standard_beam_points(standard_element_name: str, p1: point_3d, p2: point_3d, p3: point_3d) -&gt; int:\n    \"\"\"create standard beam points\n    Args:\n        standard_element_name ( str): standard_element_name\n        p1 ( point_3d): p1\n        p2 ( point_3d): p2\n        p3 ( point_3d): p3\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_standard_beam_vectors","title":"<code>create_standard_beam_vectors(standard_element_name, length, p1, xl, zl)</code>","text":"<p>create standard beam vectors</p> <p>Parameters:</p> Name Type Description Default <code>standard_element_name</code> <code> str</code> <p>standard_element_name</p> required <code>length</code> <code> float</code> <p>length</p> required <code>p1</code> <code> point_3d</code> <p>p1</p> required <code>xl</code> <code> point_3d</code> <p>xl</p> required <code>zl</code> <code> point_3d</code> <p>zl</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_standard_beam_vectors(standard_element_name: str, length: float, p1: point_3d, xl: point_3d, zl: point_3d) -&gt; int:\n    \"\"\"create standard beam vectors\n    Args:\n        standard_element_name ( str): standard_element_name\n        length ( float): length\n        p1 ( point_3d): p1\n        xl ( point_3d): xl\n        zl ( point_3d): zl\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_standard_element_from_guid_points","title":"<code>create_standard_element_from_guid_points(a0, a1, a2, a3)</code>","text":"<p>create standard element from guid points</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> str</code> <p>a0</p> required <code>a1</code> <code> point_3d</code> <p>a1</p> required <code>a2</code> <code> point_3d</code> <p>a2</p> required <code>a3</code> <code> point_3d</code> <p>a3</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_standard_element_from_guid_points(a0: str, a1: point_3d, a2: point_3d, a3: point_3d) -&gt; int:\n    \"\"\"create standard element from guid points\n    Args:\n        a0 ( str): a0\n        a1 ( point_3d): a1\n        a2 ( point_3d): a2\n        a3 ( point_3d): a3\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_standard_element_from_guid_vectors","title":"<code>create_standard_element_from_guid_vectors(a0, a1, a2, a3, a4)</code>","text":"<p>create standard element from guid vectors</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> str</code> <p>a0</p> required <code>a1</code> <code> float</code> <p>a1</p> required <code>a2</code> <code> point_3d</code> <p>a2</p> required <code>a3</code> <code> point_3d</code> <p>a3</p> required <code>a4</code> <code> point_3d</code> <p>a4</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_standard_element_from_guid_vectors(a0: str, a1: float, a2: point_3d, a3: point_3d, a4: point_3d) -&gt; int:\n    \"\"\"create standard element from guid vectors\n    Args:\n        a0 ( str): a0\n        a1 ( float): a1\n        a2 ( point_3d): a2\n        a3 ( point_3d): a3\n        a4 ( point_3d): a4\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_standard_panel_points","title":"<code>create_standard_panel_points(standard_element_name, p1, p2, p3)</code>","text":"<p>create standard panel points</p> <p>Parameters:</p> Name Type Description Default <code>standard_element_name</code> <code> str</code> <p>standard_element_name</p> required <code>p1</code> <code> point_3d</code> <p>p1</p> required <code>p2</code> <code> point_3d</code> <p>p2</p> required <code>p3</code> <code> point_3d</code> <p>p3</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_standard_panel_points(standard_element_name: str, p1: point_3d, p2: point_3d, p3: point_3d) -&gt; int:\n    \"\"\"create standard panel points\n    Args:\n        standard_element_name ( str): standard_element_name\n        p1 ( point_3d): p1\n        p2 ( point_3d): p2\n        p3 ( point_3d): p3\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_standard_panel_vectors","title":"<code>create_standard_panel_vectors(standard_element_name, length, p1, xl, zl)</code>","text":"<p>create standard panel vectors</p> <p>Parameters:</p> Name Type Description Default <code>standard_element_name</code> <code> str</code> <p>standard_element_name</p> required <code>length</code> <code> float</code> <p>length</p> required <code>p1</code> <code> point_3d</code> <p>p1</p> required <code>xl</code> <code> point_3d</code> <p>xl</p> required <code>zl</code> <code> point_3d</code> <p>zl</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_standard_panel_vectors(standard_element_name: str, length: float, p1: point_3d, xl: point_3d, zl: point_3d) -&gt; int:\n    \"\"\"create standard panel vectors\n    Args:\n        standard_element_name ( str): standard_element_name\n        length ( float): length\n        p1 ( point_3d): p1\n        xl ( point_3d): xl\n        zl ( point_3d): zl\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_standard_steel_points","title":"<code>create_standard_steel_points(standard_element_name, p1, p2, p3)</code>","text":"<p>create standard steel points</p> <p>Parameters:</p> Name Type Description Default <code>standard_element_name</code> <code> str</code> <p>standard_element_name</p> required <code>p1</code> <code> point_3d</code> <p>p1</p> required <code>p2</code> <code> point_3d</code> <p>p2</p> required <code>p3</code> <code> point_3d</code> <p>p3</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_standard_steel_points(standard_element_name: str, p1: point_3d, p2: point_3d, p3: point_3d) -&gt; int:\n    \"\"\"create standard steel points\n    Args:\n        standard_element_name ( str): standard_element_name\n        p1 ( point_3d): p1\n        p2 ( point_3d): p2\n        p3 ( point_3d): p3\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_standard_steel_vectors","title":"<code>create_standard_steel_vectors(standard_element_name, length, p1, xl, zl)</code>","text":"<p>create standard steel vectors</p> <p>Parameters:</p> Name Type Description Default <code>standard_element_name</code> <code> str</code> <p>standard_element_name</p> required <code>length</code> <code> float</code> <p>length</p> required <code>p1</code> <code> point_3d</code> <p>p1</p> required <code>xl</code> <code> point_3d</code> <p>xl</p> required <code>zl</code> <code> point_3d</code> <p>zl</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_standard_steel_vectors(standard_element_name: str, length: float, p1: point_3d, xl: point_3d, zl: point_3d) -&gt; int:\n    \"\"\"create standard steel vectors\n    Args:\n        standard_element_name ( str): standard_element_name\n        length ( float): length\n        p1 ( point_3d): p1\n        xl ( point_3d): xl\n        zl ( point_3d): zl\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_surface","title":"<code>create_surface(surface_vertices)</code>","text":"<p>create surface</p> <p>Parameters:</p> Name Type Description Default <code>surface_vertices</code> <code> List[point_3d]</code> <p>surface_vertices</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_surface(surface_vertices: List[point_3d]) -&gt; int:\n    \"\"\"create surface\n    Args:\n        surface_vertices ( List[point_3d]): surface_vertices\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_text_object","title":"<code>create_text_object(text, position, xl, zl, size)</code>","text":"<p>create text object</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code> str</code> <p>text</p> required <code>position</code> <code> point_3d</code> <p>position</p> required <code>xl</code> <code> point_3d</code> <p>xl</p> required <code>zl</code> <code> point_3d</code> <p>zl</p> required <code>size</code> <code> float</code> <p>size</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_text_object(text: str, position: point_3d, xl: point_3d, zl: point_3d, size: float) -&gt; int:\n    \"\"\"create text object\n    Args:\n        text ( str): text\n        position ( point_3d): position\n        xl ( point_3d): xl\n        zl ( point_3d): zl\n        size ( float): size\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_text_object_with_font","title":"<code>create_text_object_with_font(text, position, xl, zl, size, font_name)</code>","text":"<p>create text object with font</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code> str</code> <p>text</p> required <code>position</code> <code> point_3d</code> <p>position</p> required <code>xl</code> <code> point_3d</code> <p>xl</p> required <code>zl</code> <code> point_3d</code> <p>zl</p> required <code>size</code> <code> float</code> <p>size</p> required <code>font_name</code> <code> str</code> <p>font_name</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_text_object_with_font(text: str, position: point_3d, xl: point_3d, zl: point_3d, size: float, font_name: str) -&gt; int:\n    \"\"\"create text object with font\n    Args:\n        text ( str): text\n        position ( point_3d): position\n        xl ( point_3d): xl\n        zl ( point_3d): zl\n        size ( float): size\n        font_name ( str): font_name\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.create_text_object_with_options","title":"<code>create_text_object_with_options(position, xl, zl, text_options)</code>","text":"<p>create text object with options</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code> point_3d</code> <p>position</p> required <code>xl</code> <code> point_3d</code> <p>xl</p> required <code>zl</code> <code> point_3d</code> <p>zl</p> required <code>text_options</code> <code> text_object_options</code> <p>text_options</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def create_text_object_with_options(position: point_3d, xl: point_3d, zl: point_3d, text_options: text_object_options) -&gt; int:\n    \"\"\"create text object with options\n    Args:\n        position ( point_3d): position\n        xl ( point_3d): xl\n        zl ( point_3d): zl\n        text_options ( text_object_options): text_options\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.cut_element_with_plane","title":"<code>cut_element_with_plane(element_id, cut_plane_normal_vector, distance_from_global_origin)</code>","text":"<p>cut element with plane</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <code>cut_plane_normal_vector</code> <code> point_3d</code> <p>cut_plane_normal_vector</p> required <code>distance_from_global_origin</code> <code> float</code> <p>distance_from_global_origin</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def cut_element_with_plane(element_id: int, cut_plane_normal_vector: point_3d, distance_from_global_origin: float) -&gt; bool:\n    \"\"\"cut element with plane\n    Args:\n        element_id ( int): element_id\n        cut_plane_normal_vector ( point_3d): cut_plane_normal_vector\n        distance_from_global_origin ( float): distance_from_global_origin\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.cut_element_with_processing_group","title":"<code>cut_element_with_processing_group(a0, a1)</code>","text":"<p>cut element with processing group</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <code>a1</code> <code> int</code> <p>a1</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def cut_element_with_processing_group(a0: int, a1: int) -&gt; None:\n    \"\"\"cut element with processing group\n    Args:\n        a0 ( int): a0\n        a1 ( int): a1\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.cut_elements_with_miter","title":"<code>cut_elements_with_miter(first_id, second_id)</code>","text":"<p>cut elements with miter</p> <p>Parameters:</p> Name Type Description Default <code>first_id</code> <code> int</code> <p>first_id</p> required <code>second_id</code> <code> int</code> <p>second_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def cut_elements_with_miter(first_id: int, second_id: int) -&gt; bool:\n    \"\"\"cut elements with miter\n    Args:\n        first_id ( int): first_id\n        second_id ( int): second_id\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.cut_elements_with_overmeasure","title":"<code>cut_elements_with_overmeasure(a0, a1)</code>","text":"<p>cut elements with overmeasure</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <code>a1</code> <code> List[int]</code> <p>a1</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def cut_elements_with_overmeasure(a0: List[int], a1: List[int]) -&gt; None:\n    \"\"\"cut elements with overmeasure\n    Args:\n        a0 ( List[int]): a0\n        a1 ( List[int]): a1\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.cut_log_corner_joint","title":"<code>cut_log_corner_joint(a0, a1)</code>","text":"<p>cut log corner joint</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> str</code> <p>a0</p> required <code>a1</code> <code> List[int]</code> <p>a1</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def cut_log_corner_joint(a0: str, a1: List[int]) -&gt; None:\n    \"\"\"cut log corner joint\n    Args:\n        a0 ( str): a0\n        a1 ( List[int]): a1\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.delete_all_element_end_types","title":"<code>delete_all_element_end_types(element_id_list)</code>","text":"<p>delete all element end types</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def delete_all_element_end_types(element_id_list: List[int]) -&gt; None:\n    \"\"\"delete all element end types\n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.delete_all_element_processes","title":"<code>delete_all_element_processes(element_id_list)</code>","text":"<p>delete all element processes</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def delete_all_element_processes(element_id_list: List[int]) -&gt; None:\n    \"\"\"delete all element processes\n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.delete_elements","title":"<code>delete_elements(element_id_list)</code>","text":"<p>delete elements</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def delete_elements(element_id_list: List[int]) -&gt; None:\n    \"\"\"delete elements\n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.delete_elements_with_undo","title":"<code>delete_elements_with_undo(elements)</code>","text":"<p>delete elements with undo</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def delete_elements_with_undo(elements: List[int]) -&gt; None:\n    \"\"\"delete elements with undo\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.extrude_surface_to_auxiliary_vector","title":"<code>extrude_surface_to_auxiliary_vector(surface, vector)</code>","text":"<p>extrude surface to auxiliary vector</p> <p>Parameters:</p> Name Type Description Default <code>surface</code> <code> int</code> <p>surface</p> required <code>vector</code> <code> point_3d</code> <p>vector</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def extrude_surface_to_auxiliary_vector(surface: int, vector: point_3d) -&gt; int:\n    \"\"\"extrude surface to auxiliary vector\n    Args:\n        surface ( int): surface\n        vector ( point_3d): vector\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.extrude_surface_to_beam_vector","title":"<code>extrude_surface_to_beam_vector(surface, vector)</code>","text":"<p>extrude surface to beam vector</p> <p>Parameters:</p> Name Type Description Default <code>surface</code> <code> int</code> <p>surface</p> required <code>vector</code> <code> point_3d</code> <p>vector</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def extrude_surface_to_beam_vector(surface: int, vector: point_3d) -&gt; int:\n    \"\"\"extrude surface to beam vector\n    Args:\n        surface ( int): surface\n        vector ( point_3d): vector\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.extrude_surface_to_panel_vector","title":"<code>extrude_surface_to_panel_vector(surface, vector)</code>","text":"<p>extrude surface to panel vector</p> <p>Parameters:</p> Name Type Description Default <code>surface</code> <code> int</code> <p>surface</p> required <code>vector</code> <code> point_3d</code> <p>vector</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def extrude_surface_to_panel_vector(surface: int, vector: point_3d) -&gt; int:\n    \"\"\"extrude surface to panel vector\n    Args:\n        surface ( int): surface\n        vector ( point_3d): vector\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.fillet_edge","title":"<code>fillet_edge(a0, a1, a2, a3)</code>","text":"<p>fillet edge</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <code>a1</code> <code> point_3d</code> <p>a1</p> required <code>a2</code> <code> point_3d</code> <p>a2</p> required <code>a3</code> <code> float</code> <p>a3</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def fillet_edge(a0: int, a1: point_3d, a2: point_3d, a3: float) -&gt; None:\n    \"\"\"fillet edge\n    Args:\n        a0 ( int): a0\n        a1 ( point_3d): a1\n        a2 ( point_3d): a2\n        a3 ( float): a3\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_active_identifiable_element_ids","title":"<code>get_active_identifiable_element_ids()</code>","text":"<p>get active identifiable element ids</p> <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_active_identifiable_element_ids() -&gt; List[int]:\n    \"\"\"get active identifiable element ids\n    Args:\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_all_identifiable_element_ids","title":"<code>get_all_identifiable_element_ids()</code>","text":"<p>get all identifiable element ids</p> <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_all_identifiable_element_ids() -&gt; List[int]:\n    \"\"\"get all identifiable element ids\n    Args:\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_all_nesting_raw_parts","title":"<code>get_all_nesting_raw_parts()</code>","text":"<p>get all nesting raw parts</p> <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_all_nesting_raw_parts() -&gt; List[int]:\n    \"\"\"get all nesting raw parts\n    Args:\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_bounding_box_vertices_global","title":"<code>get_bounding_box_vertices_global(a0)</code>","text":"<p>get bounding box vertices global</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <p>Returns:</p> Type Description <code>List[cadwork.point_3d.point_3d]</code> <p>List[point_3d]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_bounding_box_vertices_global(a0: List[int]) -&gt; List[point_3d]:\n    \"\"\"get bounding box vertices global\n    Args:\n        a0 ( List[int]): a0\n\n    Returns:\n        List[point_3d]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_bounding_box_vertices_local","title":"<code>get_bounding_box_vertices_local(a0, a1)</code>","text":"<p>get bounding box vertices local</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <code>a1</code> <code> List[int]</code> <p>a1</p> required <p>Returns:</p> Type Description <code>List[cadwork.point_3d.point_3d]</code> <p>List[point_3d]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_bounding_box_vertices_local(a0: int, a1: List[int]) -&gt; List[point_3d]:\n    \"\"\"get bounding box vertices local\n    Args:\n        a0 ( int): a0\n        a1 ( List[int]): a1\n\n    Returns:\n        List[point_3d]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_container_content_elements","title":"<code>get_container_content_elements(element_id)</code>","text":"<p>get container content elements</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_container_content_elements(element_id: int) -&gt; List[int]:\n    \"\"\"get container content elements\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_edge_selection","title":"<code>get_edge_selection(a0)</code>","text":"<p>get edge selection</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <p>Returns:</p> Type Description <code>edge_list</code> <p>edge_list</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_edge_selection(a0: List[int]) -&gt; edge_list:\n    \"\"\"get edge selection\n    Args:\n        a0 ( List[int]): a0\n\n    Returns:\n        edge_list\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_element_cadwork_guid","title":"<code>get_element_cadwork_guid(element_id)</code>","text":"<p>get element cadwork guid</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_element_cadwork_guid(element_id: int) -&gt; str:\n    \"\"\"get element cadwork guid\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_element_contact_facets","title":"<code>get_element_contact_facets(first_id, second_id)</code>","text":"<p>get element contact facets</p> <p>Parameters:</p> Name Type Description Default <code>first_id</code> <code> int</code> <p>first_id</p> required <code>second_id</code> <code> int</code> <p>second_id</p> required <p>Returns:</p> Type Description <code>facet_list</code> <p>facet_list</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_element_contact_facets(first_id: int, second_id: int) -&gt; facet_list:\n    \"\"\"get element contact facets\n    Args:\n        first_id ( int): first_id\n        second_id ( int): second_id\n\n    Returns:\n        facet_list\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_element_contact_vertices","title":"<code>get_element_contact_vertices(first_id, second_id)</code>","text":"<p>get element contact vertices</p> <p>Parameters:</p> Name Type Description Default <code>first_id</code> <code> int</code> <p>first_id</p> required <code>second_id</code> <code> int</code> <p>second_id</p> required <p>Returns:</p> Type Description <code>List[cadwork.point_3d.point_3d]</code> <p>List[point_3d]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_element_contact_vertices(first_id: int, second_id: int) -&gt; List[point_3d]:\n    \"\"\"get element contact vertices\n    Args:\n        first_id ( int): first_id\n        second_id ( int): second_id\n\n    Returns:\n        List[point_3d]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_element_detail_path","title":"<code>get_element_detail_path()</code>","text":"<p>get element detail path</p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_element_detail_path() -&gt; str:\n    \"\"\"get element detail path\n    Args:\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_element_from_cadwork_guid","title":"<code>get_element_from_cadwork_guid(cadwork_guid)</code>","text":"<p>get element from cadwork guid</p> <p>Parameters:</p> Name Type Description Default <code>cadwork_guid</code> <code> str</code> <p>cadwork_guid</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_element_from_cadwork_guid(cadwork_guid: str) -&gt; int:\n    \"\"\"get element from cadwork guid\n    Args:\n        cadwork_guid ( str): cadwork_guid\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_element_module_properties_for_element","title":"<code>get_element_module_properties_for_element(element_id)</code>","text":"<p>get element module properties for element</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>element_module_properties</code> <p>element_module_properties</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_element_module_properties_for_element(element_id: int) -&gt; element_module_properties:\n    \"\"\"get element module properties for element\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element_module_properties\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_element_raw_interface_vertices","title":"<code>get_element_raw_interface_vertices(first_id, second_id)</code>","text":"<p>get element raw interface vertices</p> <p>Parameters:</p> Name Type Description Default <code>first_id</code> <code> int</code> <p>first_id</p> required <code>second_id</code> <code> int</code> <p>second_id</p> required <p>Returns:</p> Type Description <code>List[cadwork.point_3d.point_3d]</code> <p>List[point_3d]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_element_raw_interface_vertices(first_id: int, second_id: int) -&gt; List[point_3d]:\n    \"\"\"get element raw interface vertices\n    Args:\n        first_id ( int): first_id\n        second_id ( int): second_id\n\n    Returns:\n        List[point_3d]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_element_type_description","title":"<code>get_element_type_description(element_id)</code>","text":"<p>get element type description</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_element_type_description(element_id: int) -&gt; str:\n    \"\"\"get element type description\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_elements_in_contact","title":"<code>get_elements_in_contact(a0)</code>","text":"<p>get elements in contact</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_elements_in_contact(a0: int) -&gt; List[int]:\n    \"\"\"get elements in contact\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_export_solid_content_elements","title":"<code>get_export_solid_content_elements(element_id)</code>","text":"<p>get export solid content elements</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_export_solid_content_elements(element_id: int) -&gt; List[int]:\n    \"\"\"get export solid content elements\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_facets_with_lasso","title":"<code>get_facets_with_lasso(a0)</code>","text":"<p>get facets with lasso</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <p>Returns:</p> Type Description <code>facet_list</code> <p>facet_list</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_facets_with_lasso(a0: List[int]) -&gt; facet_list:\n    \"\"\"get facets with lasso\n    Args:\n        a0 ( List[int]): a0\n\n    Returns:\n        facet_list\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_inactive_all_identifiable_element_ids","title":"<code>get_inactive_all_identifiable_element_ids()</code>","text":"<p>get inactive all identifiable element ids</p> <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_inactive_all_identifiable_element_ids() -&gt; List[int]:\n    \"\"\"get inactive all identifiable element ids\n    Args:\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_inactive_visible_identifiable_element_ids","title":"<code>get_inactive_visible_identifiable_element_ids()</code>","text":"<p>get inactive visible identifiable element ids</p> <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_inactive_visible_identifiable_element_ids() -&gt; List[int]:\n    \"\"\"get inactive visible identifiable element ids\n    Args:\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_invisible_identifiable_element_ids","title":"<code>get_invisible_identifiable_element_ids()</code>","text":"<p>get invisible identifiable element ids</p> <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_invisible_identifiable_element_ids() -&gt; List[int]:\n    \"\"\"get invisible identifiable element ids\n    Args:\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_joined_elements","title":"<code>get_joined_elements(a0)</code>","text":"<p>get joined elements</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_joined_elements(a0: int) -&gt; List[int]:\n    \"\"\"get joined elements\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_last_error","title":"<code>get_last_error(error_code)</code>","text":"<p>Gets the last error </p> <p>Parameters:</p> Name Type Description Default <code>error_code</code> <code> int</code> <p>error_code</p> required <p>Returns:</p> Type Description <code>str</code> <p>error string (str)</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_last_error(error_code: int) -&gt; str:\n    \"\"\"Gets the last error \n    Args:\n        error_code ( int): error_code\n\n    Returns:\n        error string (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_nesting_parent_id","title":"<code>get_nesting_parent_id(element_id)</code>","text":"<p>get nesting parent id</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_nesting_parent_id(element_id: int) -&gt; int:\n    \"\"\"get nesting parent id\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_opening_variant_ids","title":"<code>get_opening_variant_ids(elements, opening_type)</code>","text":"<p>get opening variant ids</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>opening_type</code> <code> int</code> <p>opening_type</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_opening_variant_ids(elements: List[int], opening_type: int) -&gt; List[int]:\n    \"\"\"get opening variant ids\n    Args:\n        elements ( List[int]): elements\n        opening_type ( int): opening_type\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_parent_container_id","title":"<code>get_parent_container_id(element_id)</code>","text":"<p>get parent container id</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_parent_container_id(element_id: int) -&gt; int:\n    \"\"\"get parent container id\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_reference_element","title":"<code>get_reference_element(element)</code>","text":"<p>get reference element</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code> int</code> <p>element</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_reference_element(element: int) -&gt; int:\n    \"\"\"get reference element\n    Args:\n        element ( int): element\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_standard_beam_list","title":"<code>get_standard_beam_list()</code>","text":"<p>get standard beam list</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_standard_beam_list() -&gt; List[str]:\n    \"\"\"get standard beam list\n    Args:\n\n    Returns:\n        List[str]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_standard_container_list","title":"<code>get_standard_container_list()</code>","text":"<p>get standard container list</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_standard_container_list() -&gt; List[str]:\n    \"\"\"get standard container list\n    Args:\n\n    Returns:\n        List[str]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_standard_export_solid_list","title":"<code>get_standard_export_solid_list()</code>","text":"<p>get standard export solid list</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_standard_export_solid_list() -&gt; List[str]:\n    \"\"\"get standard export solid list\n    Args:\n\n    Returns:\n        List[str]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_standard_panel_list","title":"<code>get_standard_panel_list()</code>","text":"<p>get standard panel list</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_standard_panel_list() -&gt; List[str]:\n    \"\"\"get standard panel list\n    Args:\n\n    Returns:\n        List[str]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_user_element_ids","title":"<code>get_user_element_ids()</code>","text":"<p>get user element ids</p> <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_user_element_ids() -&gt; List[int]:\n    \"\"\"get user element ids\n    Args:\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_user_element_ids_with_existing","title":"<code>get_user_element_ids_with_existing(elements)</code>","text":"<p>get user element ids with existing</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_user_element_ids_with_existing(elements: List[int]) -&gt; List[int]:\n    \"\"\"get user element ids with existing\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_variant_sibling_element_ids","title":"<code>get_variant_sibling_element_ids(a0)</code>","text":"<p>get variant sibling element ids</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_variant_sibling_element_ids(a0: int) -&gt; List[int]:\n    \"\"\"get variant sibling element ids\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.get_visible_identifiable_element_ids","title":"<code>get_visible_identifiable_element_ids()</code>","text":"<p>get visible identifiable element ids</p> <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def get_visible_identifiable_element_ids() -&gt; List[int]:\n    \"\"\"get visible identifiable element ids\n    Args:\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.glide_elements","title":"<code>glide_elements(element_i_ds, glide_point)</code>","text":"<p>Glides elements </p> <p>Parameters:</p> Name Type Description Default <code>element_i_ds</code> <code> List[int]</code> <p>element_i_ds</p> required <code>glide_point</code> <code> point_3d</code> <p>glide_point</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def glide_elements(element_i_ds: List[int], glide_point: point_3d) -&gt; None:\n    \"\"\"Glides elements \n    Args:\n        element_i_ds ( List[int]): element_i_ds\n        glide_point ( point_3d): glide_point\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.join_elements","title":"<code>join_elements(element_id_list)</code>","text":"<p>join elements</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def join_elements(element_id_list: List[int]) -&gt; None:\n    \"\"\"join elements\n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.join_top_level_elements","title":"<code>join_top_level_elements(element_id_list)</code>","text":"<p>join top level elements</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def join_top_level_elements(element_id_list: List[int]) -&gt; None:\n    \"\"\"join top level elements\n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.make_redo","title":"<code>make_redo()</code>","text":"<p>make redo</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def make_redo() -&gt; None:\n    \"\"\"make redo\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.make_undo","title":"<code>make_undo()</code>","text":"<p>make undo</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def make_undo() -&gt; None:\n    \"\"\"make undo\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.mirror_copy_elements","title":"<code>mirror_copy_elements(elements, plane, plane_distance)</code>","text":"<p>mirror copy elements</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>plane</code> <code> point_3d</code> <p>plane</p> required <code>plane_distance</code> <code> float</code> <p>plane_distance</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def mirror_copy_elements(elements: List[int], plane: point_3d, plane_distance: float) -&gt; List[int]:\n    \"\"\"mirror copy elements\n    Args:\n        elements ( List[int]): elements\n        plane ( point_3d): plane\n        plane_distance ( float): plane_distance\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.mirror_move_elements","title":"<code>mirror_move_elements(elements, plane, plane_distance)</code>","text":"<p>mirror move elements</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>plane</code> <code> point_3d</code> <p>plane</p> required <code>plane_distance</code> <code> float</code> <p>plane_distance</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def mirror_move_elements(elements: List[int], plane: point_3d, plane_distance: float) -&gt; None:\n    \"\"\"mirror move elements\n    Args:\n        elements ( List[int]): elements\n        plane ( point_3d): plane\n        plane_distance ( float): plane_distance\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.move_element","title":"<code>move_element(element_id_list, vector)</code>","text":"<p>move element</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>vector</code> <code> point_3d</code> <p>vector</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def move_element(element_id_list: List[int], vector: point_3d) -&gt; None:\n    \"\"\"move element\n    Args:\n        element_id_list ( List[int]): element_id_list\n        vector ( point_3d): vector\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.move_element_with_undo","title":"<code>move_element_with_undo(element_id_list, vector)</code>","text":"<p>move element with undo</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>vector</code> <code> point_3d</code> <p>vector</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def move_element_with_undo(element_id_list: List[int], vector: point_3d) -&gt; None:\n    \"\"\"move element with undo\n    Args:\n        element_id_list ( List[int]): element_id_list\n        vector ( point_3d): vector\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.parts_situation_manual","title":"<code>parts_situation_manual(a0, a1, a2)</code>","text":"<p>parts situation manual</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <code>a1</code> <code> List[int]</code> <p>a1</p> required <code>a2</code> <code> List[int]</code> <p>a2</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def parts_situation_manual(a0: int, a1: List[int], a2: List[int]) -&gt; None:\n    \"\"\"parts situation manual\n    Args:\n        a0 ( int): a0\n        a1 ( List[int]): a1\n        a2 ( List[int]): a2\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.recreate_elements","title":"<code>recreate_elements(elements)</code>","text":"<p>recreate elements</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def recreate_elements(elements: List[int]) -&gt; None:\n    \"\"\"recreate elements\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.replace_physical_drillings_with_drilling_axes","title":"<code>replace_physical_drillings_with_drilling_axes(a0, a1, a2)</code>","text":"<p>replace physical drillings with drilling axes</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <code>a1</code> <code> float</code> <p>a1</p> required <code>a2</code> <code> float</code> <p>a2</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def replace_physical_drillings_with_drilling_axes(a0: List[int], a1: float, a2: float) -&gt; List[int]:\n    \"\"\"replace physical drillings with drilling axes\n    Args:\n        a0 ( List[int]): a0\n        a1 ( float): a1\n        a2 ( float): a2\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.reset_element_cadwork_guid","title":"<code>reset_element_cadwork_guid(element_id)</code>","text":"<p>sets the Cadwork Guid of an element to NULL </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def reset_element_cadwork_guid(element_id: int) -&gt; None:\n    \"\"\"sets the Cadwork Guid of an element to NULL \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.rotate_elements","title":"<code>rotate_elements(element_id_list, origin, rotation_axis, rotation_angle)</code>","text":"<p>rotate elements</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>origin</code> <code> point_3d</code> <p>origin</p> required <code>rotation_axis</code> <code> point_3d</code> <p>rotation_axis</p> required <code>rotation_angle</code> <code> float</code> <p>rotation_angle</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def rotate_elements(element_id_list: List[int], origin: point_3d, rotation_axis: point_3d, rotation_angle: float) -&gt; None:\n    \"\"\"rotate elements\n    Args:\n        element_id_list ( List[int]): element_id_list\n        origin ( point_3d): origin\n        rotation_axis ( point_3d): rotation_axis\n        rotation_angle ( float): rotation_angle\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.rough_volume_situation_manual","title":"<code>rough_volume_situation_manual(a0, a1, a2)</code>","text":"<p>rough volume situation manual</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <code>a1</code> <code> List[int]</code> <p>a1</p> required <code>a2</code> <code> List[int]</code> <p>a2</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def rough_volume_situation_manual(a0: int, a1: List[int], a2: List[int]) -&gt; None:\n    \"\"\"rough volume situation manual\n    Args:\n        a0 ( int): a0\n        a1 ( List[int]): a1\n        a2 ( List[int]): a2\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.set_container_contents","title":"<code>set_container_contents(a0, a1)</code>","text":"<p>set container contents</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <code>a1</code> <code> List[int]</code> <p>a1</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def set_container_contents(a0: int, a1: List[int]) -&gt; None:\n    \"\"\"set container contents\n    Args:\n        a0 ( int): a0\n        a1 ( List[int]): a1\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.set_element_detail_path","title":"<code>set_element_detail_path(path)</code>","text":"<p>set element detail path</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code> str</code> <p>path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def set_element_detail_path(path: str) -&gt; None:\n    \"\"\"set element detail path\n    Args:\n        path ( str): path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.set_element_module_properties_for_elements","title":"<code>set_element_module_properties_for_elements(elements, properties)</code>","text":"<p>set element module properties for elements</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>properties</code> <code> None</code> <p>properties</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def set_element_module_properties_for_elements(elements: List[int], properties: None) -&gt; None:\n    \"\"\"set element module properties for elements\n    Args:\n        elements ( List[int]): elements\n        properties ( None): properties\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.set_export_solid_contents","title":"<code>set_export_solid_contents(a0, a1)</code>","text":"<p>set export solid contents</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <code>a1</code> <code> List[int]</code> <p>a1</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def set_export_solid_contents(a0: int, a1: List[int]) -&gt; None:\n    \"\"\"set export solid contents\n    Args:\n        a0 ( int): a0\n        a1 ( List[int]): a1\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.set_line_to_marking_line","title":"<code>set_line_to_marking_line(elements)</code>","text":"<p>set line to marking line</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def set_line_to_marking_line(elements: List[int]) -&gt; None:\n    \"\"\"set line to marking line\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.set_line_to_normal_line","title":"<code>set_line_to_normal_line(elements)</code>","text":"<p>set line to normal line</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def set_line_to_normal_line(elements: List[int]) -&gt; None:\n    \"\"\"set line to normal line\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.set_parent_opening_variants_opening_angle","title":"<code>set_parent_opening_variants_opening_angle(a0, a1)</code>","text":"<p>set parent opening variants opening angle</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <code>a1</code> <code> float</code> <p>a1</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def set_parent_opening_variants_opening_angle(a0: List[int], a1: float) -&gt; None:\n    \"\"\"set parent opening variants opening angle\n    Args:\n        a0 ( List[int]): a0\n        a1 ( float): a1\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.slice_element_with_plane","title":"<code>slice_element_with_plane(element_id, cut_plane_normal_vector, distance_from_global_origin)</code>","text":"<p>slice element with plane</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <code>cut_plane_normal_vector</code> <code> point_3d</code> <p>cut_plane_normal_vector</p> required <code>distance_from_global_origin</code> <code> float</code> <p>distance_from_global_origin</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def slice_element_with_plane(element_id: int, cut_plane_normal_vector: point_3d, distance_from_global_origin: float) -&gt; bool:\n    \"\"\"slice element with plane\n    Args:\n        element_id ( int): element_id\n        cut_plane_normal_vector ( point_3d): cut_plane_normal_vector\n        distance_from_global_origin ( float): distance_from_global_origin\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.slice_elements_with_plane_and_get_new_elements","title":"<code>slice_elements_with_plane_and_get_new_elements(a0, a1, a2)</code>","text":"<p>slice elements with plane and get new elements</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <code>a1</code> <code> point_3d</code> <p>a1</p> required <code>a2</code> <code> float</code> <p>a2</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def slice_elements_with_plane_and_get_new_elements(a0: int, a1: point_3d, a2: float) -&gt; List[int]:\n    \"\"\"slice elements with plane and get new elements\n    Args:\n        a0 ( int): a0\n        a1 ( point_3d): a1\n        a2 ( float): a2\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.solder_elements","title":"<code>solder_elements(element_id_list)</code>","text":"<p>solder elements</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def solder_elements(element_id_list: List[int]) -&gt; List[int]:\n    \"\"\"solder elements\n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.split_elements","title":"<code>split_elements(elements)</code>","text":"<p>split elements</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def split_elements(elements: List[int]) -&gt; None:\n    \"\"\"split elements\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.start_element_module_calculation","title":"<code>start_element_module_calculation(covers)</code>","text":"<p>start element module calculation</p> <p>Parameters:</p> Name Type Description Default <code>covers</code> <code> List[int]</code> <p>covers</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def start_element_module_calculation(covers: List[int]) -&gt; None:\n    \"\"\"start element module calculation\n    Args:\n        covers ( List[int]): covers\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.start_element_module_calculation_silently","title":"<code>start_element_module_calculation_silently(covers)</code>","text":"<p>start element module calculation silently</p> <p>Parameters:</p> Name Type Description Default <code>covers</code> <code> List[int]</code> <p>covers</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def start_element_module_calculation_silently(covers: List[int]) -&gt; None:\n    \"\"\"start element module calculation silently\n    Args:\n        covers ( List[int]): covers\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.stretch_end_facet","title":"<code>stretch_end_facet(a0, a1)</code>","text":"<p>stretch end facet</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <code>a1</code> <code> point_3d</code> <p>a1</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def stretch_end_facet(a0: List[int], a1: point_3d) -&gt; None:\n    \"\"\"stretch end facet\n    Args:\n        a0 ( List[int]): a0\n        a1 ( point_3d): a1\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.stretch_start_facet","title":"<code>stretch_start_facet(a0, a1)</code>","text":"<p>stretch start facet</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <code>a1</code> <code> point_3d</code> <p>a1</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def stretch_start_facet(a0: List[int], a1: point_3d) -&gt; None:\n    \"\"\"stretch start facet\n    Args:\n        a0 ( List[int]): a0\n        a1 ( point_3d): a1\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.subtract_elements","title":"<code>subtract_elements(hard_elements, soft_elements)</code>","text":"<p>subtract elements</p> <p>Parameters:</p> Name Type Description Default <code>hard_elements</code> <code> List[int]</code> <p>hard_elements</p> required <code>soft_elements</code> <code> List[int]</code> <p>soft_elements</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def subtract_elements(hard_elements: List[int], soft_elements: List[int]) -&gt; List[int]:\n    \"\"\"subtract elements\n    Args:\n        hard_elements ( List[int]): hard_elements\n        soft_elements ( List[int]): soft_elements\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_controller/#element_controller.subtract_elements_with_undo","title":"<code>subtract_elements_with_undo(hard_elements, soft_elements, with_undo)</code>","text":"<p>subtract elements with undo</p> <p>Parameters:</p> Name Type Description Default <code>hard_elements</code> <code> List[int]</code> <p>hard_elements</p> required <code>soft_elements</code> <code> List[int]</code> <p>soft_elements</p> required <code>with_undo</code> <code> bool</code> <p>with_undo</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>element_controller\\__init__.py</code> <pre><code>def subtract_elements_with_undo(hard_elements: List[int], soft_elements: List[int], with_undo: bool) -&gt; List[int]:\n    \"\"\"subtract elements with undo\n    Args:\n        hard_elements ( List[int]): hard_elements\n        soft_elements ( List[int]): soft_elements\n        with_undo ( bool): with_undo\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/","title":"element_module_properties","text":""},{"location":"documentation/element_module_properties/#cadwork.element_module_properties","title":"<code>cadwork.element_module_properties</code>","text":""},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties","title":"<code> element_module_properties        </code>","text":"Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>class element_module_properties:\n    def isKeepInCenterOfLayerCurrentWall(self) -&gt; bool:\n        \"\"\"isKeepInCenterOfLayerCurrentWall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_keep_in_center_of_layer_current_wall(self) -&gt; bool:\n        \"\"\"is_keep_in_center_of_layer_current_wall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setDistributeInAxisDirectionUseMaxDistance(self, active: bool) -&gt; None:\n        \"\"\"setDistributeInAxisDirectionUseMaxDistance\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_distribute_in_axis_direction_use_max_distance(self, active: bool) -&gt; None:\n        \"\"\"set_distribute_in_axis_direction_use_max_distance\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def setDistributePerpendicularToAxisDirectionUseMaxDistance(self, active: bool) -&gt; None:\n        \"\"\"setDistributePerpendicularToAxisDirectionUseMaxDistance\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_distribute_perpendicular_to_axis_direction_use_max_distance(self, active: bool) -&gt; None:\n        \"\"\"set_distribute_perpendicular_to_axis_direction_use_max_distance\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def setMoveAccordingLengthAxis(self, active: bool) -&gt; None:\n        \"\"\"setMoveAccordingLengthAxis\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_move_according_length_axis(self, active: bool) -&gt; None:\n        \"\"\"set_move_according_length_axis\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def setStretchInOpeningWidth(self, active: bool) -&gt; None:\n        \"\"\"setStretchInOpeningWidth\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_stretch_in_opening_width(self, active: bool) -&gt; None:\n        \"\"\"set_stretch_in_opening_width\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def isOpeningSill(self) -&gt; bool:\n        \"\"\"isOpeningSill\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_opening_sill(self) -&gt; bool:\n        \"\"\"is_opening_sill\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isStretchWithOpeningSill(self) -&gt; bool:\n        \"\"\"isStretchWithOpeningSill\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_stretch_with_opening_sill(self) -&gt; bool:\n        \"\"\"is_stretch_with_opening_sill\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isMainElement(self) -&gt; bool:\n        \"\"\"isMainElement\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_main_element(self) -&gt; bool:\n        \"\"\"is_main_element\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isDistributePerpendicularToAxisDirection(self) -&gt; bool:\n        \"\"\"isDistributePerpendicularToAxisDirection\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_distribute_perpendicular_to_axis_direction(self) -&gt; bool:\n        \"\"\"is_distribute_perpendicular_to_axis_direction\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isStretchWithTopOfWall(self) -&gt; bool:\n        \"\"\"isStretchWithTopOfWall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_stretch_with_top_of_wall(self) -&gt; bool:\n        \"\"\"is_stretch_with_top_of_wall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isBottomPlate(self) -&gt; bool:\n        \"\"\"isBottomPlate\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_bottom_plate(self) -&gt; bool:\n        \"\"\"is_bottom_plate\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def getCuttingElementPriority(self) -&gt; int:\n        \"\"\"getCuttingElementPriority\n        Args:\n\n        Returns:\n            int\n        \"\"\"\n\n    def get_cutting_element_priority(self) -&gt; int:\n        \"\"\"get_cutting_element_priority\n        Args:\n\n        Returns:\n            int\n        \"\"\"\n\n    def setDistributePerpendicularToAxisDirectionUseNumber(self, active: bool, number: int) -&gt; None:\n        \"\"\"setDistributePerpendicularToAxisDirectionUseNumber\n        Args:\n            active ( bool): active\n            number ( int): number\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_distribute_perpendicular_to_axis_direction_use_number(self, active: bool, number: int) -&gt; None:\n        \"\"\"set_distribute_perpendicular_to_axis_direction_use_number\n        Args:\n            active ( bool): active\n            number ( int): number\n\n        Returns:\n            None\n        \"\"\"\n\n    def setStopDistributionPerpendicularToAxisDirection(self, active: bool) -&gt; None:\n        \"\"\"setStopDistributionPerpendicularToAxisDirection\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_stop_distribution_perpendicular_to_axis_direction(self, active: bool) -&gt; None:\n        \"\"\"set_stop_distribution_perpendicular_to_axis_direction\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def isStrechtAccordingThicknessAxis(self) -&gt; bool:\n        \"\"\"isStrechtAccordingThicknessAxis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_strecht_according_thickness_axis(self) -&gt; bool:\n        \"\"\"is_strecht_according_thickness_axis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setNotPlacedAtStartOfWall(self, active: bool) -&gt; None:\n        \"\"\"setNotPlacedAtStartOfWall\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_not_placed_at_start_of_wall(self, active: bool) -&gt; None:\n        \"\"\"set_not_placed_at_start_of_wall\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def isDistributePerpendicularToAxisDirectionUseMaxDistance(self) -&gt; bool:\n        \"\"\"isDistributePerpendicularToAxisDirectionUseMaxDistance\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_distribute_perpendicular_to_axis_direction_use_max_distance(self) -&gt; bool:\n        \"\"\"is_distribute_perpendicular_to_axis_direction_use_max_distance\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isStretchWithOpeningLintel(self) -&gt; bool:\n        \"\"\"isStretchWithOpeningLintel\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_stretch_with_opening_lintel(self) -&gt; bool:\n        \"\"\"is_stretch_with_opening_lintel\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def getDistributeInAxisDirectionDistance(self) -&gt; float:\n        \"\"\"getDistributeInAxisDirectionDistance\n        Args:\n\n        Returns:\n            float\n        \"\"\"\n\n    def get_distribute_in_axis_direction_distance(self) -&gt; float:\n        \"\"\"get_distribute_in_axis_direction_distance\n        Args:\n\n        Returns:\n            float\n        \"\"\"\n\n    def setDistributePerpendicularToAxisDirection(self, active: bool, distance: float) -&gt; None:\n        \"\"\"setDistributePerpendicularToAxisDirection\n        Args:\n            active ( bool): active\n            distance ( float): distance\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_distribute_perpendicular_to_axis_direction(self, active: bool, distance: float) -&gt; None:\n        \"\"\"set_distribute_perpendicular_to_axis_direction\n        Args:\n            active ( bool): active\n            distance ( float): distance\n\n        Returns:\n            None\n        \"\"\"\n\n    def isNoInsideControl(self) -&gt; bool:\n        \"\"\"isNoInsideControl\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_no_inside_control(self) -&gt; bool:\n        \"\"\"is_no_inside_control\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setKeepInCenterOfLayerCurrentWall(self, active: bool, layername: str) -&gt; None:\n        \"\"\"setKeepInCenterOfLayerCurrentWall\n        Args:\n            active ( bool): active\n            layername ( str): layername\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_keep_in_center_of_layer_current_wall(self, active: bool, layername: str) -&gt; None:\n        \"\"\"set_keep_in_center_of_layer_current_wall\n        Args:\n            active ( bool): active\n            layername ( str): layername\n\n        Returns:\n            None\n        \"\"\"\n\n    def isStopDistributionPerpendicularToAxisDirection(self) -&gt; bool:\n        \"\"\"isStopDistributionPerpendicularToAxisDirection\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_stop_distribution_perpendicular_to_axis_direction(self) -&gt; bool:\n        \"\"\"is_stop_distribution_perpendicular_to_axis_direction\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isMoveAccordingThicknessAxis(self) -&gt; bool:\n        \"\"\"isMoveAccordingThicknessAxis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_move_according_thickness_axis(self) -&gt; bool:\n        \"\"\"is_move_according_thickness_axis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setOpeningLintel(self, active: bool) -&gt; None:\n        \"\"\"setOpeningLintel\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_opening_lintel(self, active: bool) -&gt; None:\n        \"\"\"set_opening_lintel\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def isDistributeInAxisDirectionUseNumber(self) -&gt; bool:\n        \"\"\"isDistributeInAxisDirectionUseNumber\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_distribute_in_axis_direction_use_number(self) -&gt; bool:\n        \"\"\"is_distribute_in_axis_direction_use_number\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setNoCollisionControl(self, active: bool) -&gt; None:\n        \"\"\"setNoCollisionControl\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_no_collision_control(self, active: bool) -&gt; None:\n        \"\"\"set_no_collision_control\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def setStretchWithOpeningLintel(self, active: bool) -&gt; None:\n        \"\"\"setStretchWithOpeningLintel\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_stretch_with_opening_lintel(self, active: bool) -&gt; None:\n        \"\"\"set_stretch_with_opening_lintel\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def getDistributeInAxisDirectionNumber(self) -&gt; int:\n        \"\"\"getDistributeInAxisDirectionNumber\n        Args:\n\n        Returns:\n            int\n        \"\"\"\n\n    def get_distribute_in_axis_direction_number(self) -&gt; int:\n        \"\"\"get_distribute_in_axis_direction_number\n        Args:\n\n        Returns:\n            int\n        \"\"\"\n\n    def setKeepInCenterOfRoughVolume(self, active: bool) -&gt; None:\n        \"\"\"setKeepInCenterOfRoughVolume\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_keep_in_center_of_rough_volume(self, active: bool) -&gt; None:\n        \"\"\"set_keep_in_center_of_rough_volume\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def setNotCutWithCuttingElement(self, active: bool) -&gt; None:\n        \"\"\"setNotCutWithCuttingElement\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_not_cut_with_cutting_element(self, active: bool) -&gt; None:\n        \"\"\"set_not_cut_with_cutting_element\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def setMoveWithTopOfWall(self, active: bool) -&gt; None:\n        \"\"\"setMoveWithTopOfWall\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_move_with_top_of_wall(self, active: bool) -&gt; None:\n        \"\"\"set_move_with_top_of_wall\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def setNoInsideControl(self, active: bool) -&gt; None:\n        \"\"\"setNoInsideControl\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_no_inside_control(self, active: bool) -&gt; None:\n        \"\"\"set_no_inside_control\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def setBottomPlate(self, active: bool) -&gt; None:\n        \"\"\"setBottomPlate\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_bottom_plate(self, active: bool) -&gt; None:\n        \"\"\"set_bottom_plate\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def getDistributePerpendicularToAxisDirectionNumber(self) -&gt; int:\n        \"\"\"getDistributePerpendicularToAxisDirectionNumber\n        Args:\n\n        Returns:\n            int\n        \"\"\"\n\n    def get_distribute_perpendicular_to_axis_direction_number(self) -&gt; int:\n        \"\"\"get_distribute_perpendicular_to_axis_direction_number\n        Args:\n\n        Returns:\n            int\n        \"\"\"\n\n    def setNotPlacedAtEndOfWall(self, active: bool) -&gt; None:\n        \"\"\"setNotPlacedAtEndOfWall\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_not_placed_at_end_of_wall(self, active: bool) -&gt; None:\n        \"\"\"set_not_placed_at_end_of_wall\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def isNotPlacedAtStartOfWall(self) -&gt; bool:\n        \"\"\"isNotPlacedAtStartOfWall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_not_placed_at_start_of_wall(self) -&gt; bool:\n        \"\"\"is_not_placed_at_start_of_wall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isDistributeInAxisDirection(self) -&gt; bool:\n        \"\"\"isDistributeInAxisDirection\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_distribute_in_axis_direction(self) -&gt; bool:\n        \"\"\"is_distribute_in_axis_direction\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isCuttingElement(self) -&gt; bool:\n        \"\"\"isCuttingElement\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_cutting_element(self) -&gt; bool:\n        \"\"\"is_cutting_element\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setDistributeInAxisDirection(self, active: bool, distance: float) -&gt; None:\n        \"\"\"setDistributeInAxisDirection\n        Args:\n            active ( bool): active\n            distance ( float): distance\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_distribute_in_axis_direction(self, active: bool, distance: float) -&gt; None:\n        \"\"\"set_distribute_in_axis_direction\n        Args:\n            active ( bool): active\n            distance ( float): distance\n\n        Returns:\n            None\n        \"\"\"\n\n    def setUniqueLayername(self, active: bool, layername: str) -&gt; None:\n        \"\"\"setUniqueLayername\n        Args:\n            active ( bool): active\n            layername ( str): layername\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_unique_layername(self, active: bool, layername: str) -&gt; None:\n        \"\"\"set_unique_layername\n        Args:\n            active ( bool): active\n            layername ( str): layername\n\n        Returns:\n            None\n        \"\"\"\n\n    def isElementFromDetail(self) -&gt; bool:\n        \"\"\"isElementFromDetail\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_element_from_detail(self) -&gt; bool:\n        \"\"\"is_element_from_detail\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setAuxiliary(self, active: bool) -&gt; None:\n        \"\"\"setAuxiliary\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_auxiliary(self, active: bool) -&gt; None:\n        \"\"\"set_auxiliary\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def setDistributeInAxisDirectionUseNumber(self, active: bool, number: int) -&gt; None:\n        \"\"\"setDistributeInAxisDirectionUseNumber\n        Args:\n            active ( bool): active\n            number ( int): number\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_distribute_in_axis_direction_use_number(self, active: bool, number: int) -&gt; None:\n        \"\"\"set_distribute_in_axis_direction_use_number\n        Args:\n            active ( bool): active\n            number ( int): number\n\n        Returns:\n            None\n        \"\"\"\n\n    def isStrechtAccordingLengthAxis(self) -&gt; bool:\n        \"\"\"isStrechtAccordingLengthAxis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_strecht_according_length_axis(self) -&gt; bool:\n        \"\"\"is_strecht_according_length_axis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setUseForDetailCoordinateSystem(self, active: bool) -&gt; None:\n        \"\"\"setUseForDetailCoordinateSystem\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_use_for_detail_coordinate_system(self, active: bool) -&gt; None:\n        \"\"\"set_use_for_detail_coordinate_system\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def isSolderInAxisDirection(self) -&gt; bool:\n        \"\"\"isSolderInAxisDirection\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_solder_in_axis_direction(self) -&gt; bool:\n        \"\"\"is_solder_in_axis_direction\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isStretchInOpeningWidth(self) -&gt; bool:\n        \"\"\"isStretchInOpeningWidth\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_stretch_in_opening_width(self) -&gt; bool:\n        \"\"\"is_stretch_in_opening_width\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setOpeningSill(self, active: bool) -&gt; None:\n        \"\"\"setOpeningSill\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_opening_sill(self, active: bool) -&gt; None:\n        \"\"\"set_opening_sill\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def getDistributePerpendicularToAxisDirectionDistance(self) -&gt; float:\n        \"\"\"getDistributePerpendicularToAxisDirectionDistance\n        Args:\n\n        Returns:\n            float\n        \"\"\"\n\n    def get_distribute_perpendicular_to_axis_direction_distance(self) -&gt; float:\n        \"\"\"get_distribute_perpendicular_to_axis_direction_distance\n        Args:\n\n        Returns:\n            float\n        \"\"\"\n\n    def setKeepInCenterOfLayerNeighbourWall(self, active: bool, layername: str) -&gt; None:\n        \"\"\"setKeepInCenterOfLayerNeighbourWall\n        Args:\n            active ( bool): active\n            layername ( str): layername\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_keep_in_center_of_layer_neighbour_wall(self, active: bool, layername: str) -&gt; None:\n        \"\"\"set_keep_in_center_of_layer_neighbour_wall\n        Args:\n            active ( bool): active\n            layername ( str): layername\n\n        Returns:\n            None\n        \"\"\"\n\n    def setCuttingElement(self, active: bool, priority: int) -&gt; None:\n        \"\"\"setCuttingElement\n        Args:\n            active ( bool): active\n            priority ( int): priority\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_cutting_element(self, active: bool, priority: int) -&gt; None:\n        \"\"\"set_cutting_element\n        Args:\n            active ( bool): active\n            priority ( int): priority\n\n        Returns:\n            None\n        \"\"\"\n\n    def setTopPlate(self, active: bool) -&gt; None:\n        \"\"\"setTopPlate\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_top_plate(self, active: bool) -&gt; None:\n        \"\"\"set_top_plate\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def isKeepInCenterOfLayerNeighbourWall(self) -&gt; bool:\n        \"\"\"isKeepInCenterOfLayerNeighbourWall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_keep_in_center_of_layer_neighbour_wall(self) -&gt; bool:\n        \"\"\"is_keep_in_center_of_layer_neighbour_wall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isDistributeInAxisDirectionUseMaxDistance(self) -&gt; bool:\n        \"\"\"isDistributeInAxisDirectionUseMaxDistance\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_distribute_in_axis_direction_use_max_distance(self) -&gt; bool:\n        \"\"\"is_distribute_in_axis_direction_use_max_distance\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isOpeningLintel(self) -&gt; bool:\n        \"\"\"isOpeningLintel\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_opening_lintel(self) -&gt; bool:\n        \"\"\"is_opening_lintel\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isNotCutWithCuttingElement(self) -&gt; bool:\n        \"\"\"isNotCutWithCuttingElement\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_not_cut_with_cutting_element(self) -&gt; bool:\n        \"\"\"is_not_cut_with_cutting_element\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setStrechtAccordingThicknessAxis(self, active: bool) -&gt; None:\n        \"\"\"setStrechtAccordingThicknessAxis\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_strecht_according_thickness_axis(self, active: bool) -&gt; None:\n        \"\"\"set_strecht_according_thickness_axis\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def isNotPlacedAtEndOfWall(self) -&gt; bool:\n        \"\"\"isNotPlacedAtEndOfWall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_not_placed_at_end_of_wall(self) -&gt; bool:\n        \"\"\"is_not_placed_at_end_of_wall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isNoCollisionControl(self) -&gt; bool:\n        \"\"\"isNoCollisionControl\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_no_collision_control(self) -&gt; bool:\n        \"\"\"is_no_collision_control\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isKeepInCenterOfRoughVolume(self) -&gt; bool:\n        \"\"\"isKeepInCenterOfRoughVolume\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_keep_in_center_of_rough_volume(self) -&gt; bool:\n        \"\"\"is_keep_in_center_of_rough_volume\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setMoveAccordingThicknessAxis(self, active: bool) -&gt; None:\n        \"\"\"setMoveAccordingThicknessAxis\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_move_according_thickness_axis(self, active: bool) -&gt; None:\n        \"\"\"set_move_according_thickness_axis\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def isDistributePerpendicularToAxisDirectionUseNumber(self) -&gt; bool:\n        \"\"\"isDistributePerpendicularToAxisDirectionUseNumber\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_distribute_perpendicular_to_axis_direction_use_number(self) -&gt; bool:\n        \"\"\"is_distribute_perpendicular_to_axis_direction_use_number\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setMainElement(self, active: bool) -&gt; None:\n        \"\"\"setMainElement\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_main_element(self, active: bool) -&gt; None:\n        \"\"\"set_main_element\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def setStopDistributionInAxisDirection(self, active: bool) -&gt; None:\n        \"\"\"setStopDistributionInAxisDirection\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_stop_distribution_in_axis_direction(self, active: bool) -&gt; None:\n        \"\"\"set_stop_distribution_in_axis_direction\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def setStretchWithOpeningSill(self, active: bool) -&gt; None:\n        \"\"\"setStretchWithOpeningSill\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_stretch_with_opening_sill(self, active: bool) -&gt; None:\n        \"\"\"set_stretch_with_opening_sill\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def isMoveWithTopOfWall(self) -&gt; bool:\n        \"\"\"isMoveWithTopOfWall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_move_with_top_of_wall(self) -&gt; bool:\n        \"\"\"is_move_with_top_of_wall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def getKeepInCenterOfLayerNeighbourWall(self) -&gt; str:\n        \"\"\"getKeepInCenterOfLayerNeighbourWall\n        Args:\n\n        Returns:\n            str\n        \"\"\"\n\n    def get_keep_in_center_of_layer_neighbour_wall(self) -&gt; str:\n        \"\"\"get_keep_in_center_of_layer_neighbour_wall\n        Args:\n\n        Returns:\n            str\n        \"\"\"\n\n    def setElementFromDetail(self, active: bool) -&gt; None:\n        \"\"\"setElementFromDetail\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_element_from_detail(self, active: bool) -&gt; None:\n        \"\"\"set_element_from_detail\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def isStopDistributionInAxisDirection(self) -&gt; bool:\n        \"\"\"isStopDistributionInAxisDirection\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_stop_distribution_in_axis_direction(self) -&gt; bool:\n        \"\"\"is_stop_distribution_in_axis_direction\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isAuxiliary(self) -&gt; bool:\n        \"\"\"isAuxiliary\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_auxiliary(self) -&gt; bool:\n        \"\"\"is_auxiliary\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setSolderInAxisDirection(self, active: bool) -&gt; None:\n        \"\"\"setSolderInAxisDirection\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_solder_in_axis_direction(self, active: bool) -&gt; None:\n        \"\"\"set_solder_in_axis_direction\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def isMoveAccordingLengthAxis(self) -&gt; bool:\n        \"\"\"isMoveAccordingLengthAxis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_move_according_length_axis(self) -&gt; bool:\n        \"\"\"is_move_according_length_axis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isTopPlate(self) -&gt; bool:\n        \"\"\"isTopPlate\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_top_plate(self) -&gt; bool:\n        \"\"\"is_top_plate\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def getKeepInCenterOfLayerCurrentWall(self) -&gt; str:\n        \"\"\"getKeepInCenterOfLayerCurrentWall\n        Args:\n\n        Returns:\n            str\n        \"\"\"\n\n    def get_keep_in_center_of_layer_current_wall(self) -&gt; str:\n        \"\"\"get_keep_in_center_of_layer_current_wall\n        Args:\n\n        Returns:\n            str\n        \"\"\"\n\n    def setStrechtAccordingLengthAxis(self, active: bool) -&gt; None:\n        \"\"\"setStrechtAccordingLengthAxis\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_strecht_according_length_axis(self, active: bool) -&gt; None:\n        \"\"\"set_strecht_according_length_axis\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def isUseForDetailCoordinateSystem(self) -&gt; bool:\n        \"\"\"isUseForDetailCoordinateSystem\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_use_for_detail_coordinate_system(self) -&gt; bool:\n        \"\"\"is_use_for_detail_coordinate_system\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isUniqueLayername(self) -&gt; bool:\n        \"\"\"isUniqueLayername\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_unique_layername(self) -&gt; bool:\n        \"\"\"is_unique_layername\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setStretchWithTopOfWall(self, active: bool) -&gt; None:\n        \"\"\"setStretchWithTopOfWall\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_stretch_with_top_of_wall(self, active: bool) -&gt; None:\n        \"\"\"set_stretch_with_top_of_wall\n        Args:\n            active ( bool): active\n\n        Returns:\n            None\n        \"\"\"\n\n    def getUniqueLayername(self) -&gt; str:\n        \"\"\"getUniqueLayername\n        Args:\n\n        Returns:\n            str\n        \"\"\"\n\n    def get_unique_layername(self) -&gt; str:\n        \"\"\"get_unique_layername\n        Args:\n\n        Returns:\n            str\n        \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.getCuttingElementPriority","title":"<code>getCuttingElementPriority(self)</code>","text":"<p>getCuttingElementPriority</p> <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def getCuttingElementPriority(self) -&gt; int:\n    \"\"\"getCuttingElementPriority\n    Args:\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.getDistributeInAxisDirectionDistance","title":"<code>getDistributeInAxisDirectionDistance(self)</code>","text":"<p>getDistributeInAxisDirectionDistance</p> <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def getDistributeInAxisDirectionDistance(self) -&gt; float:\n    \"\"\"getDistributeInAxisDirectionDistance\n    Args:\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.getDistributeInAxisDirectionNumber","title":"<code>getDistributeInAxisDirectionNumber(self)</code>","text":"<p>getDistributeInAxisDirectionNumber</p> <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def getDistributeInAxisDirectionNumber(self) -&gt; int:\n    \"\"\"getDistributeInAxisDirectionNumber\n    Args:\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.getDistributePerpendicularToAxisDirectionDistance","title":"<code>getDistributePerpendicularToAxisDirectionDistance(self)</code>","text":"<p>getDistributePerpendicularToAxisDirectionDistance</p> <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def getDistributePerpendicularToAxisDirectionDistance(self) -&gt; float:\n    \"\"\"getDistributePerpendicularToAxisDirectionDistance\n    Args:\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.getDistributePerpendicularToAxisDirectionNumber","title":"<code>getDistributePerpendicularToAxisDirectionNumber(self)</code>","text":"<p>getDistributePerpendicularToAxisDirectionNumber</p> <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def getDistributePerpendicularToAxisDirectionNumber(self) -&gt; int:\n    \"\"\"getDistributePerpendicularToAxisDirectionNumber\n    Args:\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.getKeepInCenterOfLayerCurrentWall","title":"<code>getKeepInCenterOfLayerCurrentWall(self)</code>","text":"<p>getKeepInCenterOfLayerCurrentWall</p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def getKeepInCenterOfLayerCurrentWall(self) -&gt; str:\n    \"\"\"getKeepInCenterOfLayerCurrentWall\n    Args:\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.getKeepInCenterOfLayerNeighbourWall","title":"<code>getKeepInCenterOfLayerNeighbourWall(self)</code>","text":"<p>getKeepInCenterOfLayerNeighbourWall</p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def getKeepInCenterOfLayerNeighbourWall(self) -&gt; str:\n    \"\"\"getKeepInCenterOfLayerNeighbourWall\n    Args:\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.getUniqueLayername","title":"<code>getUniqueLayername(self)</code>","text":"<p>getUniqueLayername</p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def getUniqueLayername(self) -&gt; str:\n    \"\"\"getUniqueLayername\n    Args:\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.get_cutting_element_priority","title":"<code>get_cutting_element_priority(self)</code>","text":"<p>get_cutting_element_priority</p> <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def get_cutting_element_priority(self) -&gt; int:\n    \"\"\"get_cutting_element_priority\n    Args:\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.get_distribute_in_axis_direction_distance","title":"<code>get_distribute_in_axis_direction_distance(self)</code>","text":"<p>get_distribute_in_axis_direction_distance</p> <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def get_distribute_in_axis_direction_distance(self) -&gt; float:\n    \"\"\"get_distribute_in_axis_direction_distance\n    Args:\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.get_distribute_in_axis_direction_number","title":"<code>get_distribute_in_axis_direction_number(self)</code>","text":"<p>get_distribute_in_axis_direction_number</p> <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def get_distribute_in_axis_direction_number(self) -&gt; int:\n    \"\"\"get_distribute_in_axis_direction_number\n    Args:\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.get_distribute_perpendicular_to_axis_direction_distance","title":"<code>get_distribute_perpendicular_to_axis_direction_distance(self)</code>","text":"<p>get_distribute_perpendicular_to_axis_direction_distance</p> <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def get_distribute_perpendicular_to_axis_direction_distance(self) -&gt; float:\n    \"\"\"get_distribute_perpendicular_to_axis_direction_distance\n    Args:\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.get_distribute_perpendicular_to_axis_direction_number","title":"<code>get_distribute_perpendicular_to_axis_direction_number(self)</code>","text":"<p>get_distribute_perpendicular_to_axis_direction_number</p> <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def get_distribute_perpendicular_to_axis_direction_number(self) -&gt; int:\n    \"\"\"get_distribute_perpendicular_to_axis_direction_number\n    Args:\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.get_keep_in_center_of_layer_current_wall","title":"<code>get_keep_in_center_of_layer_current_wall(self)</code>","text":"<p>get_keep_in_center_of_layer_current_wall</p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def get_keep_in_center_of_layer_current_wall(self) -&gt; str:\n    \"\"\"get_keep_in_center_of_layer_current_wall\n    Args:\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.get_keep_in_center_of_layer_neighbour_wall","title":"<code>get_keep_in_center_of_layer_neighbour_wall(self)</code>","text":"<p>get_keep_in_center_of_layer_neighbour_wall</p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def get_keep_in_center_of_layer_neighbour_wall(self) -&gt; str:\n    \"\"\"get_keep_in_center_of_layer_neighbour_wall\n    Args:\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.get_unique_layername","title":"<code>get_unique_layername(self)</code>","text":"<p>get_unique_layername</p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def get_unique_layername(self) -&gt; str:\n    \"\"\"get_unique_layername\n    Args:\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isAuxiliary","title":"<code>isAuxiliary(self)</code>","text":"<p>isAuxiliary</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isAuxiliary(self) -&gt; bool:\n    \"\"\"isAuxiliary\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isBottomPlate","title":"<code>isBottomPlate(self)</code>","text":"<p>isBottomPlate</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isBottomPlate(self) -&gt; bool:\n    \"\"\"isBottomPlate\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isCuttingElement","title":"<code>isCuttingElement(self)</code>","text":"<p>isCuttingElement</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isCuttingElement(self) -&gt; bool:\n    \"\"\"isCuttingElement\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isDistributeInAxisDirection","title":"<code>isDistributeInAxisDirection(self)</code>","text":"<p>isDistributeInAxisDirection</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isDistributeInAxisDirection(self) -&gt; bool:\n    \"\"\"isDistributeInAxisDirection\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isDistributeInAxisDirectionUseMaxDistance","title":"<code>isDistributeInAxisDirectionUseMaxDistance(self)</code>","text":"<p>isDistributeInAxisDirectionUseMaxDistance</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isDistributeInAxisDirectionUseMaxDistance(self) -&gt; bool:\n    \"\"\"isDistributeInAxisDirectionUseMaxDistance\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isDistributeInAxisDirectionUseNumber","title":"<code>isDistributeInAxisDirectionUseNumber(self)</code>","text":"<p>isDistributeInAxisDirectionUseNumber</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isDistributeInAxisDirectionUseNumber(self) -&gt; bool:\n    \"\"\"isDistributeInAxisDirectionUseNumber\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isDistributePerpendicularToAxisDirection","title":"<code>isDistributePerpendicularToAxisDirection(self)</code>","text":"<p>isDistributePerpendicularToAxisDirection</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isDistributePerpendicularToAxisDirection(self) -&gt; bool:\n    \"\"\"isDistributePerpendicularToAxisDirection\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isDistributePerpendicularToAxisDirectionUseMaxDistance","title":"<code>isDistributePerpendicularToAxisDirectionUseMaxDistance(self)</code>","text":"<p>isDistributePerpendicularToAxisDirectionUseMaxDistance</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isDistributePerpendicularToAxisDirectionUseMaxDistance(self) -&gt; bool:\n    \"\"\"isDistributePerpendicularToAxisDirectionUseMaxDistance\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isDistributePerpendicularToAxisDirectionUseNumber","title":"<code>isDistributePerpendicularToAxisDirectionUseNumber(self)</code>","text":"<p>isDistributePerpendicularToAxisDirectionUseNumber</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isDistributePerpendicularToAxisDirectionUseNumber(self) -&gt; bool:\n    \"\"\"isDistributePerpendicularToAxisDirectionUseNumber\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isElementFromDetail","title":"<code>isElementFromDetail(self)</code>","text":"<p>isElementFromDetail</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isElementFromDetail(self) -&gt; bool:\n    \"\"\"isElementFromDetail\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isKeepInCenterOfLayerCurrentWall","title":"<code>isKeepInCenterOfLayerCurrentWall(self)</code>","text":"<p>isKeepInCenterOfLayerCurrentWall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isKeepInCenterOfLayerCurrentWall(self) -&gt; bool:\n    \"\"\"isKeepInCenterOfLayerCurrentWall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isKeepInCenterOfLayerNeighbourWall","title":"<code>isKeepInCenterOfLayerNeighbourWall(self)</code>","text":"<p>isKeepInCenterOfLayerNeighbourWall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isKeepInCenterOfLayerNeighbourWall(self) -&gt; bool:\n    \"\"\"isKeepInCenterOfLayerNeighbourWall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isKeepInCenterOfRoughVolume","title":"<code>isKeepInCenterOfRoughVolume(self)</code>","text":"<p>isKeepInCenterOfRoughVolume</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isKeepInCenterOfRoughVolume(self) -&gt; bool:\n    \"\"\"isKeepInCenterOfRoughVolume\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isMainElement","title":"<code>isMainElement(self)</code>","text":"<p>isMainElement</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isMainElement(self) -&gt; bool:\n    \"\"\"isMainElement\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isMoveAccordingLengthAxis","title":"<code>isMoveAccordingLengthAxis(self)</code>","text":"<p>isMoveAccordingLengthAxis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isMoveAccordingLengthAxis(self) -&gt; bool:\n    \"\"\"isMoveAccordingLengthAxis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isMoveAccordingThicknessAxis","title":"<code>isMoveAccordingThicknessAxis(self)</code>","text":"<p>isMoveAccordingThicknessAxis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isMoveAccordingThicknessAxis(self) -&gt; bool:\n    \"\"\"isMoveAccordingThicknessAxis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isMoveWithTopOfWall","title":"<code>isMoveWithTopOfWall(self)</code>","text":"<p>isMoveWithTopOfWall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isMoveWithTopOfWall(self) -&gt; bool:\n    \"\"\"isMoveWithTopOfWall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isNoCollisionControl","title":"<code>isNoCollisionControl(self)</code>","text":"<p>isNoCollisionControl</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isNoCollisionControl(self) -&gt; bool:\n    \"\"\"isNoCollisionControl\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isNoInsideControl","title":"<code>isNoInsideControl(self)</code>","text":"<p>isNoInsideControl</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isNoInsideControl(self) -&gt; bool:\n    \"\"\"isNoInsideControl\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isNotCutWithCuttingElement","title":"<code>isNotCutWithCuttingElement(self)</code>","text":"<p>isNotCutWithCuttingElement</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isNotCutWithCuttingElement(self) -&gt; bool:\n    \"\"\"isNotCutWithCuttingElement\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isNotPlacedAtEndOfWall","title":"<code>isNotPlacedAtEndOfWall(self)</code>","text":"<p>isNotPlacedAtEndOfWall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isNotPlacedAtEndOfWall(self) -&gt; bool:\n    \"\"\"isNotPlacedAtEndOfWall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isNotPlacedAtStartOfWall","title":"<code>isNotPlacedAtStartOfWall(self)</code>","text":"<p>isNotPlacedAtStartOfWall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isNotPlacedAtStartOfWall(self) -&gt; bool:\n    \"\"\"isNotPlacedAtStartOfWall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isOpeningLintel","title":"<code>isOpeningLintel(self)</code>","text":"<p>isOpeningLintel</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isOpeningLintel(self) -&gt; bool:\n    \"\"\"isOpeningLintel\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isOpeningSill","title":"<code>isOpeningSill(self)</code>","text":"<p>isOpeningSill</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isOpeningSill(self) -&gt; bool:\n    \"\"\"isOpeningSill\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isSolderInAxisDirection","title":"<code>isSolderInAxisDirection(self)</code>","text":"<p>isSolderInAxisDirection</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isSolderInAxisDirection(self) -&gt; bool:\n    \"\"\"isSolderInAxisDirection\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isStopDistributionInAxisDirection","title":"<code>isStopDistributionInAxisDirection(self)</code>","text":"<p>isStopDistributionInAxisDirection</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isStopDistributionInAxisDirection(self) -&gt; bool:\n    \"\"\"isStopDistributionInAxisDirection\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isStopDistributionPerpendicularToAxisDirection","title":"<code>isStopDistributionPerpendicularToAxisDirection(self)</code>","text":"<p>isStopDistributionPerpendicularToAxisDirection</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isStopDistributionPerpendicularToAxisDirection(self) -&gt; bool:\n    \"\"\"isStopDistributionPerpendicularToAxisDirection\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isStrechtAccordingLengthAxis","title":"<code>isStrechtAccordingLengthAxis(self)</code>","text":"<p>isStrechtAccordingLengthAxis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isStrechtAccordingLengthAxis(self) -&gt; bool:\n    \"\"\"isStrechtAccordingLengthAxis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isStrechtAccordingThicknessAxis","title":"<code>isStrechtAccordingThicknessAxis(self)</code>","text":"<p>isStrechtAccordingThicknessAxis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isStrechtAccordingThicknessAxis(self) -&gt; bool:\n    \"\"\"isStrechtAccordingThicknessAxis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isStretchInOpeningWidth","title":"<code>isStretchInOpeningWidth(self)</code>","text":"<p>isStretchInOpeningWidth</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isStretchInOpeningWidth(self) -&gt; bool:\n    \"\"\"isStretchInOpeningWidth\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isStretchWithOpeningLintel","title":"<code>isStretchWithOpeningLintel(self)</code>","text":"<p>isStretchWithOpeningLintel</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isStretchWithOpeningLintel(self) -&gt; bool:\n    \"\"\"isStretchWithOpeningLintel\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isStretchWithOpeningSill","title":"<code>isStretchWithOpeningSill(self)</code>","text":"<p>isStretchWithOpeningSill</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isStretchWithOpeningSill(self) -&gt; bool:\n    \"\"\"isStretchWithOpeningSill\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isStretchWithTopOfWall","title":"<code>isStretchWithTopOfWall(self)</code>","text":"<p>isStretchWithTopOfWall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isStretchWithTopOfWall(self) -&gt; bool:\n    \"\"\"isStretchWithTopOfWall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isTopPlate","title":"<code>isTopPlate(self)</code>","text":"<p>isTopPlate</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isTopPlate(self) -&gt; bool:\n    \"\"\"isTopPlate\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isUniqueLayername","title":"<code>isUniqueLayername(self)</code>","text":"<p>isUniqueLayername</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isUniqueLayername(self) -&gt; bool:\n    \"\"\"isUniqueLayername\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.isUseForDetailCoordinateSystem","title":"<code>isUseForDetailCoordinateSystem(self)</code>","text":"<p>isUseForDetailCoordinateSystem</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def isUseForDetailCoordinateSystem(self) -&gt; bool:\n    \"\"\"isUseForDetailCoordinateSystem\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_auxiliary","title":"<code>is_auxiliary(self)</code>","text":"<p>is_auxiliary</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_auxiliary(self) -&gt; bool:\n    \"\"\"is_auxiliary\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_bottom_plate","title":"<code>is_bottom_plate(self)</code>","text":"<p>is_bottom_plate</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_bottom_plate(self) -&gt; bool:\n    \"\"\"is_bottom_plate\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_cutting_element","title":"<code>is_cutting_element(self)</code>","text":"<p>is_cutting_element</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_cutting_element(self) -&gt; bool:\n    \"\"\"is_cutting_element\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_distribute_in_axis_direction","title":"<code>is_distribute_in_axis_direction(self)</code>","text":"<p>is_distribute_in_axis_direction</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_distribute_in_axis_direction(self) -&gt; bool:\n    \"\"\"is_distribute_in_axis_direction\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_distribute_in_axis_direction_use_max_distance","title":"<code>is_distribute_in_axis_direction_use_max_distance(self)</code>","text":"<p>is_distribute_in_axis_direction_use_max_distance</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_distribute_in_axis_direction_use_max_distance(self) -&gt; bool:\n    \"\"\"is_distribute_in_axis_direction_use_max_distance\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_distribute_in_axis_direction_use_number","title":"<code>is_distribute_in_axis_direction_use_number(self)</code>","text":"<p>is_distribute_in_axis_direction_use_number</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_distribute_in_axis_direction_use_number(self) -&gt; bool:\n    \"\"\"is_distribute_in_axis_direction_use_number\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_distribute_perpendicular_to_axis_direction","title":"<code>is_distribute_perpendicular_to_axis_direction(self)</code>","text":"<p>is_distribute_perpendicular_to_axis_direction</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_distribute_perpendicular_to_axis_direction(self) -&gt; bool:\n    \"\"\"is_distribute_perpendicular_to_axis_direction\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_distribute_perpendicular_to_axis_direction_use_max_distance","title":"<code>is_distribute_perpendicular_to_axis_direction_use_max_distance(self)</code>","text":"<p>is_distribute_perpendicular_to_axis_direction_use_max_distance</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_distribute_perpendicular_to_axis_direction_use_max_distance(self) -&gt; bool:\n    \"\"\"is_distribute_perpendicular_to_axis_direction_use_max_distance\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_distribute_perpendicular_to_axis_direction_use_number","title":"<code>is_distribute_perpendicular_to_axis_direction_use_number(self)</code>","text":"<p>is_distribute_perpendicular_to_axis_direction_use_number</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_distribute_perpendicular_to_axis_direction_use_number(self) -&gt; bool:\n    \"\"\"is_distribute_perpendicular_to_axis_direction_use_number\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_element_from_detail","title":"<code>is_element_from_detail(self)</code>","text":"<p>is_element_from_detail</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_element_from_detail(self) -&gt; bool:\n    \"\"\"is_element_from_detail\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_keep_in_center_of_layer_current_wall","title":"<code>is_keep_in_center_of_layer_current_wall(self)</code>","text":"<p>is_keep_in_center_of_layer_current_wall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_keep_in_center_of_layer_current_wall(self) -&gt; bool:\n    \"\"\"is_keep_in_center_of_layer_current_wall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_keep_in_center_of_layer_neighbour_wall","title":"<code>is_keep_in_center_of_layer_neighbour_wall(self)</code>","text":"<p>is_keep_in_center_of_layer_neighbour_wall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_keep_in_center_of_layer_neighbour_wall(self) -&gt; bool:\n    \"\"\"is_keep_in_center_of_layer_neighbour_wall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_keep_in_center_of_rough_volume","title":"<code>is_keep_in_center_of_rough_volume(self)</code>","text":"<p>is_keep_in_center_of_rough_volume</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_keep_in_center_of_rough_volume(self) -&gt; bool:\n    \"\"\"is_keep_in_center_of_rough_volume\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_main_element","title":"<code>is_main_element(self)</code>","text":"<p>is_main_element</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_main_element(self) -&gt; bool:\n    \"\"\"is_main_element\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_move_according_length_axis","title":"<code>is_move_according_length_axis(self)</code>","text":"<p>is_move_according_length_axis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_move_according_length_axis(self) -&gt; bool:\n    \"\"\"is_move_according_length_axis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_move_according_thickness_axis","title":"<code>is_move_according_thickness_axis(self)</code>","text":"<p>is_move_according_thickness_axis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_move_according_thickness_axis(self) -&gt; bool:\n    \"\"\"is_move_according_thickness_axis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_move_with_top_of_wall","title":"<code>is_move_with_top_of_wall(self)</code>","text":"<p>is_move_with_top_of_wall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_move_with_top_of_wall(self) -&gt; bool:\n    \"\"\"is_move_with_top_of_wall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_no_collision_control","title":"<code>is_no_collision_control(self)</code>","text":"<p>is_no_collision_control</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_no_collision_control(self) -&gt; bool:\n    \"\"\"is_no_collision_control\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_no_inside_control","title":"<code>is_no_inside_control(self)</code>","text":"<p>is_no_inside_control</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_no_inside_control(self) -&gt; bool:\n    \"\"\"is_no_inside_control\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_not_cut_with_cutting_element","title":"<code>is_not_cut_with_cutting_element(self)</code>","text":"<p>is_not_cut_with_cutting_element</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_not_cut_with_cutting_element(self) -&gt; bool:\n    \"\"\"is_not_cut_with_cutting_element\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_not_placed_at_end_of_wall","title":"<code>is_not_placed_at_end_of_wall(self)</code>","text":"<p>is_not_placed_at_end_of_wall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_not_placed_at_end_of_wall(self) -&gt; bool:\n    \"\"\"is_not_placed_at_end_of_wall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_not_placed_at_start_of_wall","title":"<code>is_not_placed_at_start_of_wall(self)</code>","text":"<p>is_not_placed_at_start_of_wall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_not_placed_at_start_of_wall(self) -&gt; bool:\n    \"\"\"is_not_placed_at_start_of_wall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_opening_lintel","title":"<code>is_opening_lintel(self)</code>","text":"<p>is_opening_lintel</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_opening_lintel(self) -&gt; bool:\n    \"\"\"is_opening_lintel\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_opening_sill","title":"<code>is_opening_sill(self)</code>","text":"<p>is_opening_sill</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_opening_sill(self) -&gt; bool:\n    \"\"\"is_opening_sill\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_solder_in_axis_direction","title":"<code>is_solder_in_axis_direction(self)</code>","text":"<p>is_solder_in_axis_direction</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_solder_in_axis_direction(self) -&gt; bool:\n    \"\"\"is_solder_in_axis_direction\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_stop_distribution_in_axis_direction","title":"<code>is_stop_distribution_in_axis_direction(self)</code>","text":"<p>is_stop_distribution_in_axis_direction</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_stop_distribution_in_axis_direction(self) -&gt; bool:\n    \"\"\"is_stop_distribution_in_axis_direction\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_stop_distribution_perpendicular_to_axis_direction","title":"<code>is_stop_distribution_perpendicular_to_axis_direction(self)</code>","text":"<p>is_stop_distribution_perpendicular_to_axis_direction</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_stop_distribution_perpendicular_to_axis_direction(self) -&gt; bool:\n    \"\"\"is_stop_distribution_perpendicular_to_axis_direction\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_strecht_according_length_axis","title":"<code>is_strecht_according_length_axis(self)</code>","text":"<p>is_strecht_according_length_axis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_strecht_according_length_axis(self) -&gt; bool:\n    \"\"\"is_strecht_according_length_axis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_strecht_according_thickness_axis","title":"<code>is_strecht_according_thickness_axis(self)</code>","text":"<p>is_strecht_according_thickness_axis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_strecht_according_thickness_axis(self) -&gt; bool:\n    \"\"\"is_strecht_according_thickness_axis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_stretch_in_opening_width","title":"<code>is_stretch_in_opening_width(self)</code>","text":"<p>is_stretch_in_opening_width</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_stretch_in_opening_width(self) -&gt; bool:\n    \"\"\"is_stretch_in_opening_width\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_stretch_with_opening_lintel","title":"<code>is_stretch_with_opening_lintel(self)</code>","text":"<p>is_stretch_with_opening_lintel</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_stretch_with_opening_lintel(self) -&gt; bool:\n    \"\"\"is_stretch_with_opening_lintel\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_stretch_with_opening_sill","title":"<code>is_stretch_with_opening_sill(self)</code>","text":"<p>is_stretch_with_opening_sill</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_stretch_with_opening_sill(self) -&gt; bool:\n    \"\"\"is_stretch_with_opening_sill\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_stretch_with_top_of_wall","title":"<code>is_stretch_with_top_of_wall(self)</code>","text":"<p>is_stretch_with_top_of_wall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_stretch_with_top_of_wall(self) -&gt; bool:\n    \"\"\"is_stretch_with_top_of_wall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_top_plate","title":"<code>is_top_plate(self)</code>","text":"<p>is_top_plate</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_top_plate(self) -&gt; bool:\n    \"\"\"is_top_plate\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_unique_layername","title":"<code>is_unique_layername(self)</code>","text":"<p>is_unique_layername</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_unique_layername(self) -&gt; bool:\n    \"\"\"is_unique_layername\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.is_use_for_detail_coordinate_system","title":"<code>is_use_for_detail_coordinate_system(self)</code>","text":"<p>is_use_for_detail_coordinate_system</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def is_use_for_detail_coordinate_system(self) -&gt; bool:\n    \"\"\"is_use_for_detail_coordinate_system\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setAuxiliary","title":"<code>setAuxiliary(self, active)</code>","text":"<p>setAuxiliary</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setAuxiliary(self, active: bool) -&gt; None:\n    \"\"\"setAuxiliary\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setBottomPlate","title":"<code>setBottomPlate(self, active)</code>","text":"<p>setBottomPlate</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setBottomPlate(self, active: bool) -&gt; None:\n    \"\"\"setBottomPlate\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setCuttingElement","title":"<code>setCuttingElement(self, active, priority)</code>","text":"<p>setCuttingElement</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <code>priority</code> <code> int</code> <p>priority</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setCuttingElement(self, active: bool, priority: int) -&gt; None:\n    \"\"\"setCuttingElement\n    Args:\n        active ( bool): active\n        priority ( int): priority\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setDistributeInAxisDirection","title":"<code>setDistributeInAxisDirection(self, active, distance)</code>","text":"<p>setDistributeInAxisDirection</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <code>distance</code> <code> float</code> <p>distance</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setDistributeInAxisDirection(self, active: bool, distance: float) -&gt; None:\n    \"\"\"setDistributeInAxisDirection\n    Args:\n        active ( bool): active\n        distance ( float): distance\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setDistributeInAxisDirectionUseMaxDistance","title":"<code>setDistributeInAxisDirectionUseMaxDistance(self, active)</code>","text":"<p>setDistributeInAxisDirectionUseMaxDistance</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setDistributeInAxisDirectionUseMaxDistance(self, active: bool) -&gt; None:\n    \"\"\"setDistributeInAxisDirectionUseMaxDistance\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setDistributeInAxisDirectionUseNumber","title":"<code>setDistributeInAxisDirectionUseNumber(self, active, number)</code>","text":"<p>setDistributeInAxisDirectionUseNumber</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <code>number</code> <code> int</code> <p>number</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setDistributeInAxisDirectionUseNumber(self, active: bool, number: int) -&gt; None:\n    \"\"\"setDistributeInAxisDirectionUseNumber\n    Args:\n        active ( bool): active\n        number ( int): number\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setDistributePerpendicularToAxisDirection","title":"<code>setDistributePerpendicularToAxisDirection(self, active, distance)</code>","text":"<p>setDistributePerpendicularToAxisDirection</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <code>distance</code> <code> float</code> <p>distance</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setDistributePerpendicularToAxisDirection(self, active: bool, distance: float) -&gt; None:\n    \"\"\"setDistributePerpendicularToAxisDirection\n    Args:\n        active ( bool): active\n        distance ( float): distance\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setDistributePerpendicularToAxisDirectionUseMaxDistance","title":"<code>setDistributePerpendicularToAxisDirectionUseMaxDistance(self, active)</code>","text":"<p>setDistributePerpendicularToAxisDirectionUseMaxDistance</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setDistributePerpendicularToAxisDirectionUseMaxDistance(self, active: bool) -&gt; None:\n    \"\"\"setDistributePerpendicularToAxisDirectionUseMaxDistance\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setDistributePerpendicularToAxisDirectionUseNumber","title":"<code>setDistributePerpendicularToAxisDirectionUseNumber(self, active, number)</code>","text":"<p>setDistributePerpendicularToAxisDirectionUseNumber</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <code>number</code> <code> int</code> <p>number</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setDistributePerpendicularToAxisDirectionUseNumber(self, active: bool, number: int) -&gt; None:\n    \"\"\"setDistributePerpendicularToAxisDirectionUseNumber\n    Args:\n        active ( bool): active\n        number ( int): number\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setElementFromDetail","title":"<code>setElementFromDetail(self, active)</code>","text":"<p>setElementFromDetail</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setElementFromDetail(self, active: bool) -&gt; None:\n    \"\"\"setElementFromDetail\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setKeepInCenterOfLayerCurrentWall","title":"<code>setKeepInCenterOfLayerCurrentWall(self, active, layername)</code>","text":"<p>setKeepInCenterOfLayerCurrentWall</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <code>layername</code> <code> str</code> <p>layername</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setKeepInCenterOfLayerCurrentWall(self, active: bool, layername: str) -&gt; None:\n    \"\"\"setKeepInCenterOfLayerCurrentWall\n    Args:\n        active ( bool): active\n        layername ( str): layername\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setKeepInCenterOfLayerNeighbourWall","title":"<code>setKeepInCenterOfLayerNeighbourWall(self, active, layername)</code>","text":"<p>setKeepInCenterOfLayerNeighbourWall</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <code>layername</code> <code> str</code> <p>layername</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setKeepInCenterOfLayerNeighbourWall(self, active: bool, layername: str) -&gt; None:\n    \"\"\"setKeepInCenterOfLayerNeighbourWall\n    Args:\n        active ( bool): active\n        layername ( str): layername\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setKeepInCenterOfRoughVolume","title":"<code>setKeepInCenterOfRoughVolume(self, active)</code>","text":"<p>setKeepInCenterOfRoughVolume</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setKeepInCenterOfRoughVolume(self, active: bool) -&gt; None:\n    \"\"\"setKeepInCenterOfRoughVolume\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setMainElement","title":"<code>setMainElement(self, active)</code>","text":"<p>setMainElement</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setMainElement(self, active: bool) -&gt; None:\n    \"\"\"setMainElement\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setMoveAccordingLengthAxis","title":"<code>setMoveAccordingLengthAxis(self, active)</code>","text":"<p>setMoveAccordingLengthAxis</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setMoveAccordingLengthAxis(self, active: bool) -&gt; None:\n    \"\"\"setMoveAccordingLengthAxis\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setMoveAccordingThicknessAxis","title":"<code>setMoveAccordingThicknessAxis(self, active)</code>","text":"<p>setMoveAccordingThicknessAxis</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setMoveAccordingThicknessAxis(self, active: bool) -&gt; None:\n    \"\"\"setMoveAccordingThicknessAxis\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setMoveWithTopOfWall","title":"<code>setMoveWithTopOfWall(self, active)</code>","text":"<p>setMoveWithTopOfWall</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setMoveWithTopOfWall(self, active: bool) -&gt; None:\n    \"\"\"setMoveWithTopOfWall\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setNoCollisionControl","title":"<code>setNoCollisionControl(self, active)</code>","text":"<p>setNoCollisionControl</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setNoCollisionControl(self, active: bool) -&gt; None:\n    \"\"\"setNoCollisionControl\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setNoInsideControl","title":"<code>setNoInsideControl(self, active)</code>","text":"<p>setNoInsideControl</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setNoInsideControl(self, active: bool) -&gt; None:\n    \"\"\"setNoInsideControl\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setNotCutWithCuttingElement","title":"<code>setNotCutWithCuttingElement(self, active)</code>","text":"<p>setNotCutWithCuttingElement</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setNotCutWithCuttingElement(self, active: bool) -&gt; None:\n    \"\"\"setNotCutWithCuttingElement\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setNotPlacedAtEndOfWall","title":"<code>setNotPlacedAtEndOfWall(self, active)</code>","text":"<p>setNotPlacedAtEndOfWall</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setNotPlacedAtEndOfWall(self, active: bool) -&gt; None:\n    \"\"\"setNotPlacedAtEndOfWall\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setNotPlacedAtStartOfWall","title":"<code>setNotPlacedAtStartOfWall(self, active)</code>","text":"<p>setNotPlacedAtStartOfWall</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setNotPlacedAtStartOfWall(self, active: bool) -&gt; None:\n    \"\"\"setNotPlacedAtStartOfWall\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setOpeningLintel","title":"<code>setOpeningLintel(self, active)</code>","text":"<p>setOpeningLintel</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setOpeningLintel(self, active: bool) -&gt; None:\n    \"\"\"setOpeningLintel\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setOpeningSill","title":"<code>setOpeningSill(self, active)</code>","text":"<p>setOpeningSill</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setOpeningSill(self, active: bool) -&gt; None:\n    \"\"\"setOpeningSill\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setSolderInAxisDirection","title":"<code>setSolderInAxisDirection(self, active)</code>","text":"<p>setSolderInAxisDirection</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setSolderInAxisDirection(self, active: bool) -&gt; None:\n    \"\"\"setSolderInAxisDirection\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setStopDistributionInAxisDirection","title":"<code>setStopDistributionInAxisDirection(self, active)</code>","text":"<p>setStopDistributionInAxisDirection</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setStopDistributionInAxisDirection(self, active: bool) -&gt; None:\n    \"\"\"setStopDistributionInAxisDirection\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setStopDistributionPerpendicularToAxisDirection","title":"<code>setStopDistributionPerpendicularToAxisDirection(self, active)</code>","text":"<p>setStopDistributionPerpendicularToAxisDirection</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setStopDistributionPerpendicularToAxisDirection(self, active: bool) -&gt; None:\n    \"\"\"setStopDistributionPerpendicularToAxisDirection\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setStrechtAccordingLengthAxis","title":"<code>setStrechtAccordingLengthAxis(self, active)</code>","text":"<p>setStrechtAccordingLengthAxis</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setStrechtAccordingLengthAxis(self, active: bool) -&gt; None:\n    \"\"\"setStrechtAccordingLengthAxis\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setStrechtAccordingThicknessAxis","title":"<code>setStrechtAccordingThicknessAxis(self, active)</code>","text":"<p>setStrechtAccordingThicknessAxis</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setStrechtAccordingThicknessAxis(self, active: bool) -&gt; None:\n    \"\"\"setStrechtAccordingThicknessAxis\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setStretchInOpeningWidth","title":"<code>setStretchInOpeningWidth(self, active)</code>","text":"<p>setStretchInOpeningWidth</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setStretchInOpeningWidth(self, active: bool) -&gt; None:\n    \"\"\"setStretchInOpeningWidth\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setStretchWithOpeningLintel","title":"<code>setStretchWithOpeningLintel(self, active)</code>","text":"<p>setStretchWithOpeningLintel</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setStretchWithOpeningLintel(self, active: bool) -&gt; None:\n    \"\"\"setStretchWithOpeningLintel\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setStretchWithOpeningSill","title":"<code>setStretchWithOpeningSill(self, active)</code>","text":"<p>setStretchWithOpeningSill</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setStretchWithOpeningSill(self, active: bool) -&gt; None:\n    \"\"\"setStretchWithOpeningSill\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setStretchWithTopOfWall","title":"<code>setStretchWithTopOfWall(self, active)</code>","text":"<p>setStretchWithTopOfWall</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setStretchWithTopOfWall(self, active: bool) -&gt; None:\n    \"\"\"setStretchWithTopOfWall\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setTopPlate","title":"<code>setTopPlate(self, active)</code>","text":"<p>setTopPlate</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setTopPlate(self, active: bool) -&gt; None:\n    \"\"\"setTopPlate\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setUniqueLayername","title":"<code>setUniqueLayername(self, active, layername)</code>","text":"<p>setUniqueLayername</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <code>layername</code> <code> str</code> <p>layername</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setUniqueLayername(self, active: bool, layername: str) -&gt; None:\n    \"\"\"setUniqueLayername\n    Args:\n        active ( bool): active\n        layername ( str): layername\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.setUseForDetailCoordinateSystem","title":"<code>setUseForDetailCoordinateSystem(self, active)</code>","text":"<p>setUseForDetailCoordinateSystem</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def setUseForDetailCoordinateSystem(self, active: bool) -&gt; None:\n    \"\"\"setUseForDetailCoordinateSystem\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_auxiliary","title":"<code>set_auxiliary(self, active)</code>","text":"<p>set_auxiliary</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_auxiliary(self, active: bool) -&gt; None:\n    \"\"\"set_auxiliary\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_bottom_plate","title":"<code>set_bottom_plate(self, active)</code>","text":"<p>set_bottom_plate</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_bottom_plate(self, active: bool) -&gt; None:\n    \"\"\"set_bottom_plate\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_cutting_element","title":"<code>set_cutting_element(self, active, priority)</code>","text":"<p>set_cutting_element</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <code>priority</code> <code> int</code> <p>priority</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_cutting_element(self, active: bool, priority: int) -&gt; None:\n    \"\"\"set_cutting_element\n    Args:\n        active ( bool): active\n        priority ( int): priority\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_distribute_in_axis_direction","title":"<code>set_distribute_in_axis_direction(self, active, distance)</code>","text":"<p>set_distribute_in_axis_direction</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <code>distance</code> <code> float</code> <p>distance</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_distribute_in_axis_direction(self, active: bool, distance: float) -&gt; None:\n    \"\"\"set_distribute_in_axis_direction\n    Args:\n        active ( bool): active\n        distance ( float): distance\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_distribute_in_axis_direction_use_max_distance","title":"<code>set_distribute_in_axis_direction_use_max_distance(self, active)</code>","text":"<p>set_distribute_in_axis_direction_use_max_distance</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_distribute_in_axis_direction_use_max_distance(self, active: bool) -&gt; None:\n    \"\"\"set_distribute_in_axis_direction_use_max_distance\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_distribute_in_axis_direction_use_number","title":"<code>set_distribute_in_axis_direction_use_number(self, active, number)</code>","text":"<p>set_distribute_in_axis_direction_use_number</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <code>number</code> <code> int</code> <p>number</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_distribute_in_axis_direction_use_number(self, active: bool, number: int) -&gt; None:\n    \"\"\"set_distribute_in_axis_direction_use_number\n    Args:\n        active ( bool): active\n        number ( int): number\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_distribute_perpendicular_to_axis_direction","title":"<code>set_distribute_perpendicular_to_axis_direction(self, active, distance)</code>","text":"<p>set_distribute_perpendicular_to_axis_direction</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <code>distance</code> <code> float</code> <p>distance</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_distribute_perpendicular_to_axis_direction(self, active: bool, distance: float) -&gt; None:\n    \"\"\"set_distribute_perpendicular_to_axis_direction\n    Args:\n        active ( bool): active\n        distance ( float): distance\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_distribute_perpendicular_to_axis_direction_use_max_distance","title":"<code>set_distribute_perpendicular_to_axis_direction_use_max_distance(self, active)</code>","text":"<p>set_distribute_perpendicular_to_axis_direction_use_max_distance</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_distribute_perpendicular_to_axis_direction_use_max_distance(self, active: bool) -&gt; None:\n    \"\"\"set_distribute_perpendicular_to_axis_direction_use_max_distance\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_distribute_perpendicular_to_axis_direction_use_number","title":"<code>set_distribute_perpendicular_to_axis_direction_use_number(self, active, number)</code>","text":"<p>set_distribute_perpendicular_to_axis_direction_use_number</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <code>number</code> <code> int</code> <p>number</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_distribute_perpendicular_to_axis_direction_use_number(self, active: bool, number: int) -&gt; None:\n    \"\"\"set_distribute_perpendicular_to_axis_direction_use_number\n    Args:\n        active ( bool): active\n        number ( int): number\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_element_from_detail","title":"<code>set_element_from_detail(self, active)</code>","text":"<p>set_element_from_detail</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_element_from_detail(self, active: bool) -&gt; None:\n    \"\"\"set_element_from_detail\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_keep_in_center_of_layer_current_wall","title":"<code>set_keep_in_center_of_layer_current_wall(self, active, layername)</code>","text":"<p>set_keep_in_center_of_layer_current_wall</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <code>layername</code> <code> str</code> <p>layername</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_keep_in_center_of_layer_current_wall(self, active: bool, layername: str) -&gt; None:\n    \"\"\"set_keep_in_center_of_layer_current_wall\n    Args:\n        active ( bool): active\n        layername ( str): layername\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_keep_in_center_of_layer_neighbour_wall","title":"<code>set_keep_in_center_of_layer_neighbour_wall(self, active, layername)</code>","text":"<p>set_keep_in_center_of_layer_neighbour_wall</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <code>layername</code> <code> str</code> <p>layername</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_keep_in_center_of_layer_neighbour_wall(self, active: bool, layername: str) -&gt; None:\n    \"\"\"set_keep_in_center_of_layer_neighbour_wall\n    Args:\n        active ( bool): active\n        layername ( str): layername\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_keep_in_center_of_rough_volume","title":"<code>set_keep_in_center_of_rough_volume(self, active)</code>","text":"<p>set_keep_in_center_of_rough_volume</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_keep_in_center_of_rough_volume(self, active: bool) -&gt; None:\n    \"\"\"set_keep_in_center_of_rough_volume\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_main_element","title":"<code>set_main_element(self, active)</code>","text":"<p>set_main_element</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_main_element(self, active: bool) -&gt; None:\n    \"\"\"set_main_element\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_move_according_length_axis","title":"<code>set_move_according_length_axis(self, active)</code>","text":"<p>set_move_according_length_axis</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_move_according_length_axis(self, active: bool) -&gt; None:\n    \"\"\"set_move_according_length_axis\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_move_according_thickness_axis","title":"<code>set_move_according_thickness_axis(self, active)</code>","text":"<p>set_move_according_thickness_axis</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_move_according_thickness_axis(self, active: bool) -&gt; None:\n    \"\"\"set_move_according_thickness_axis\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_move_with_top_of_wall","title":"<code>set_move_with_top_of_wall(self, active)</code>","text":"<p>set_move_with_top_of_wall</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_move_with_top_of_wall(self, active: bool) -&gt; None:\n    \"\"\"set_move_with_top_of_wall\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_no_collision_control","title":"<code>set_no_collision_control(self, active)</code>","text":"<p>set_no_collision_control</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_no_collision_control(self, active: bool) -&gt; None:\n    \"\"\"set_no_collision_control\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_no_inside_control","title":"<code>set_no_inside_control(self, active)</code>","text":"<p>set_no_inside_control</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_no_inside_control(self, active: bool) -&gt; None:\n    \"\"\"set_no_inside_control\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_not_cut_with_cutting_element","title":"<code>set_not_cut_with_cutting_element(self, active)</code>","text":"<p>set_not_cut_with_cutting_element</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_not_cut_with_cutting_element(self, active: bool) -&gt; None:\n    \"\"\"set_not_cut_with_cutting_element\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_not_placed_at_end_of_wall","title":"<code>set_not_placed_at_end_of_wall(self, active)</code>","text":"<p>set_not_placed_at_end_of_wall</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_not_placed_at_end_of_wall(self, active: bool) -&gt; None:\n    \"\"\"set_not_placed_at_end_of_wall\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_not_placed_at_start_of_wall","title":"<code>set_not_placed_at_start_of_wall(self, active)</code>","text":"<p>set_not_placed_at_start_of_wall</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_not_placed_at_start_of_wall(self, active: bool) -&gt; None:\n    \"\"\"set_not_placed_at_start_of_wall\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_opening_lintel","title":"<code>set_opening_lintel(self, active)</code>","text":"<p>set_opening_lintel</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_opening_lintel(self, active: bool) -&gt; None:\n    \"\"\"set_opening_lintel\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_opening_sill","title":"<code>set_opening_sill(self, active)</code>","text":"<p>set_opening_sill</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_opening_sill(self, active: bool) -&gt; None:\n    \"\"\"set_opening_sill\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_solder_in_axis_direction","title":"<code>set_solder_in_axis_direction(self, active)</code>","text":"<p>set_solder_in_axis_direction</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_solder_in_axis_direction(self, active: bool) -&gt; None:\n    \"\"\"set_solder_in_axis_direction\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_stop_distribution_in_axis_direction","title":"<code>set_stop_distribution_in_axis_direction(self, active)</code>","text":"<p>set_stop_distribution_in_axis_direction</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_stop_distribution_in_axis_direction(self, active: bool) -&gt; None:\n    \"\"\"set_stop_distribution_in_axis_direction\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_stop_distribution_perpendicular_to_axis_direction","title":"<code>set_stop_distribution_perpendicular_to_axis_direction(self, active)</code>","text":"<p>set_stop_distribution_perpendicular_to_axis_direction</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_stop_distribution_perpendicular_to_axis_direction(self, active: bool) -&gt; None:\n    \"\"\"set_stop_distribution_perpendicular_to_axis_direction\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_strecht_according_length_axis","title":"<code>set_strecht_according_length_axis(self, active)</code>","text":"<p>set_strecht_according_length_axis</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_strecht_according_length_axis(self, active: bool) -&gt; None:\n    \"\"\"set_strecht_according_length_axis\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_strecht_according_thickness_axis","title":"<code>set_strecht_according_thickness_axis(self, active)</code>","text":"<p>set_strecht_according_thickness_axis</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_strecht_according_thickness_axis(self, active: bool) -&gt; None:\n    \"\"\"set_strecht_according_thickness_axis\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_stretch_in_opening_width","title":"<code>set_stretch_in_opening_width(self, active)</code>","text":"<p>set_stretch_in_opening_width</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_stretch_in_opening_width(self, active: bool) -&gt; None:\n    \"\"\"set_stretch_in_opening_width\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_stretch_with_opening_lintel","title":"<code>set_stretch_with_opening_lintel(self, active)</code>","text":"<p>set_stretch_with_opening_lintel</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_stretch_with_opening_lintel(self, active: bool) -&gt; None:\n    \"\"\"set_stretch_with_opening_lintel\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_stretch_with_opening_sill","title":"<code>set_stretch_with_opening_sill(self, active)</code>","text":"<p>set_stretch_with_opening_sill</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_stretch_with_opening_sill(self, active: bool) -&gt; None:\n    \"\"\"set_stretch_with_opening_sill\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_stretch_with_top_of_wall","title":"<code>set_stretch_with_top_of_wall(self, active)</code>","text":"<p>set_stretch_with_top_of_wall</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_stretch_with_top_of_wall(self, active: bool) -&gt; None:\n    \"\"\"set_stretch_with_top_of_wall\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_top_plate","title":"<code>set_top_plate(self, active)</code>","text":"<p>set_top_plate</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_top_plate(self, active: bool) -&gt; None:\n    \"\"\"set_top_plate\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_unique_layername","title":"<code>set_unique_layername(self, active, layername)</code>","text":"<p>set_unique_layername</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <code>layername</code> <code> str</code> <p>layername</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_unique_layername(self, active: bool, layername: str) -&gt; None:\n    \"\"\"set_unique_layername\n    Args:\n        active ( bool): active\n        layername ( str): layername\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_module_properties/#cadwork.element_module_properties.element_module_properties.set_use_for_detail_coordinate_system","title":"<code>set_use_for_detail_coordinate_system(self, active)</code>","text":"<p>set_use_for_detail_coordinate_system</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code> bool</code> <p>active</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\element_module_properties.py</code> <pre><code>def set_use_for_detail_coordinate_system(self, active: bool) -&gt; None:\n    \"\"\"set_use_for_detail_coordinate_system\n    Args:\n        active ( bool): active\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/","title":"element_type","text":""},{"location":"documentation/element_type/#cadwork.element_type","title":"<code>cadwork.element_type</code>","text":""},{"location":"documentation/element_type/#cadwork.element_type.element_type","title":"<code> element_type        </code>","text":"Source code in <code>cadwork\\element_type.py</code> <pre><code>class element_type:\n    def isExportSolid(self) -&gt; bool:\n        \"\"\"isExportSolid\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_export_solid(self) -&gt; bool:\n        \"\"\"is_export_solid\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isGraphicalObject(self) -&gt; bool:\n        \"\"\"isGraphicalObject\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_graphical_object(self) -&gt; bool:\n        \"\"\"is_graphical_object\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isNormalNode(self) -&gt; bool:\n        \"\"\"isNormalNode\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_normal_node(self) -&gt; bool:\n        \"\"\"is_normal_node\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isDimension(self) -&gt; bool:\n        \"\"\"isDimension\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_dimension(self) -&gt; bool:\n        \"\"\"is_dimension\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isConnectorAxis(self) -&gt; bool:\n        \"\"\"isConnectorAxis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_connector_axis(self) -&gt; bool:\n        \"\"\"is_connector_axis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isAdditionalElement(self) -&gt; bool:\n        \"\"\"isAdditionalElement\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_additional_element(self) -&gt; bool:\n        \"\"\"is_additional_element\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isRectangularAxis(self) -&gt; bool:\n        \"\"\"isRectangularAxis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_rectangular_axis(self) -&gt; bool:\n        \"\"\"is_rectangular_axis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isGlobalCut(self) -&gt; bool:\n        \"\"\"isGlobalCut\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_global_cut(self) -&gt; bool:\n        \"\"\"is_global_cut\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isDrillingAxis(self) -&gt; bool:\n        \"\"\"isDrillingAxis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_drilling_axis(self) -&gt; bool:\n        \"\"\"is_drilling_axis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isOpening(self) -&gt; bool:\n        \"\"\"isOpening\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_opening(self) -&gt; bool:\n        \"\"\"is_opening\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isWireAxis(self) -&gt; bool:\n        \"\"\"isWireAxis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_wire_axis(self) -&gt; bool:\n        \"\"\"is_wire_axis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isNestingParent(self) -&gt; bool:\n        \"\"\"isNestingParent\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_nesting_parent(self) -&gt; bool:\n        \"\"\"is_nesting_parent\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isRoof(self) -&gt; bool:\n        \"\"\"isRoof\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_roof(self) -&gt; bool:\n        \"\"\"is_roof\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isAuxiliary(self) -&gt; bool:\n        \"\"\"isAuxiliary\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_auxiliary(self) -&gt; bool:\n        \"\"\"is_auxiliary\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isFloor(self) -&gt; bool:\n        \"\"\"isFloor\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_floor(self) -&gt; bool:\n        \"\"\"is_floor\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isExportSolidScene(self) -&gt; bool:\n        \"\"\"isExportSolidScene\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_export_solid_scene(self) -&gt; bool:\n        \"\"\"is_export_solid_scene\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isContainer(self) -&gt; bool:\n        \"\"\"isContainer\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_container(self) -&gt; bool:\n        \"\"\"is_container\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isTextDocument(self) -&gt; bool:\n        \"\"\"isTextDocument\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_text_document(self) -&gt; bool:\n        \"\"\"is_text_document\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isNone(self) -&gt; bool:\n        \"\"\"isNone\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_none(self) -&gt; bool:\n        \"\"\"is_none\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isRoom(self) -&gt; bool:\n        \"\"\"isRoom\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_room(self) -&gt; bool:\n        \"\"\"is_room\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isSurface(self) -&gt; bool:\n        \"\"\"isSurface\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_surface(self) -&gt; bool:\n        \"\"\"is_surface\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isCircularBeam(self) -&gt; bool:\n        \"\"\"isCircularBeam\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_circular_beam(self) -&gt; bool:\n        \"\"\"is_circular_beam\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isCadwork(self) -&gt; bool:\n        \"\"\"isCadwork\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_cadwork(self) -&gt; bool:\n        \"\"\"is_cadwork\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isConnectorNode(self) -&gt; bool:\n        \"\"\"isConnectorNode\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_connector_node(self) -&gt; bool:\n        \"\"\"is_connector_node\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isRectangularBeam(self) -&gt; bool:\n        \"\"\"isRectangularBeam\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_rectangular_beam(self) -&gt; bool:\n        \"\"\"is_rectangular_beam\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isSteelShape(self) -&gt; bool:\n        \"\"\"isSteelShape\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_steel_shape(self) -&gt; bool:\n        \"\"\"is_steel_shape\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isRotationElement(self) -&gt; bool:\n        \"\"\"isRotationElement\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_rotation_element(self) -&gt; bool:\n        \"\"\"is_rotation_element\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isWall(self) -&gt; bool:\n        \"\"\"isWall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_wall(self) -&gt; bool:\n        \"\"\"is_wall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isSectionTrace(self) -&gt; bool:\n        \"\"\"isSectionTrace\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_section_trace(self) -&gt; bool:\n        \"\"\"is_section_trace\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isCircularAxis(self) -&gt; bool:\n        \"\"\"isCircularAxis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_circular_axis(self) -&gt; bool:\n        \"\"\"is_circular_axis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isEaveAxis(self) -&gt; bool:\n        \"\"\"isEaveAxis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_eave_axis(self) -&gt; bool:\n        \"\"\"is_eave_axis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isPanel(self) -&gt; bool:\n        \"\"\"isPanel\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_panel(self) -&gt; bool:\n        \"\"\"is_panel\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isLine(self) -&gt; bool:\n        \"\"\"isLine\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_line(self) -&gt; bool:\n        \"\"\"is_line\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isAdditionalElement","title":"<code>isAdditionalElement(self)</code>","text":"<p>isAdditionalElement</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isAdditionalElement(self) -&gt; bool:\n    \"\"\"isAdditionalElement\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isAuxiliary","title":"<code>isAuxiliary(self)</code>","text":"<p>isAuxiliary</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isAuxiliary(self) -&gt; bool:\n    \"\"\"isAuxiliary\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isCadwork","title":"<code>isCadwork(self)</code>","text":"<p>isCadwork</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isCadwork(self) -&gt; bool:\n    \"\"\"isCadwork\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isCircularAxis","title":"<code>isCircularAxis(self)</code>","text":"<p>isCircularAxis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isCircularAxis(self) -&gt; bool:\n    \"\"\"isCircularAxis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isCircularBeam","title":"<code>isCircularBeam(self)</code>","text":"<p>isCircularBeam</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isCircularBeam(self) -&gt; bool:\n    \"\"\"isCircularBeam\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isConnectorAxis","title":"<code>isConnectorAxis(self)</code>","text":"<p>isConnectorAxis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isConnectorAxis(self) -&gt; bool:\n    \"\"\"isConnectorAxis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isConnectorNode","title":"<code>isConnectorNode(self)</code>","text":"<p>isConnectorNode</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isConnectorNode(self) -&gt; bool:\n    \"\"\"isConnectorNode\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isContainer","title":"<code>isContainer(self)</code>","text":"<p>isContainer</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isContainer(self) -&gt; bool:\n    \"\"\"isContainer\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isDimension","title":"<code>isDimension(self)</code>","text":"<p>isDimension</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isDimension(self) -&gt; bool:\n    \"\"\"isDimension\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isDrillingAxis","title":"<code>isDrillingAxis(self)</code>","text":"<p>isDrillingAxis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isDrillingAxis(self) -&gt; bool:\n    \"\"\"isDrillingAxis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isEaveAxis","title":"<code>isEaveAxis(self)</code>","text":"<p>isEaveAxis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isEaveAxis(self) -&gt; bool:\n    \"\"\"isEaveAxis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isExportSolid","title":"<code>isExportSolid(self)</code>","text":"<p>isExportSolid</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isExportSolid(self) -&gt; bool:\n    \"\"\"isExportSolid\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isExportSolidScene","title":"<code>isExportSolidScene(self)</code>","text":"<p>isExportSolidScene</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isExportSolidScene(self) -&gt; bool:\n    \"\"\"isExportSolidScene\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isFloor","title":"<code>isFloor(self)</code>","text":"<p>isFloor</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isFloor(self) -&gt; bool:\n    \"\"\"isFloor\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isGlobalCut","title":"<code>isGlobalCut(self)</code>","text":"<p>isGlobalCut</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isGlobalCut(self) -&gt; bool:\n    \"\"\"isGlobalCut\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isGraphicalObject","title":"<code>isGraphicalObject(self)</code>","text":"<p>isGraphicalObject</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isGraphicalObject(self) -&gt; bool:\n    \"\"\"isGraphicalObject\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isLine","title":"<code>isLine(self)</code>","text":"<p>isLine</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isLine(self) -&gt; bool:\n    \"\"\"isLine\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isNestingParent","title":"<code>isNestingParent(self)</code>","text":"<p>isNestingParent</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isNestingParent(self) -&gt; bool:\n    \"\"\"isNestingParent\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isNone","title":"<code>isNone(self)</code>","text":"<p>isNone</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isNone(self) -&gt; bool:\n    \"\"\"isNone\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isNormalNode","title":"<code>isNormalNode(self)</code>","text":"<p>isNormalNode</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isNormalNode(self) -&gt; bool:\n    \"\"\"isNormalNode\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isOpening","title":"<code>isOpening(self)</code>","text":"<p>isOpening</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isOpening(self) -&gt; bool:\n    \"\"\"isOpening\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isPanel","title":"<code>isPanel(self)</code>","text":"<p>isPanel</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isPanel(self) -&gt; bool:\n    \"\"\"isPanel\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isRectangularAxis","title":"<code>isRectangularAxis(self)</code>","text":"<p>isRectangularAxis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isRectangularAxis(self) -&gt; bool:\n    \"\"\"isRectangularAxis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isRectangularBeam","title":"<code>isRectangularBeam(self)</code>","text":"<p>isRectangularBeam</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isRectangularBeam(self) -&gt; bool:\n    \"\"\"isRectangularBeam\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isRoof","title":"<code>isRoof(self)</code>","text":"<p>isRoof</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isRoof(self) -&gt; bool:\n    \"\"\"isRoof\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isRoom","title":"<code>isRoom(self)</code>","text":"<p>isRoom</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isRoom(self) -&gt; bool:\n    \"\"\"isRoom\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isRotationElement","title":"<code>isRotationElement(self)</code>","text":"<p>isRotationElement</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isRotationElement(self) -&gt; bool:\n    \"\"\"isRotationElement\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isSectionTrace","title":"<code>isSectionTrace(self)</code>","text":"<p>isSectionTrace</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isSectionTrace(self) -&gt; bool:\n    \"\"\"isSectionTrace\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isSteelShape","title":"<code>isSteelShape(self)</code>","text":"<p>isSteelShape</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isSteelShape(self) -&gt; bool:\n    \"\"\"isSteelShape\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isSurface","title":"<code>isSurface(self)</code>","text":"<p>isSurface</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isSurface(self) -&gt; bool:\n    \"\"\"isSurface\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isTextDocument","title":"<code>isTextDocument(self)</code>","text":"<p>isTextDocument</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isTextDocument(self) -&gt; bool:\n    \"\"\"isTextDocument\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isWall","title":"<code>isWall(self)</code>","text":"<p>isWall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isWall(self) -&gt; bool:\n    \"\"\"isWall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.isWireAxis","title":"<code>isWireAxis(self)</code>","text":"<p>isWireAxis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def isWireAxis(self) -&gt; bool:\n    \"\"\"isWireAxis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_additional_element","title":"<code>is_additional_element(self)</code>","text":"<p>is_additional_element</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_additional_element(self) -&gt; bool:\n    \"\"\"is_additional_element\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_auxiliary","title":"<code>is_auxiliary(self)</code>","text":"<p>is_auxiliary</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_auxiliary(self) -&gt; bool:\n    \"\"\"is_auxiliary\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_cadwork","title":"<code>is_cadwork(self)</code>","text":"<p>is_cadwork</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_cadwork(self) -&gt; bool:\n    \"\"\"is_cadwork\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_circular_axis","title":"<code>is_circular_axis(self)</code>","text":"<p>is_circular_axis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_circular_axis(self) -&gt; bool:\n    \"\"\"is_circular_axis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_circular_beam","title":"<code>is_circular_beam(self)</code>","text":"<p>is_circular_beam</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_circular_beam(self) -&gt; bool:\n    \"\"\"is_circular_beam\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_connector_axis","title":"<code>is_connector_axis(self)</code>","text":"<p>is_connector_axis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_connector_axis(self) -&gt; bool:\n    \"\"\"is_connector_axis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_connector_node","title":"<code>is_connector_node(self)</code>","text":"<p>is_connector_node</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_connector_node(self) -&gt; bool:\n    \"\"\"is_connector_node\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_container","title":"<code>is_container(self)</code>","text":"<p>is_container</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_container(self) -&gt; bool:\n    \"\"\"is_container\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_dimension","title":"<code>is_dimension(self)</code>","text":"<p>is_dimension</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_dimension(self) -&gt; bool:\n    \"\"\"is_dimension\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_drilling_axis","title":"<code>is_drilling_axis(self)</code>","text":"<p>is_drilling_axis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_drilling_axis(self) -&gt; bool:\n    \"\"\"is_drilling_axis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_eave_axis","title":"<code>is_eave_axis(self)</code>","text":"<p>is_eave_axis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_eave_axis(self) -&gt; bool:\n    \"\"\"is_eave_axis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_export_solid","title":"<code>is_export_solid(self)</code>","text":"<p>is_export_solid</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_export_solid(self) -&gt; bool:\n    \"\"\"is_export_solid\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_export_solid_scene","title":"<code>is_export_solid_scene(self)</code>","text":"<p>is_export_solid_scene</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_export_solid_scene(self) -&gt; bool:\n    \"\"\"is_export_solid_scene\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_floor","title":"<code>is_floor(self)</code>","text":"<p>is_floor</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_floor(self) -&gt; bool:\n    \"\"\"is_floor\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_global_cut","title":"<code>is_global_cut(self)</code>","text":"<p>is_global_cut</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_global_cut(self) -&gt; bool:\n    \"\"\"is_global_cut\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_graphical_object","title":"<code>is_graphical_object(self)</code>","text":"<p>is_graphical_object</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_graphical_object(self) -&gt; bool:\n    \"\"\"is_graphical_object\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_line","title":"<code>is_line(self)</code>","text":"<p>is_line</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_line(self) -&gt; bool:\n    \"\"\"is_line\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_nesting_parent","title":"<code>is_nesting_parent(self)</code>","text":"<p>is_nesting_parent</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_nesting_parent(self) -&gt; bool:\n    \"\"\"is_nesting_parent\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_none","title":"<code>is_none(self)</code>","text":"<p>is_none</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_none(self) -&gt; bool:\n    \"\"\"is_none\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_normal_node","title":"<code>is_normal_node(self)</code>","text":"<p>is_normal_node</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_normal_node(self) -&gt; bool:\n    \"\"\"is_normal_node\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_opening","title":"<code>is_opening(self)</code>","text":"<p>is_opening</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_opening(self) -&gt; bool:\n    \"\"\"is_opening\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_panel","title":"<code>is_panel(self)</code>","text":"<p>is_panel</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_panel(self) -&gt; bool:\n    \"\"\"is_panel\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_rectangular_axis","title":"<code>is_rectangular_axis(self)</code>","text":"<p>is_rectangular_axis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_rectangular_axis(self) -&gt; bool:\n    \"\"\"is_rectangular_axis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_rectangular_beam","title":"<code>is_rectangular_beam(self)</code>","text":"<p>is_rectangular_beam</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_rectangular_beam(self) -&gt; bool:\n    \"\"\"is_rectangular_beam\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_roof","title":"<code>is_roof(self)</code>","text":"<p>is_roof</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_roof(self) -&gt; bool:\n    \"\"\"is_roof\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_room","title":"<code>is_room(self)</code>","text":"<p>is_room</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_room(self) -&gt; bool:\n    \"\"\"is_room\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_rotation_element","title":"<code>is_rotation_element(self)</code>","text":"<p>is_rotation_element</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_rotation_element(self) -&gt; bool:\n    \"\"\"is_rotation_element\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_section_trace","title":"<code>is_section_trace(self)</code>","text":"<p>is_section_trace</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_section_trace(self) -&gt; bool:\n    \"\"\"is_section_trace\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_steel_shape","title":"<code>is_steel_shape(self)</code>","text":"<p>is_steel_shape</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_steel_shape(self) -&gt; bool:\n    \"\"\"is_steel_shape\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_surface","title":"<code>is_surface(self)</code>","text":"<p>is_surface</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_surface(self) -&gt; bool:\n    \"\"\"is_surface\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_text_document","title":"<code>is_text_document(self)</code>","text":"<p>is_text_document</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_text_document(self) -&gt; bool:\n    \"\"\"is_text_document\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_wall","title":"<code>is_wall(self)</code>","text":"<p>is_wall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_wall(self) -&gt; bool:\n    \"\"\"is_wall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/element_type/#cadwork.element_type.element_type.is_wire_axis","title":"<code>is_wire_axis(self)</code>","text":"<p>is_wire_axis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\element_type.py</code> <pre><code>def is_wire_axis(self) -&gt; bool:\n    \"\"\"is_wire_axis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/endtype_controller/","title":"End-Type Controller","text":""},{"location":"documentation/endtype_controller/#endtype_controller","title":"<code>endtype_controller</code>  <code>special</code>","text":""},{"location":"documentation/endtype_controller/#endtype_controller.clear_errors","title":"<code>clear_errors()</code>","text":"<p>clear errors</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>endtype_controller\\__init__.py</code> <pre><code>def clear_errors() -&gt; None:\n    \"\"\"clear errors\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/endtype_controller/#endtype_controller.create_new_endtype","title":"<code>create_new_endtype(endtype_name, endtype_id, folder_name)</code>","text":"<p>Creates a new Endtype </p> <p>Parameters:</p> Name Type Description Default <code>endtype_name</code> <code> str</code> <p>endtype_name</p> required <code>endtype_id</code> <code> int</code> <p>endtype_id</p> required <code>folder_name</code> <code> str</code> <p>folder_name</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>endtype_controller\\__init__.py</code> <pre><code>def create_new_endtype(endtype_name: str, endtype_id: int, folder_name: str) -&gt; int:\n    \"\"\"Creates a new Endtype \n    Args:\n        endtype_name ( str): endtype_name\n        endtype_id ( int): endtype_id\n        folder_name ( str): folder_name\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/endtype_controller/#endtype_controller.get_endtype_id","title":"<code>get_endtype_id(name)</code>","text":"<p>Gets the endtypeID by endtypename </p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code> str</code> <p>name</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>endtype_controller\\__init__.py</code> <pre><code>def get_endtype_id(name: str) -&gt; int:\n    \"\"\"Gets the endtypeID by endtypename \n    Args:\n        name ( str): name\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/endtype_controller/#endtype_controller.get_endtype_id_end","title":"<code>get_endtype_id_end(element_id)</code>","text":"<p>Gets the endtypeID of the end face </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>endtype_controller\\__init__.py</code> <pre><code>def get_endtype_id_end(element_id: int) -&gt; int:\n    \"\"\"Gets the endtypeID of the end face \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/endtype_controller/#endtype_controller.get_endtype_id_facet","title":"<code>get_endtype_id_facet(a0, a1)</code>","text":"<p>get endtype id facet</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <code>a1</code> <code> int</code> <p>a1</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>endtype_controller\\__init__.py</code> <pre><code>def get_endtype_id_facet(a0: int, a1: int) -&gt; int:\n    \"\"\"get endtype id facet\n    Args:\n        a0 ( int): a0\n        a1 ( int): a1\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/endtype_controller/#endtype_controller.get_endtype_id_start","title":"<code>get_endtype_id_start(element_id)</code>","text":"<p>Gets the endtypeID of the start face </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>endtype_controller\\__init__.py</code> <pre><code>def get_endtype_id_start(element_id: int) -&gt; int:\n    \"\"\"Gets the endtypeID of the start face \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/endtype_controller/#endtype_controller.get_endtype_name","title":"<code>get_endtype_name(element_id)</code>","text":"<p>Gets the endtypename by endtypeID </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>endtype_controller\\__init__.py</code> <pre><code>def get_endtype_name(element_id: int) -&gt; str:\n    \"\"\"Gets the endtypename by endtypeID \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/endtype_controller/#endtype_controller.get_endtype_name_end","title":"<code>get_endtype_name_end(element_id)</code>","text":"<p>Gets the endtypename of the end face </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>endtype_controller\\__init__.py</code> <pre><code>def get_endtype_name_end(element_id: int) -&gt; str:\n    \"\"\"Gets the endtypename of the end face \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/endtype_controller/#endtype_controller.get_endtype_name_facet","title":"<code>get_endtype_name_facet(a0, a1)</code>","text":"<p>get endtype name facet</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <code>a1</code> <code> int</code> <p>a1</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>endtype_controller\\__init__.py</code> <pre><code>def get_endtype_name_facet(a0: int, a1: int) -&gt; str:\n    \"\"\"get endtype name facet\n    Args:\n        a0 ( int): a0\n        a1 ( int): a1\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/endtype_controller/#endtype_controller.get_endtype_name_start","title":"<code>get_endtype_name_start(element_id)</code>","text":"<p>Gets the endtypename of the start face </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>endtype_controller\\__init__.py</code> <pre><code>def get_endtype_name_start(element_id: int) -&gt; str:\n    \"\"\"Gets the endtypename of the start face \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/endtype_controller/#endtype_controller.get_last_error","title":"<code>get_last_error(error_code)</code>","text":"<p>get last error</p> <p>Parameters:</p> Name Type Description Default <code>error_code</code> <code> int</code> <p>error_code</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>endtype_controller\\__init__.py</code> <pre><code>def get_last_error(error_code: int) -&gt; str:\n    \"\"\"get last error\n    Args:\n        error_code ( int): error_code\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/endtype_controller/#endtype_controller.set_endtype_id_end","title":"<code>set_endtype_id_end(element_id, endtype_id)</code>","text":"<p>Sets the endtype to end face by endtypeID </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <code>endtype_id</code> <code> int</code> <p>endtype_id</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>endtype_controller\\__init__.py</code> <pre><code>def set_endtype_id_end(element_id: int, endtype_id: int) -&gt; None:\n    \"\"\"Sets the endtype to end face by endtypeID \n    Args:\n        element_id ( int): element_id\n        endtype_id ( int): endtype_id\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/endtype_controller/#endtype_controller.set_endtype_id_facet","title":"<code>set_endtype_id_facet(a0, a1, a2)</code>","text":"<p>set endtype id facet</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <code>a1</code> <code> int</code> <p>a1</p> required <code>a2</code> <code> int</code> <p>a2</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>endtype_controller\\__init__.py</code> <pre><code>def set_endtype_id_facet(a0: int, a1: int, a2: int) -&gt; None:\n    \"\"\"set endtype id facet\n    Args:\n        a0 ( int): a0\n        a1 ( int): a1\n        a2 ( int): a2\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/endtype_controller/#endtype_controller.set_endtype_id_start","title":"<code>set_endtype_id_start(element_id, endtype_id)</code>","text":"<p>Sets the endtype to start face by endtypeID </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <code>endtype_id</code> <code> int</code> <p>endtype_id</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>endtype_controller\\__init__.py</code> <pre><code>def set_endtype_id_start(element_id: int, endtype_id: int) -&gt; None:\n    \"\"\"Sets the endtype to start face by endtypeID \n    Args:\n        element_id ( int): element_id\n        endtype_id ( int): endtype_id\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/endtype_controller/#endtype_controller.set_endtype_name_end","title":"<code>set_endtype_name_end(element_id, name)</code>","text":"<p>Sets the endtype to end face by endtypename </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <code>name</code> <code> str</code> <p>name</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>endtype_controller\\__init__.py</code> <pre><code>def set_endtype_name_end(element_id: int, name: str) -&gt; None:\n    \"\"\"Sets the endtype to end face by endtypename \n    Args:\n        element_id ( int): element_id\n        name ( str): name\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/endtype_controller/#endtype_controller.set_endtype_name_facet","title":"<code>set_endtype_name_facet(a0, a1, a2)</code>","text":"<p>set endtype name facet</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <code>a1</code> <code> str</code> <p>a1</p> required <code>a2</code> <code> int</code> <p>a2</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>endtype_controller\\__init__.py</code> <pre><code>def set_endtype_name_facet(a0: int, a1: str, a2: int) -&gt; None:\n    \"\"\"set endtype name facet\n    Args:\n        a0 ( int): a0\n        a1 ( str): a1\n        a2 ( int): a2\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/endtype_controller/#endtype_controller.set_endtype_name_start","title":"<code>set_endtype_name_start(element_id, name)</code>","text":"<p>Sets the endtype to start face by endtypename </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <code>name</code> <code> str</code> <p>name</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>endtype_controller\\__init__.py</code> <pre><code>def set_endtype_name_start(element_id: int, name: str) -&gt; None:\n    \"\"\"Sets the endtype to start face by endtypename \n    Args:\n        element_id ( int): element_id\n        name ( str): name\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/enums/","title":"Enumerations","text":""},{"location":"documentation/enums/#node-symbols","title":"Node symbols","text":""},{"location":"documentation/enums/#cadwork.node_symbol","title":"<code>cadwork.node_symbol</code>","text":""},{"location":"documentation/enums/#cadwork.node_symbol.node_symbol","title":"<code> node_symbol            (IntEnum)         </code>","text":"<p>node symbol</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cadwork.node_symbol.SmallSquare\nSmallSquare\n</code></pre> Source code in <code>cadwork\\node_symbol.py</code> <pre><code>@unique\nclass node_symbol(IntEnum):\n    \"\"\"node symbol\n\n    Examples:\n        &gt;&gt;&gt; cadwork.node_symbol.SmallSquare\n        SmallSquare\n\n    Args:\n        SmallSquare = 1\n        Square = 2\n        Cross = 3\n        Circle = 4\n        FilledCircle = 5\n        ChessSquare = 6\n        HalfFilledSquare = 7\n        CrossSquare = 8\n        FilledSquare = 9\n\n    \"\"\"\n    SmallSquare = 1\n    Square = 2\n    Cross = 3\n    Circle = 4\n    FilledCircle = 5\n    ChessSquare = 6\n    HalfFilledSquare = 7\n    CrossSquare = 8\n    FilledSquare = 9\n\n    def __int__(self) -&gt; int:\n        return self.value\n</code></pre>"},{"location":"documentation/enums/#element-module","title":"Element module","text":""},{"location":"documentation/enums/#cadwork.element_module_detail","title":"<code>cadwork.element_module_detail</code>","text":""},{"location":"documentation/enums/#cadwork.element_module_detail.element_module_detail","title":"<code> element_module_detail            (IntEnum)         </code>","text":"<p>element module detail</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cadwork.element_module_detail.no_detail\nno_detail\n</code></pre> Source code in <code>cadwork\\element_module_detail.py</code> <pre><code>@unique\nclass element_module_detail(IntEnum):\n    \"\"\"element module detail\n\n    Examples:\n        &gt;&gt;&gt; cadwork.element_module_detail.no_detail\n        no_detail\n\n    Args:\n        no_detail = 1\n        angle_detail = 2\n        area_detail = 3\n        cross_detail = 4\n        edge_detail = 5\n        end_detail = 6\n        line_detail = 7\n        open_detail = 8\n        t_detail = 9\n        floor_area_detail = 10\n        floor_end_detail = 11\n        floor_line_detail = 12\n        floor_open_detail = 13\n\n    \"\"\"\n    no_detail = 1\n    angle_detail = 2\n    area_detail = 3\n    cross_detail = 4\n    edge_detail = 5\n    end_detail = 6\n    line_detail = 7\n    open_detail = 8\n    t_detail = 9\n    floor_area_detail = 10\n    floor_end_detail = 11\n    floor_line_detail = 12\n    floor_open_detail = 13\n\n    def __int__(self) -&gt; int:\n        return self.value\n</code></pre>"},{"location":"documentation/enums/#cadwork.division_zone_direction","title":"<code>cadwork.division_zone_direction</code>","text":""},{"location":"documentation/enums/#cadwork.division_zone_direction.division_zone_direction","title":"<code> division_zone_direction            (IntEnum)         </code>","text":"<p>division zone direction</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cadwork.division_zone_direction.positive\npositive\n</code></pre> Source code in <code>cadwork\\division_zone_direction.py</code> <pre><code>@unique\nclass division_zone_direction(IntEnum):\n    \"\"\"division zone direction\n\n    Examples:\n        &gt;&gt;&gt; cadwork.division_zone_direction.positive\n        positive\n\n    Args:\n        positive = 1\n        negative = 2\n        no_direction = 3\n\n    \"\"\"\n    positive = 1\n    negative = 2\n    no_direction = 3\n\n    def __int__(self) -&gt; int:\n        return self.value\n</code></pre>"},{"location":"documentation/enums/#cadwork.element_grouping_type","title":"<code>cadwork.element_grouping_type</code>","text":""},{"location":"documentation/enums/#cadwork.element_grouping_type.element_grouping_type","title":"<code> element_grouping_type            (IntEnum)         </code>","text":"<p>element grouping type</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cadwork.element_grouping_type.group\ngroup\n</code></pre> Source code in <code>cadwork\\element_grouping_type.py</code> <pre><code>@unique\nclass element_grouping_type(IntEnum):\n    \"\"\"element grouping type\n\n    Examples:\n        &gt;&gt;&gt; cadwork.element_grouping_type.group\n        group\n\n    Args:\n        group = 1\n        subgroup = 2\n        _none = 3\n\n    \"\"\"\n    group = 1\n    subgroup = 2\n    _none = 3\n\n    def __int__(self) -&gt; int:\n        return self.value\n</code></pre>"},{"location":"documentation/enums/#f-keys","title":"F-Keys","text":""},{"location":"documentation/enums/#cadwork.shortcut_key","title":"<code>cadwork.shortcut_key</code>","text":""},{"location":"documentation/enums/#cadwork.shortcut_key.shortcut_key","title":"<code> shortcut_key            (IntEnum)         </code>","text":"<p>shortcut key</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cadwork.shortcut_key.F1\nF1\n</code></pre> Source code in <code>cadwork\\shortcut_key.py</code> <pre><code>@unique\nclass shortcut_key(IntEnum):\n    \"\"\"shortcut key\n\n    Examples:\n        &gt;&gt;&gt; cadwork.shortcut_key.F1\n        F1\n\n    Args:\n        F1 = 1\n        F2 = 2\n        F3 = 3\n        F4 = 4\n        F5 = 5\n        F6 = 6\n        F7 = 7\n        F8 = 8\n        F9 = 9\n        F10 = 10\n        F11 = 11\n        F12 = 12\n\n    \"\"\"\n    F1 = 1\n    F2 = 2\n    F3 = 3\n    F4 = 4\n    F5 = 5\n    F6 = 6\n    F7 = 7\n    F8 = 8\n    F9 = 9\n    F10 = 10\n    F11 = 11\n    F12 = 12\n\n    def __int__(self) -&gt; int:\n        return self.value\n</code></pre>"},{"location":"documentation/enums/#cadwork.shortcut_key_modifier","title":"<code>cadwork.shortcut_key_modifier</code>","text":""},{"location":"documentation/enums/#cadwork.shortcut_key_modifier.shortcut_key_modifier","title":"<code> shortcut_key_modifier            (IntEnum)         </code>","text":"<p>shortcut key modifier</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cadwork.shortcut_key_modifier.no_modifier\nno_modifier\n</code></pre> Source code in <code>cadwork\\shortcut_key_modifier.py</code> <pre><code>@unique\nclass shortcut_key_modifier(IntEnum):\n    \"\"\"shortcut key modifier\n\n    Examples:\n        &gt;&gt;&gt; cadwork.shortcut_key_modifier.no_modifier\n        no_modifier\n\n    Args:\n        no_modifier = 0\n        ctrl = 2\n        shift = 1\n        alt = 3\n\n    \"\"\"\n    no_modifier = 0\n    ctrl = 2\n    shift = 1\n    alt = 3\n\n    def __int__(self) -&gt; int:\n        return self.value\n</code></pre>"},{"location":"documentation/enums/#machines","title":"Machines","text":""},{"location":"documentation/enums/#cadwork.btl_version","title":"<code>cadwork.btl_version</code>","text":""},{"location":"documentation/enums/#cadwork.btl_version.btl_version","title":"<code> btl_version            (IntEnum)         </code>","text":"<p>btl version</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cadwork.btl_version.btl_1_0\nbtl_1_0\n</code></pre> Source code in <code>cadwork\\btl_version.py</code> <pre><code>@unique\nclass btl_version(IntEnum):\n    \"\"\"btl version\n\n    Examples:\n        &gt;&gt;&gt; cadwork.btl_version.btl_1_0\n        btl_1_0\n\n    Args:\n        btl_1_0 = 110\n        btl_1_1 = 111\n        btl_1_2 = 112\n        btl_1_3 = 113\n        btl_1_4 = 114\n        btl_1_5 = 115\n        btl_1_6 = 116\n        btl_10_0 = 100\n        btl_10_1 = 101\n        btl_10_2 = 102\n        btl_10_3 = 103\n        btl_10_4 = 104\n        btl_10_5 = 105\n        btl_10_6 = 106\n        btlx_1_0 = 110\n        btlx_1_1 = 111\n        btlx_2_0 = 120\n        btlx_2_1 = 121\n        btlx_2_2 = 122\n\n    \"\"\"\n    # btl_1_0 = 110\n    # btl_1_1 = 111\n    btl_1_2 = 112\n    btl_1_3 = 113\n    btl_1_4 = 114\n    btl_1_5 = 115\n    btl_1_6 = 116\n    btl_10_0 = 100\n    btl_10_1 = 101\n    btl_10_2 = 102\n    btl_10_3 = 103\n    btl_10_4 = 104\n    btl_10_5 = 105\n    btl_10_6 = 106\n    btlx_1_0 = 110\n    btlx_1_1 = 111\n    btlx_2_0 = 120\n    btlx_2_1 = 121\n    btlx_2_2 = 122\n\n    def __int__(self) -&gt; int:\n        return self.value\n</code></pre>"},{"location":"documentation/enums/#cadwork.hundegger_machine_type","title":"<code>cadwork.hundegger_machine_type</code>","text":""},{"location":"documentation/enums/#cadwork.hundegger_machine_type.hundegger_machine_type","title":"<code> hundegger_machine_type            (IntEnum)         </code>","text":"<p>hundegger machine type</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cadwork.hundegger_machine_type.p8_10\np8_10\n</code></pre> Source code in <code>cadwork\\hundegger_machine_type.py</code> <pre><code>@unique\nclass hundegger_machine_type(IntEnum):\n    \"\"\"hundegger machine type\n\n    Examples:\n        &gt;&gt;&gt; cadwork.hundegger_machine_type.p8_10\n        p8_10\n\n    Args:\n        p8_10 = 1\n        k1 = 2\n        k2 = 3\n        k2_cambium = 4\n        k2_uf_5 = 5\n        k2_uf_5_cambium = 6\n        speedcut = 7\n        pba = 8\n        pba_bvx = 9\n        pba_bvx_cambium = 10\n        spm = 12\n        spm_cambium = 13\n        robot_drive = 14\n        turbo_drive = 15\n\n    \"\"\"\n    p8_10 = 1\n    k1 = 2\n    k2 = 3\n    k2_cambium = 4\n    k2_uf_5 = 5\n    k2_uf_5_cambium = 6\n    speedcut = 7\n    pba = 8\n    pba_bvx = 9\n    pba_bvx_cambium = 10\n    spm = 12\n    spm_cambium = 13\n    robot_drive = 14\n    turbo_drive = 15\n\n    def __int__(self) -&gt; int:\n        return self.value\n</code></pre>"},{"location":"documentation/enums/#cadwork.weinmann_mfb_version","title":"<code>cadwork.weinmann_mfb_version</code>","text":""},{"location":"documentation/enums/#cadwork.weinmann_mfb_version.weinmann_mfb_version","title":"<code> weinmann_mfb_version            (IntEnum)         </code>","text":"<p>weinmann mfb version</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cadwork.weinmann_mfb_version.wup_2_0\nwup_2_0\n</code></pre> Source code in <code>cadwork\\weinmann_mfb_version.py</code> <pre><code>@unique\nclass weinmann_mfb_version(IntEnum):\n    \"\"\"weinmann mfb version\n\n    Examples:\n        &gt;&gt;&gt; cadwork.weinmann_mfb_version.wup_2_0\n        wup_2_0\n\n    Args:\n        wup_2_0 = 20\n        wup_3_1 = 31\n        wup_3_2 = 32\n        wup_3_3 = 33\n        wup_3_4 = 34\n\n    \"\"\"\n    wup_2_0 = 20\n    wup_3_1 = 31\n    wup_3_2 = 32\n    wup_3_3 = 33\n    wup_3_4 = 34\n\n    def __int__(self) -&gt; int:\n        return self.value\n</code></pre>"},{"location":"documentation/enums/#ifc-aggregation-behaviour","title":"IFC Aggregation Behaviour","text":""},{"location":"documentation/enums/#cadwork.ifc_element_combine_behaviour","title":"<code>cadwork.ifc_element_combine_behaviour</code>","text":""},{"location":"documentation/enums/#cadwork.ifc_element_combine_behaviour.ifc_element_combine_behaviour","title":"<code> ifc_element_combine_behaviour            (IntEnum)         </code>","text":"<p>ifc element combine behaviour</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cadwork.ifc_element_combine_behaviour.element_module\nelement_module\n</code></pre> Source code in <code>cadwork\\ifc_element_combine_behaviour.py</code> <pre><code>@unique\nclass ifc_element_combine_behaviour(IntEnum):\n    \"\"\"ifc element combine behaviour\n\n    Examples:\n        &gt;&gt;&gt; cadwork.ifc_element_combine_behaviour.element_module\n        element_module\n\n    Args:\n        element_module = 0\n        element_assembly = 1\n\n    \"\"\"\n    element_module = 0\n    element_assembly = 1\n\n    def __int__(self) -&gt; int:\n        return self.value\n</code></pre>"},{"location":"documentation/extended_settings/","title":"extended_settings","text":"<p>rendering: show_root_heading: false show_source: true</p>"},{"location":"documentation/extended_settings/#cadwork.extended_settings","title":"<code>cadwork.extended_settings</code>","text":""},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings","title":"<code> extended_settings        </code>","text":"Source code in <code>cadwork\\extended_settings.py</code> <pre><code>class extended_settings:\n    def getPieceByPieceExportWithDimensions(self) -&gt; bool:\n        \"\"\"getPieceByPieceExportWithDimensions\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def get_piece_by_piece_export_with_dimensions(self) -&gt; bool:\n        \"\"\"get_piece_by_piece_export_with_dimensions\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def getGroupExport(self) -&gt; bool:\n        \"\"\"getGroupExport\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def get_group_export(self) -&gt; bool:\n        \"\"\"get_group_export\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setMFBExport(self, value: bool) -&gt; None:\n        \"\"\"setMFBExport\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_mfb_export(self, value: bool) -&gt; None:\n        \"\"\"set_mfb_export\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def setWallExport(self, value: bool) -&gt; None:\n        \"\"\"setWallExport\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_wall_export(self, value: bool) -&gt; None:\n        \"\"\"set_wall_export\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def setGroupExport(self, value: bool) -&gt; None:\n        \"\"\"setGroupExport\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_group_export(self, value: bool) -&gt; None:\n        \"\"\"set_group_export\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def setBTLWallExport(self, value: bool) -&gt; None:\n        \"\"\"setBTLWallExport\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_btl_wall_export(self, value: bool) -&gt; None:\n        \"\"\"set_btl_wall_export\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def getLogHomeExport(self) -&gt; bool:\n        \"\"\"getLogHomeExport\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def get_log_home_export(self) -&gt; bool:\n        \"\"\"get_log_home_export\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setLogHomeExport(self, value: bool) -&gt; None:\n        \"\"\"setLogHomeExport\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_log_home_export(self, value: bool) -&gt; None:\n        \"\"\"set_log_home_export\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def setPieceByPieceExportWithoutDimensions(self, value: bool) -&gt; None:\n        \"\"\"setPieceByPieceExportWithoutDimensions\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_piece_by_piece_export_without_dimensions(self, value: bool) -&gt; None:\n        \"\"\"set_piece_by_piece_export_without_dimensions\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def setOutline(self, value: bool) -&gt; None:\n        \"\"\"setOutline\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_outline(self, value: bool) -&gt; None:\n        \"\"\"set_outline\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def getIgnoreForConnectorAxis(self) -&gt; bool:\n        \"\"\"getIgnoreForConnectorAxis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def get_ignore_for_connector_axis(self) -&gt; bool:\n        \"\"\"get_ignore_for_connector_axis\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setChiefElement(self, value: bool) -&gt; None:\n        \"\"\"setChiefElement\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_chief_element(self, value: bool) -&gt; None:\n        \"\"\"set_chief_element\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def getChiefElement(self) -&gt; bool:\n        \"\"\"getChiefElement\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def get_chief_element(self) -&gt; bool:\n        \"\"\"get_chief_element\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def getMFBExport(self) -&gt; bool:\n        \"\"\"getMFBExport\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def get_mfb_export(self) -&gt; bool:\n        \"\"\"get_mfb_export\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def getPieceByPieceExportWithoutDimensions(self) -&gt; bool:\n        \"\"\"getPieceByPieceExportWithoutDimensions\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def get_piece_by_piece_export_without_dimensions(self) -&gt; bool:\n        \"\"\"get_piece_by_piece_export_without_dimensions\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def getLogMacroExport(self) -&gt; bool:\n        \"\"\"getLogMacroExport\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def get_log_macro_export(self) -&gt; bool:\n        \"\"\"get_log_macro_export\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def getWallExport(self) -&gt; bool:\n        \"\"\"getWallExport\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def get_wall_export(self) -&gt; bool:\n        \"\"\"get_wall_export\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def getBTLWallExport(self) -&gt; bool:\n        \"\"\"getBTLWallExport\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def get_btl_wall_export(self) -&gt; bool:\n        \"\"\"get_btl_wall_export\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setPieceByPieceExportWithDimensions(self, value: bool) -&gt; None:\n        \"\"\"setPieceByPieceExportWithDimensions\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_piece_by_piece_export_with_dimensions(self, value: bool) -&gt; None:\n        \"\"\"set_piece_by_piece_export_with_dimensions\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def setIgnoreForConnectorAxis(self, value: bool) -&gt; None:\n        \"\"\"setIgnoreForConnectorAxis\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ignore_for_connector_axis(self, value: bool) -&gt; None:\n        \"\"\"set_ignore_for_connector_axis\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def getOutline(self) -&gt; bool:\n        \"\"\"getOutline\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def get_outline(self) -&gt; bool:\n        \"\"\"get_outline\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.getBTLWallExport","title":"<code>getBTLWallExport(self)</code>","text":"<p>getBTLWallExport</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def getBTLWallExport(self) -&gt; bool:\n    \"\"\"getBTLWallExport\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.getChiefElement","title":"<code>getChiefElement(self)</code>","text":"<p>getChiefElement</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def getChiefElement(self) -&gt; bool:\n    \"\"\"getChiefElement\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.getGroupExport","title":"<code>getGroupExport(self)</code>","text":"<p>getGroupExport</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def getGroupExport(self) -&gt; bool:\n    \"\"\"getGroupExport\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.getIgnoreForConnectorAxis","title":"<code>getIgnoreForConnectorAxis(self)</code>","text":"<p>getIgnoreForConnectorAxis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def getIgnoreForConnectorAxis(self) -&gt; bool:\n    \"\"\"getIgnoreForConnectorAxis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.getLogHomeExport","title":"<code>getLogHomeExport(self)</code>","text":"<p>getLogHomeExport</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def getLogHomeExport(self) -&gt; bool:\n    \"\"\"getLogHomeExport\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.getLogMacroExport","title":"<code>getLogMacroExport(self)</code>","text":"<p>getLogMacroExport</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def getLogMacroExport(self) -&gt; bool:\n    \"\"\"getLogMacroExport\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.getMFBExport","title":"<code>getMFBExport(self)</code>","text":"<p>getMFBExport</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def getMFBExport(self) -&gt; bool:\n    \"\"\"getMFBExport\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.getOutline","title":"<code>getOutline(self)</code>","text":"<p>getOutline</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def getOutline(self) -&gt; bool:\n    \"\"\"getOutline\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.getPieceByPieceExportWithDimensions","title":"<code>getPieceByPieceExportWithDimensions(self)</code>","text":"<p>getPieceByPieceExportWithDimensions</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def getPieceByPieceExportWithDimensions(self) -&gt; bool:\n    \"\"\"getPieceByPieceExportWithDimensions\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.getPieceByPieceExportWithoutDimensions","title":"<code>getPieceByPieceExportWithoutDimensions(self)</code>","text":"<p>getPieceByPieceExportWithoutDimensions</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def getPieceByPieceExportWithoutDimensions(self) -&gt; bool:\n    \"\"\"getPieceByPieceExportWithoutDimensions\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.getWallExport","title":"<code>getWallExport(self)</code>","text":"<p>getWallExport</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def getWallExport(self) -&gt; bool:\n    \"\"\"getWallExport\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.get_btl_wall_export","title":"<code>get_btl_wall_export(self)</code>","text":"<p>get_btl_wall_export</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def get_btl_wall_export(self) -&gt; bool:\n    \"\"\"get_btl_wall_export\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.get_chief_element","title":"<code>get_chief_element(self)</code>","text":"<p>get_chief_element</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def get_chief_element(self) -&gt; bool:\n    \"\"\"get_chief_element\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.get_group_export","title":"<code>get_group_export(self)</code>","text":"<p>get_group_export</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def get_group_export(self) -&gt; bool:\n    \"\"\"get_group_export\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.get_ignore_for_connector_axis","title":"<code>get_ignore_for_connector_axis(self)</code>","text":"<p>get_ignore_for_connector_axis</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def get_ignore_for_connector_axis(self) -&gt; bool:\n    \"\"\"get_ignore_for_connector_axis\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.get_log_home_export","title":"<code>get_log_home_export(self)</code>","text":"<p>get_log_home_export</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def get_log_home_export(self) -&gt; bool:\n    \"\"\"get_log_home_export\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.get_log_macro_export","title":"<code>get_log_macro_export(self)</code>","text":"<p>get_log_macro_export</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def get_log_macro_export(self) -&gt; bool:\n    \"\"\"get_log_macro_export\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.get_mfb_export","title":"<code>get_mfb_export(self)</code>","text":"<p>get_mfb_export</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def get_mfb_export(self) -&gt; bool:\n    \"\"\"get_mfb_export\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.get_outline","title":"<code>get_outline(self)</code>","text":"<p>get_outline</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def get_outline(self) -&gt; bool:\n    \"\"\"get_outline\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.get_piece_by_piece_export_with_dimensions","title":"<code>get_piece_by_piece_export_with_dimensions(self)</code>","text":"<p>get_piece_by_piece_export_with_dimensions</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def get_piece_by_piece_export_with_dimensions(self) -&gt; bool:\n    \"\"\"get_piece_by_piece_export_with_dimensions\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.get_piece_by_piece_export_without_dimensions","title":"<code>get_piece_by_piece_export_without_dimensions(self)</code>","text":"<p>get_piece_by_piece_export_without_dimensions</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def get_piece_by_piece_export_without_dimensions(self) -&gt; bool:\n    \"\"\"get_piece_by_piece_export_without_dimensions\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.get_wall_export","title":"<code>get_wall_export(self)</code>","text":"<p>get_wall_export</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def get_wall_export(self) -&gt; bool:\n    \"\"\"get_wall_export\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.setBTLWallExport","title":"<code>setBTLWallExport(self, value)</code>","text":"<p>setBTLWallExport</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def setBTLWallExport(self, value: bool) -&gt; None:\n    \"\"\"setBTLWallExport\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.setChiefElement","title":"<code>setChiefElement(self, value)</code>","text":"<p>setChiefElement</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def setChiefElement(self, value: bool) -&gt; None:\n    \"\"\"setChiefElement\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.setGroupExport","title":"<code>setGroupExport(self, value)</code>","text":"<p>setGroupExport</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def setGroupExport(self, value: bool) -&gt; None:\n    \"\"\"setGroupExport\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.setIgnoreForConnectorAxis","title":"<code>setIgnoreForConnectorAxis(self, value)</code>","text":"<p>setIgnoreForConnectorAxis</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def setIgnoreForConnectorAxis(self, value: bool) -&gt; None:\n    \"\"\"setIgnoreForConnectorAxis\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.setLogHomeExport","title":"<code>setLogHomeExport(self, value)</code>","text":"<p>setLogHomeExport</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def setLogHomeExport(self, value: bool) -&gt; None:\n    \"\"\"setLogHomeExport\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.setMFBExport","title":"<code>setMFBExport(self, value)</code>","text":"<p>setMFBExport</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def setMFBExport(self, value: bool) -&gt; None:\n    \"\"\"setMFBExport\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.setOutline","title":"<code>setOutline(self, value)</code>","text":"<p>setOutline</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def setOutline(self, value: bool) -&gt; None:\n    \"\"\"setOutline\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.setPieceByPieceExportWithDimensions","title":"<code>setPieceByPieceExportWithDimensions(self, value)</code>","text":"<p>setPieceByPieceExportWithDimensions</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def setPieceByPieceExportWithDimensions(self, value: bool) -&gt; None:\n    \"\"\"setPieceByPieceExportWithDimensions\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.setPieceByPieceExportWithoutDimensions","title":"<code>setPieceByPieceExportWithoutDimensions(self, value)</code>","text":"<p>setPieceByPieceExportWithoutDimensions</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def setPieceByPieceExportWithoutDimensions(self, value: bool) -&gt; None:\n    \"\"\"setPieceByPieceExportWithoutDimensions\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.setWallExport","title":"<code>setWallExport(self, value)</code>","text":"<p>setWallExport</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def setWallExport(self, value: bool) -&gt; None:\n    \"\"\"setWallExport\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.set_btl_wall_export","title":"<code>set_btl_wall_export(self, value)</code>","text":"<p>set_btl_wall_export</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def set_btl_wall_export(self, value: bool) -&gt; None:\n    \"\"\"set_btl_wall_export\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.set_chief_element","title":"<code>set_chief_element(self, value)</code>","text":"<p>set_chief_element</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def set_chief_element(self, value: bool) -&gt; None:\n    \"\"\"set_chief_element\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.set_group_export","title":"<code>set_group_export(self, value)</code>","text":"<p>set_group_export</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def set_group_export(self, value: bool) -&gt; None:\n    \"\"\"set_group_export\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.set_ignore_for_connector_axis","title":"<code>set_ignore_for_connector_axis(self, value)</code>","text":"<p>set_ignore_for_connector_axis</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def set_ignore_for_connector_axis(self, value: bool) -&gt; None:\n    \"\"\"set_ignore_for_connector_axis\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.set_log_home_export","title":"<code>set_log_home_export(self, value)</code>","text":"<p>set_log_home_export</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def set_log_home_export(self, value: bool) -&gt; None:\n    \"\"\"set_log_home_export\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.set_mfb_export","title":"<code>set_mfb_export(self, value)</code>","text":"<p>set_mfb_export</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def set_mfb_export(self, value: bool) -&gt; None:\n    \"\"\"set_mfb_export\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.set_outline","title":"<code>set_outline(self, value)</code>","text":"<p>set_outline</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def set_outline(self, value: bool) -&gt; None:\n    \"\"\"set_outline\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.set_piece_by_piece_export_with_dimensions","title":"<code>set_piece_by_piece_export_with_dimensions(self, value)</code>","text":"<p>set_piece_by_piece_export_with_dimensions</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def set_piece_by_piece_export_with_dimensions(self, value: bool) -&gt; None:\n    \"\"\"set_piece_by_piece_export_with_dimensions\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.set_piece_by_piece_export_without_dimensions","title":"<code>set_piece_by_piece_export_without_dimensions(self, value)</code>","text":"<p>set_piece_by_piece_export_without_dimensions</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def set_piece_by_piece_export_without_dimensions(self, value: bool) -&gt; None:\n    \"\"\"set_piece_by_piece_export_without_dimensions\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/extended_settings/#cadwork.extended_settings.extended_settings.set_wall_export","title":"<code>set_wall_export(self, value)</code>","text":"<p>set_wall_export</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\extended_settings.py</code> <pre><code>def set_wall_export(self, value: bool) -&gt; None:\n    \"\"\"set_wall_export\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/","title":"File Controller","text":""},{"location":"documentation/file_controller/#file_controller","title":"<code>file_controller</code>  <code>special</code>","text":""},{"location":"documentation/file_controller/#file_controller.clear_errors","title":"<code>clear_errors()</code>","text":"<p>clear errors</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def clear_errors() -&gt; None:\n    \"\"\"clear errors\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.export_3d_file","title":"<code>export_3d_file(element_id_list, file_path)</code>","text":"<p>Exports a 3D file </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>bool</code> <p>did operation succeed (bool)</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def export_3d_file(element_id_list: List[int], file_path: str) -&gt; bool:\n    \"\"\"Exports a 3D file \n    Args:\n        element_id_list ( List[int]): element_id_list\n        file_path ( str): file_path\n\n    Returns:\n        did operation succeed (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.export_3dc_file","title":"<code>export_3dc_file(element_id_list, file_path)</code>","text":"<p>Exports a 3D file </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def export_3dc_file(element_id_list: List[int], file_path: str) -&gt; None:\n    \"\"\"Exports a 3D file \n    Args:\n        element_id_list ( List[int]): element_id_list\n        file_path ( str): file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.export_btl_file_for_nesting","title":"<code>export_btl_file_for_nesting(file_path)</code>","text":"<p>Exports a BTL file for nesting </p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def export_btl_file_for_nesting(file_path: str) -&gt; None:\n    \"\"\"Exports a BTL file for nesting \n    Args:\n        file_path ( str): file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.export_fbx_file","title":"<code>export_fbx_file(elements, file_path, fbx_format)</code>","text":"<p>Exports a FBX file </p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <code>fbx_format</code> <code> int</code> <p>fbx_format</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def export_fbx_file(elements: List[int], file_path: str, fbx_format: int) -&gt; None:\n    \"\"\"Exports a FBX file \n    Args:\n        elements ( List[int]): elements\n        file_path ( str): file_path\n        fbx_format ( int): fbx_format\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.export_glb_file","title":"<code>export_glb_file(elements, file_path)</code>","text":"<p>exports a GLB File </p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def export_glb_file(elements: List[int], file_path: str) -&gt; None:\n    \"\"\"exports a GLB File \n    Args:\n        elements ( List[int]): elements\n        file_path ( str): file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.export_obj_file","title":"<code>export_obj_file(elements, file_path)</code>","text":"<p>Exports a OBJ file </p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def export_obj_file(elements: List[int], file_path: str) -&gt; None:\n    \"\"\"Exports a OBJ file \n    Args:\n        elements ( List[int]): elements\n        file_path ( str): file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.export_rhino_file","title":"<code>export_rhino_file(element_id_list, file_path, version, use_default_assignment, write_standard_attributes)</code>","text":"<p>Exports a 3dm rhino file </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <code>version</code> <code> int</code> <p>version</p> required <code>use_default_assignment</code> <code> bool</code> <p>use_default_assignment</p> required <code>write_standard_attributes</code> <code> bool</code> <p>write_standard_attributes</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def export_rhino_file(element_id_list: List[int], file_path: str, version: int, use_default_assignment: bool, write_standard_attributes: bool) -&gt; None:\n    \"\"\"Exports a 3dm rhino file \n    Args:\n        element_id_list ( List[int]): element_id_list\n        file_path ( str): file_path\n        version ( int): version\n        use_default_assignment ( bool): use_default_assignment\n        write_standard_attributes ( bool): write_standard_attributes\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.export_rhino_file_with_options","title":"<code>export_rhino_file_with_options(a0, a1, a2, a3, a4, a5)</code>","text":"<p>export rhino file with options</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <code>a1</code> <code> str</code> <p>a1</p> required <code>a2</code> <code> int</code> <p>a2</p> required <code>a3</code> <code> bool</code> <p>a3</p> required <code>a4</code> <code> bool</code> <p>a4</p> required <code>a5</code> <code> rhino_options</code> <p>a5</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def export_rhino_file_with_options(a0: List[int], a1: str, a2: int, a3: bool, a4: bool, a5: rhino_options) -&gt; None:\n    \"\"\"export rhino file with options\n    Args:\n        a0 ( List[int]): a0\n        a1 ( str): a1\n        a2 ( int): a2\n        a3 ( bool): a3\n        a4 ( bool): a4\n        a5 ( rhino_options): a5\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.export_sat_file","title":"<code>export_sat_file(elements, file_path, scale_factor, binary, version)</code>","text":"<p>exports a SAT File </p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <code>scale_factor</code> <code> float</code> <p>scale_factor</p> required <code>binary</code> <code> bool</code> <p>binary</p> required <code>version</code> <code> int</code> <p>version</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def export_sat_file(elements: List[int], file_path: str, scale_factor: float, binary: bool, version: int) -&gt; None:\n    \"\"\"exports a SAT File \n    Args:\n        elements ( List[int]): elements\n        file_path ( str): file_path\n        scale_factor ( float): scale_factor\n        binary ( bool): binary\n        version ( int): version\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.export_step_file","title":"<code>export_step_file(element_list, file_path, scale_factor, version, text_mode)</code>","text":"<p>Exports a STEP file </p> <p>Parameters:</p> Name Type Description Default <code>element_list</code> <code> List[int]</code> <p>element_list</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <code>scale_factor</code> <code> float</code> <p>scale_factor</p> required <code>version</code> <code> int</code> <p>version</p> required <code>text_mode</code> <code> bool</code> <p>text_mode</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def export_step_file(element_list: List[int], file_path: str, scale_factor: float, version: int, text_mode: bool) -&gt; None:\n    \"\"\"Exports a STEP file \n    Args:\n        element_list ( List[int]): element_list\n        file_path ( str): file_path\n        scale_factor ( float): scale_factor\n        version ( int): version\n        text_mode ( bool): text_mode\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.export_stl_file","title":"<code>export_stl_file(element_id_list, file_path)</code>","text":"<p>Exports an STL file </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def export_stl_file(element_id_list: List[int], file_path: str) -&gt; None:\n    \"\"\"Exports an STL file \n    Args:\n        element_id_list ( List[int]): element_id_list\n        file_path ( str): file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.export_webgl","title":"<code>export_webgl(element_id_list, file_path)</code>","text":"<p>Exports a WebGL file </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>bool</code> <p>did operation succeed (bool)</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def export_webgl(element_id_list: List[int], file_path: str) -&gt; bool:\n    \"\"\"Exports a WebGL file \n    Args:\n        element_id_list ( List[int]): element_id_list\n        file_path ( str): file_path\n\n    Returns:\n        did operation succeed (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.get_blum_export_path","title":"<code>get_blum_export_path()</code>","text":"<p>get blum export path</p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def get_blum_export_path() -&gt; str:\n    \"\"\"get blum export path\n    Args:\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.get_last_error","title":"<code>get_last_error(error_code)</code>","text":"<p>Gets the last error </p> <p>Parameters:</p> Name Type Description Default <code>error_code</code> <code> int</code> <p>error_code</p> required <p>Returns:</p> Type Description <code>str</code> <p>error string (str)</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def get_last_error(error_code: int) -&gt; str:\n    \"\"\"Gets the last error \n    Args:\n        error_code ( int): error_code\n\n    Returns:\n        error string (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.import_3dc_file","title":"<code>import_3dc_file(file_path)</code>","text":"<p>Imports a 3DC file </p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>imported element ID list (List[int])</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def import_3dc_file(file_path: str) -&gt; List[int]:\n    \"\"\"Imports a 3DC file \n    Args:\n        file_path ( str): file_path\n\n    Returns:\n        imported element ID list (List[int])\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.import_3dc_file_with_glide","title":"<code>import_3dc_file_with_glide(file_path)</code>","text":"<p>Imports a 3DC file with glide </p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>imported element ID list (List[int])</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def import_3dc_file_with_glide(file_path: str) -&gt; List[int]:\n    \"\"\"Imports a 3DC file with glide \n    Args:\n        file_path ( str): file_path\n\n    Returns:\n        imported element ID list (List[int])\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.import_3dz_file","title":"<code>import_3dz_file(file_path)</code>","text":"<p>Imports a 3DZ file </p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def import_3dz_file(file_path: str) -&gt; None:\n    \"\"\"Imports a 3DZ file \n    Args:\n        file_path ( str): file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.import_btl_file","title":"<code>import_btl_file(file_path)</code>","text":"<p>Imports a BTL file </p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def import_btl_file(file_path: str) -&gt; None:\n    \"\"\"Imports a BTL file \n    Args:\n        file_path ( str): file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.import_btl_file_for_nesting","title":"<code>import_btl_file_for_nesting(file_path)</code>","text":"<p>Imports a BTL file for nesting </p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def import_btl_file_for_nesting(file_path: str) -&gt; None:\n    \"\"\"Imports a BTL file for nesting \n    Args:\n        file_path ( str): file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.import_bxf_file","title":"<code>import_bxf_file(file_path, insert_position)</code>","text":"<p>import bxf file</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <code>insert_position</code> <code> point_3d</code> <p>insert_position</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def import_bxf_file(file_path: str, insert_position: point_3d) -&gt; List[int]:\n    \"\"\"import bxf file\n    Args:\n        file_path ( str): file_path\n        insert_position ( point_3d): insert_position\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.import_element_light","title":"<code>import_element_light(a0, a1)</code>","text":"<p>import element light</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> str</code> <p>a0</p> required <code>a1</code> <code> point_3d</code> <p>a1</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def import_element_light(a0: str, a1: point_3d) -&gt; int:\n    \"\"\"import element light\n    Args:\n        a0 ( str): a0\n        a1 ( point_3d): a1\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.import_rhino_file","title":"<code>import_rhino_file(file_path, without_dialog)</code>","text":"<p>Imports a Rhino file </p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <code>without_dialog</code> <code> bool</code> <p>without_dialog</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>imported element ID list (List[int])</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def import_rhino_file(file_path: str, without_dialog: bool) -&gt; List[int]:\n    \"\"\"Imports a Rhino file \n    Args:\n        file_path ( str): file_path\n        without_dialog ( bool): without_dialog\n\n    Returns:\n        imported element ID list (List[int])\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.import_sat_file","title":"<code>import_sat_file(file_path, scale_factor, binary)</code>","text":"<p>Imports an SAT file </p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <code>scale_factor</code> <code> float</code> <p>scale_factor</p> required <code>binary</code> <code> bool</code> <p>binary</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>imported element ID list (List[int])</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def import_sat_file(file_path: str, scale_factor: float, binary: bool) -&gt; List[int]:\n    \"\"\"Imports an SAT file \n    Args:\n        file_path ( str): file_path\n        scale_factor ( float): scale_factor\n        binary ( bool): binary\n\n    Returns:\n        imported element ID list (List[int])\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.import_sat_file_silently","title":"<code>import_sat_file_silently(file_path, scale_factor, binary)</code>","text":"<p>Imports a SAT File without messages </p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <code>scale_factor</code> <code> float</code> <p>scale_factor</p> required <code>binary</code> <code> bool</code> <p>binary</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def import_sat_file_silently(file_path: str, scale_factor: float, binary: bool) -&gt; List[int]:\n    \"\"\"Imports a SAT File without messages \n    Args:\n        file_path ( str): file_path\n        scale_factor ( float): scale_factor\n        binary ( bool): binary\n\n    Returns:\n        List[int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.import_step_file","title":"<code>import_step_file(file_path, scale_factor)</code>","text":"<p>Imports a STEP file </p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <code>scale_factor</code> <code> float</code> <p>scale_factor</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>imported element ID list (List[int])</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def import_step_file(file_path: str, scale_factor: float) -&gt; List[int]:\n    \"\"\"Imports a STEP file \n    Args:\n        file_path ( str): file_path\n        scale_factor ( float): scale_factor\n\n    Returns:\n        imported element ID list (List[int])\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.import_step_file_with_message_option","title":"<code>import_step_file_with_message_option(file_path, scale_factor, hide_message)</code>","text":"<p>Imports a STEP file </p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <code>scale_factor</code> <code> float</code> <p>scale_factor</p> required <code>hide_message</code> <code> bool</code> <p>hide_message</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>imported element ID list (List[int])</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def import_step_file_with_message_option(file_path: str, scale_factor: float, hide_message: bool) -&gt; List[int]:\n    \"\"\"Imports a STEP file \n    Args:\n        file_path ( str): file_path\n        scale_factor ( float): scale_factor\n        hide_message ( bool): hide_message\n\n    Returns:\n        imported element ID list (List[int])\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.import_variant_file","title":"<code>import_variant_file(file_path, insert_position)</code>","text":"<p>imports a variant by .val-File </p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <code>insert_position</code> <code> point_3d</code> <p>insert_position</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>imported element ID list (List[int])</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def import_variant_file(file_path: str, insert_position: point_3d) -&gt; List[int]:\n    \"\"\"imports a variant by .val-File \n    Args:\n        file_path ( str): file_path\n        insert_position ( point_3d): insert_position\n\n    Returns:\n        imported element ID list (List[int])\n    \"\"\"\n</code></pre>"},{"location":"documentation/file_controller/#file_controller.set_blum_export_path","title":"<code>set_blum_export_path(path)</code>","text":"<p>set blum export path</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code> str</code> <p>path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>file_controller\\__init__.py</code> <pre><code>def set_blum_export_path(path: str) -&gt; None:\n    \"\"\"set blum export path\n    Args:\n        path ( str): path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/","title":"Geometry Controller","text":""},{"location":"documentation/geometry_controller/#geometry_controller","title":"<code>geometry_controller</code>  <code>special</code>","text":""},{"location":"documentation/geometry_controller/#geometry_controller.apply_global_scale","title":"<code>apply_global_scale(element_id_list, scale, origin)</code>","text":"<p>Applies a global scale to element </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>scale</code> <code> float</code> <p>scale</p> required <code>origin</code> <code> point_3d</code> <p>origin</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def apply_global_scale(element_id_list: List[int], scale: float, origin: point_3d) -&gt; None:\n    \"\"\"Applies a global scale to element \n    Args:\n        element_id_list ( List[int]): element_id_list\n        scale ( float): scale\n        origin ( point_3d): origin\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.are_facets_coplanar","title":"<code>are_facets_coplanar(a0, a1)</code>","text":"<p>are facets coplanar</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[point_3d]</code> <p>a0</p> required <code>a1</code> <code> List[point_3d]</code> <p>a1</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def are_facets_coplanar(a0: List[point_3d], a1: List[point_3d]) -&gt; bool:\n    \"\"\"are facets coplanar\n    Args:\n        a0 ( List[point_3d]): a0\n        a1 ( List[point_3d]): a1\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.auto_regenerate_axes","title":"<code>auto_regenerate_axes(element_id_list)</code>","text":"<p>Automatically regenerates axes on element </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def auto_regenerate_axes(element_id_list: List[int]) -&gt; None:\n    \"\"\"Automatically regenerates axes on element \n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.auto_regenerate_axes_silently","title":"<code>auto_regenerate_axes_silently(a0)</code>","text":"<p>auto regenerate axes silently</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def auto_regenerate_axes_silently(a0: List[int]) -&gt; None:\n    \"\"\"auto regenerate axes silently\n    Args:\n        a0 ( List[int]): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.clear_errors","title":"<code>clear_errors()</code>","text":"<p>clear errors</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def clear_errors() -&gt; None:\n    \"\"\"clear errors\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_actual_physical_volume","title":"<code>get_actual_physical_volume(a0)</code>","text":"<p>get actual physical volume</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_actual_physical_volume(a0: int) -&gt; float:\n    \"\"\"get actual physical volume\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_actual_physical_weight","title":"<code>get_actual_physical_weight(a0)</code>","text":"<p>get actual physical weight</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_actual_physical_weight(a0: int) -&gt; float:\n    \"\"\"get actual physical weight\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_area_of_front_face","title":"<code>get_area_of_front_face(element)</code>","text":"<p>Gets the front face are for element </p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code> int</code> <p>element</p> required <p>Returns:</p> Type Description <code>float</code> <p>element front face area (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_area_of_front_face(element: int) -&gt; float:\n    \"\"\"Gets the front face are for element \n    Args:\n        element ( int): element\n\n    Returns:\n        element front face area (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_center_of_gravity","title":"<code>get_center_of_gravity(element_id)</code>","text":"<p>Gets the element center of gravity </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>point_3d</code> <p>element center of gravity (point_3d)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_center_of_gravity(element_id: int) -&gt; point_3d:\n    \"\"\"Gets the element center of gravity \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element center of gravity (point_3d)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_center_of_gravity_for_list","title":"<code>get_center_of_gravity_for_list(elements)</code>","text":"<p>get center of gravity for list</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>point_3d</code> <p>point_3d</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_center_of_gravity_for_list(elements: List[int]) -&gt; point_3d:\n    \"\"\"get center of gravity for list\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        point_3d\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_center_of_gravity_for_list_considering_materials","title":"<code>get_center_of_gravity_for_list_considering_materials(elements)</code>","text":"<p>get center of gravity for list considering materials</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>point_3d</code> <p>point_3d</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_center_of_gravity_for_list_considering_materials(elements: List[int]) -&gt; point_3d:\n    \"\"\"get center of gravity for list considering materials\n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        point_3d\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_cross_correction_negative_height","title":"<code>get_cross_correction_negative_height(element_id)</code>","text":"<p>Gets the element negative height cross correction </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element negative height cross correction (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_cross_correction_negative_height(element_id: int) -&gt; float:\n    \"\"\"Gets the element negative height cross correction \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element negative height cross correction (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_cross_correction_negative_length","title":"<code>get_cross_correction_negative_length(element_id)</code>","text":"<p>Gets the element negative length cross correction </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element negative length cross correction (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_cross_correction_negative_length(element_id: int) -&gt; float:\n    \"\"\"Gets the element negative length cross correction \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element negative length cross correction (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_cross_correction_negative_width","title":"<code>get_cross_correction_negative_width(element_id)</code>","text":"<p>Gets the element negative width cross correction </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element negative width cross correction (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_cross_correction_negative_width(element_id: int) -&gt; float:\n    \"\"\"Gets the element negative width cross correction \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element negative width cross correction (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_cross_correction_positive_height","title":"<code>get_cross_correction_positive_height(element_id)</code>","text":"<p>Gets the element positive height cross correction </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element positive height cross correction (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_cross_correction_positive_height(element_id: int) -&gt; float:\n    \"\"\"Gets the element positive height cross correction \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element positive height cross correction (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_cross_correction_positive_length","title":"<code>get_cross_correction_positive_length(element_id)</code>","text":"<p>Gets the element positive length cross correction </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element positive length cross correction (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_cross_correction_positive_length(element_id: int) -&gt; float:\n    \"\"\"Gets the element positive length cross correction \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element positive length cross correction (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_cross_correction_positive_width","title":"<code>get_cross_correction_positive_width(element_id)</code>","text":"<p>Gets the element positive width cross correction </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element positive width cross correction (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_cross_correction_positive_width(element_id: int) -&gt; float:\n    \"\"\"Gets the element positive width cross correction \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element positive width cross correction (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_door_surface","title":"<code>get_door_surface(elements)</code>","text":"<p>Gets the element door surface </p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>float</code> <p>element door surface (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_door_surface(elements: List[int]) -&gt; float:\n    \"\"\"Gets the element door surface \n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        element door surface (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_drilling_tolerance","title":"<code>get_drilling_tolerance(element)</code>","text":"<p>Gets the drilling tolerance of an axis </p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code> int</code> <p>element</p> required <p>Returns:</p> Type Description <code>float</code> <p>the drilling tolerance (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_drilling_tolerance(element: int) -&gt; float:\n    \"\"\"Gets the drilling tolerance of an axis \n    Args:\n        element ( int): element\n\n    Returns:\n        the drilling tolerance (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_element_facet_count","title":"<code>get_element_facet_count(element_id)</code>","text":"<p>get element facet count</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_element_facet_count(element_id: int) -&gt; int:\n    \"\"\"get element facet count\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_element_facets","title":"<code>get_element_facets(element_id)</code>","text":"<p>Gets the element facets </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>facet_list</code> <p>element facets (facet_list)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_element_facets(element_id: int) -&gt; facet_list:\n    \"\"\"Gets the element facets \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element facets (facet_list)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_element_reference_face_area","title":"<code>get_element_reference_face_area(element_id)</code>","text":"<p>Gets the area of the reference side </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>area(size) of reference face (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_element_reference_face_area(element_id: int) -&gt; float:\n    \"\"\"Gets the area of the reference side \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        area(size) of reference face (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_element_reference_face_vertices","title":"<code>get_element_reference_face_vertices(element_id)</code>","text":"<p>Gets the vertices of the reference side </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>List[cadwork.point_3d.point_3d]</code> <p>vertexlist of all points (List[point_3d])</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_element_reference_face_vertices(element_id: int) -&gt; List[point_3d]:\n    \"\"\"Gets the vertices of the reference side \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        vertexlist of all points (List[point_3d])\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_element_vertices","title":"<code>get_element_vertices(element_id)</code>","text":"<p>Gets the element vertices </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>List[cadwork.point_3d.point_3d]</code> <p>element vertices (List[point_3d])</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_element_vertices(element_id: int) -&gt; List[point_3d]:\n    \"\"\"Gets the element vertices \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element vertices (List[point_3d])\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_end_height_cut_angle","title":"<code>get_end_height_cut_angle(element_id)</code>","text":"<p>Gets the element end height cut angle </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element end height cut angle (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_end_height_cut_angle(element_id: int) -&gt; float:\n    \"\"\"Gets the element end height cut angle \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element end height cut angle (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_end_width_cut_angle","title":"<code>get_end_width_cut_angle(element_id)</code>","text":"<p>Gets the element end width cut angle </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element end width cut angle (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_end_width_cut_angle(element_id: int) -&gt; float:\n    \"\"\"Gets the element end width cut angle \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element end width cut angle (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_height","title":"<code>get_height(element_id)</code>","text":"<p>Gets the element height </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element height (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_height(element_id: int) -&gt; float:\n    \"\"\"Gets the element height \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element height (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_last_error","title":"<code>get_last_error(error_code)</code>","text":"<p>Gets the last error </p> <p>Parameters:</p> Name Type Description Default <code>error_code</code> <code> int</code> <p>error_code</p> required <p>Returns:</p> Type Description <code>str</code> <p>error string (str)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_last_error(error_code: int) -&gt; str:\n    \"\"\"Gets the last error \n    Args:\n        error_code ( int): error_code\n\n    Returns:\n        error string (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_length","title":"<code>get_length(element_id)</code>","text":"<p>Gets the element length </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element length (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_length(element_id: int) -&gt; float:\n    \"\"\"Gets the element length \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element length (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_list_height","title":"<code>get_list_height(element_id)</code>","text":"<p>Gets the element list height </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element list height (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_list_height(element_id: int) -&gt; float:\n    \"\"\"Gets the element list height \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element list height (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_list_length","title":"<code>get_list_length(element_id)</code>","text":"<p>Gets the element list length </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element list length (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_list_length(element_id: int) -&gt; float:\n    \"\"\"Gets the element list length \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element list length (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_list_volume","title":"<code>get_list_volume(element_id)</code>","text":"<p>Gets the element list volume </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element list volume (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_list_volume(element_id: int) -&gt; float:\n    \"\"\"Gets the element list volume \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element list volume (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_list_weight","title":"<code>get_list_weight(element_id)</code>","text":"<p>Gets the element list weight </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element list weight (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_list_weight(element_id: int) -&gt; float:\n    \"\"\"Gets the element list weight \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element list weight (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_list_width","title":"<code>get_list_width(element_id)</code>","text":"<p>Get the element list width </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element list width (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_list_width(element_id: int) -&gt; float:\n    \"\"\"Get the element list width \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element list width (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_local_x","title":"<code>get_local_x()</code>","text":"<p>Gets the local X vector </p> <p>Returns:</p> Type Description <code>point_3d</code> <p>local X vector (point_3d)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_local_x() -&gt; point_3d:\n    \"\"\"Gets the local X vector \n    Args:\n\n    Returns:\n        local X vector (point_3d)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_local_y","title":"<code>get_local_y()</code>","text":"<p>Gets the local Z vector </p> <p>Returns:</p> Type Description <code>point_3d</code> <p>local Z vector (point_3d)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_local_y() -&gt; point_3d:\n    \"\"\"Gets the local Z vector \n    Args:\n\n    Returns:\n        local Z vector (point_3d)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_local_z","title":"<code>get_local_z()</code>","text":"<p>Gets the local Y vector </p> <p>Returns:</p> Type Description <code>point_3d</code> <p>local Y vector (point_3d)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_local_z() -&gt; point_3d:\n    \"\"\"Gets the local Y vector \n    Args:\n\n    Returns:\n        local Y vector (point_3d)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_minimum_distance_between_elements","title":"<code>get_minimum_distance_between_elements(first_id, second_id)</code>","text":"<p>Gets the minimum distance between 2 elements </p> <p>Parameters:</p> Name Type Description Default <code>first_id</code> <code> int</code> <p>first_id</p> required <code>second_id</code> <code> int</code> <p>second_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>minimum distance (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_minimum_distance_between_elements(first_id: int, second_id: int) -&gt; float:\n    \"\"\"Gets the minimum distance between 2 elements \n    Args:\n        first_id ( int): first_id\n        second_id ( int): second_id\n\n    Returns:\n        minimum distance (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_over_height","title":"<code>get_over_height(element_id)</code>","text":"<p>Gets the element overheight </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element overheight (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_over_height(element_id: int) -&gt; float:\n    \"\"\"Gets the element overheight \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element overheight (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_over_length","title":"<code>get_over_length(element_id)</code>","text":"<p>Gets the element overlength </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element overlength (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_over_length(element_id: int) -&gt; float:\n    \"\"\"Gets the element overlength \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element overlength (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_over_width","title":"<code>get_over_width(element_id)</code>","text":"<p>Gets the element overwidth </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element overwidth (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_over_width(element_id: int) -&gt; float:\n    \"\"\"Gets the element overwidth \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element overwidth (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_p1","title":"<code>get_p1(element_id)</code>","text":"<p>Gets the element P1 </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>point_3d</code> <p>element P1 (point_3d)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_p1(element_id: int) -&gt; point_3d:\n    \"\"\"Gets the element P1 \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element P1 (point_3d)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_p2","title":"<code>get_p2(element_id)</code>","text":"<p>Gets the element P2 </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>point_3d</code> <p>element P2 (point_3d)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_p2(element_id: int) -&gt; point_3d:\n    \"\"\"Gets the element P2 \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element P2 (point_3d)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_p3","title":"<code>get_p3(element_id)</code>","text":"<p>Gets the element P3 </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>point_3d</code> <p>element P3 (point_3d)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_p3(element_id: int) -&gt; point_3d:\n    \"\"\"Gets the element P3 \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element P3 (point_3d)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_reference_side","title":"<code>get_reference_side(element_id)</code>","text":"<p>Gets the element reference side </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>int</code> <p>element reference side (int)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_reference_side(element_id: int) -&gt; int:\n    \"\"\"Gets the element reference side \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element reference side (int)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_rounding_height","title":"<code>get_rounding_height(element_id)</code>","text":"<p>Gets the element rounding height </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element rounding height (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_rounding_height(element_id: int) -&gt; float:\n    \"\"\"Gets the element rounding height \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element rounding height (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_rounding_length","title":"<code>get_rounding_length(element_id)</code>","text":"<p>Gets the element rounding length </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element rounding length (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_rounding_length(element_id: int) -&gt; float:\n    \"\"\"Gets the element rounding length \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element rounding length (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_rounding_width","title":"<code>get_rounding_width(element_id)</code>","text":"<p>Gets the element rounding width </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element rounding width (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_rounding_width(element_id: int) -&gt; float:\n    \"\"\"Gets the element rounding width \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element rounding width (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_start_height_cut_angle","title":"<code>get_start_height_cut_angle(element_id)</code>","text":"<p>Gets the element start height cut angle </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element start height cut angle (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_start_height_cut_angle(element_id: int) -&gt; float:\n    \"\"\"Gets the element start height cut angle \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element start height cut angle (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_start_width_cut_angle","title":"<code>get_start_width_cut_angle(element_id)</code>","text":"<p>Gets the element start width cut angle </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element start width cut angle (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_start_width_cut_angle(element_id: int) -&gt; float:\n    \"\"\"Gets the element start width cut angle \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element start width cut angle (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_total_area_of_all_faces","title":"<code>get_total_area_of_all_faces(element)</code>","text":"<p>Gets the total area of all faces for element </p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code> int</code> <p>element</p> required <p>Returns:</p> Type Description <code>float</code> <p>element total faces area (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_total_area_of_all_faces(element: int) -&gt; float:\n    \"\"\"Gets the total area of all faces for element \n    Args:\n        element ( int): element\n\n    Returns:\n        element total faces area (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_volume","title":"<code>get_volume(element_id)</code>","text":"<p>Gets the element real volume </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element real volume (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_volume(element_id: int) -&gt; float:\n    \"\"\"Gets the element real volume \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element real volume (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_weight","title":"<code>get_weight(element_id)</code>","text":"<p>Gets the element real weight </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element real weight (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_weight(element_id: int) -&gt; float:\n    \"\"\"Gets the element real weight \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element real weight (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_weight_real","title":"<code>get_weight_real(element_id)</code>","text":"<p>get weight real</p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_weight_real(element_id: int) -&gt; float:\n    \"\"\"get weight real\n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_width","title":"<code>get_width(element_id)</code>","text":"<p>Gets the element width </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>element width (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_width(element_id: int) -&gt; float:\n    \"\"\"Gets the element width \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element width (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_window_surface","title":"<code>get_window_surface(elements)</code>","text":"<p>Gets the element window surface </p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>float</code> <p>element window surface (float)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_window_surface(elements: List[int]) -&gt; float:\n    \"\"\"Gets the element window surface \n    Args:\n        elements ( List[int]): elements\n\n    Returns:\n        element window surface (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_xl","title":"<code>get_xl(element_id)</code>","text":"<p>Gets the element XL vector </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>point_3d</code> <p>element XL vector (point_3d)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_xl(element_id: int) -&gt; point_3d:\n    \"\"\"Gets the element XL vector \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element XL vector (point_3d)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_yl","title":"<code>get_yl(element_id)</code>","text":"<p>Gets the element YL vector </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>point_3d</code> <p>element YL vector (point_3d)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_yl(element_id: int) -&gt; point_3d:\n    \"\"\"Gets the element YL vector \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element YL vector (point_3d)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.get_zl","title":"<code>get_zl(element_id)</code>","text":"<p>Gets the element ZL vector </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>point_3d</code> <p>element ZL vector (point_3d)</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def get_zl(element_id: int) -&gt; point_3d:\n    \"\"\"Gets the element ZL vector \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        element ZL vector (point_3d)\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.invert_model","title":"<code>invert_model(element_id_list)</code>","text":"<p>Inverts element model </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def invert_model(element_id_list: List[int]) -&gt; None:\n    \"\"\"Inverts element model \n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.rotate_height_axis_180","title":"<code>rotate_height_axis_180(element_id_list)</code>","text":"<p>Rotates the element height axis 180 degrees </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def rotate_height_axis_180(element_id_list: List[int]) -&gt; None:\n    \"\"\"Rotates the element height axis 180 degrees \n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.rotate_height_axis_2_points","title":"<code>rotate_height_axis_2_points(elements, point1, point2)</code>","text":"<p>Rotates the element height axis via 2 points </p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>point1</code> <code> point_3d</code> <p>point1</p> required <code>point2</code> <code> point_3d</code> <p>point2</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def rotate_height_axis_2_points(elements: List[int], point1: point_3d, point2: point_3d) -&gt; None:\n    \"\"\"Rotates the element height axis via 2 points \n    Args:\n        elements ( List[int]): elements\n        point1 ( point_3d): point1\n        point2 ( point_3d): point2\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.rotate_height_axis_90","title":"<code>rotate_height_axis_90(element_id_list)</code>","text":"<p>Rotates the element height axis 90 degrees </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def rotate_height_axis_90(element_id_list: List[int]) -&gt; None:\n    \"\"\"Rotates the element height axis 90 degrees \n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.rotate_length_axis_180","title":"<code>rotate_length_axis_180(element_id_list)</code>","text":"<p>Rotates element length axis 180 degrees </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def rotate_length_axis_180(element_id_list: List[int]) -&gt; None:\n    \"\"\"Rotates element length axis 180 degrees \n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.rotate_length_axis_2_points","title":"<code>rotate_length_axis_2_points(elements, point1, point2)</code>","text":"<p>Rotates the element length axis via 2 points </p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>point1</code> <code> point_3d</code> <p>point1</p> required <code>point2</code> <code> point_3d</code> <p>point2</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def rotate_length_axis_2_points(elements: List[int], point1: point_3d, point2: point_3d) -&gt; None:\n    \"\"\"Rotates the element length axis via 2 points \n    Args:\n        elements ( List[int]): elements\n        point1 ( point_3d): point1\n        point2 ( point_3d): point2\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.rotate_length_axis_90","title":"<code>rotate_length_axis_90(element_id_list)</code>","text":"<p>Rotates element length axis 90 degrees </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def rotate_length_axis_90(element_id_list: List[int]) -&gt; None:\n    \"\"\"Rotates element length axis 90 degrees \n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.set_cross_correction_negative_height","title":"<code>set_cross_correction_negative_height(element_id_list, value)</code>","text":"<p>Sets the element negative height cross correction </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>value</code> <code> float</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def set_cross_correction_negative_height(element_id_list: List[int], value: float) -&gt; None:\n    \"\"\"Sets the element negative height cross correction \n    Args:\n        element_id_list ( List[int]): element_id_list\n        value ( float): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.set_cross_correction_negative_length","title":"<code>set_cross_correction_negative_length(element_id_list, value)</code>","text":"<p>Sets the element negative length cross correction </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>value</code> <code> float</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def set_cross_correction_negative_length(element_id_list: List[int], value: float) -&gt; None:\n    \"\"\"Sets the element negative length cross correction \n    Args:\n        element_id_list ( List[int]): element_id_list\n        value ( float): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.set_cross_correction_negative_width","title":"<code>set_cross_correction_negative_width(element_id_list, value)</code>","text":"<p>Sets the element negative width cross correction </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>value</code> <code> float</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def set_cross_correction_negative_width(element_id_list: List[int], value: float) -&gt; None:\n    \"\"\"Sets the element negative width cross correction \n    Args:\n        element_id_list ( List[int]): element_id_list\n        value ( float): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.set_cross_correction_positive_height","title":"<code>set_cross_correction_positive_height(element_id_list, value)</code>","text":"<p>Sets the element positive height cross correction </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>value</code> <code> float</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def set_cross_correction_positive_height(element_id_list: List[int], value: float) -&gt; None:\n    \"\"\"Sets the element positive height cross correction \n    Args:\n        element_id_list ( List[int]): element_id_list\n        value ( float): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.set_cross_correction_positive_length","title":"<code>set_cross_correction_positive_length(element_id_list, value)</code>","text":"<p>Sets the element positive length cross correction </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>value</code> <code> float</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def set_cross_correction_positive_length(element_id_list: List[int], value: float) -&gt; None:\n    \"\"\"Sets the element positive length cross correction \n    Args:\n        element_id_list ( List[int]): element_id_list\n        value ( float): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.set_cross_correction_positive_width","title":"<code>set_cross_correction_positive_width(element_id_list, value)</code>","text":"<p>Sets the element positive width cross correction </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>value</code> <code> float</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def set_cross_correction_positive_width(element_id_list: List[int], value: float) -&gt; None:\n    \"\"\"Sets the element positive width cross correction \n    Args:\n        element_id_list ( List[int]): element_id_list\n        value ( float): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.set_drilling_tolerance","title":"<code>set_drilling_tolerance(elements, tolerance)</code>","text":"<p>Gets the division zone points </p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>tolerance</code> <code> float</code> <p>tolerance</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def set_drilling_tolerance(elements: List[int], tolerance: float) -&gt; None:\n    \"\"\"Gets the division zone points \n    Args:\n        elements ( List[int]): elements\n        tolerance ( float): tolerance\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.set_height_real","title":"<code>set_height_real(elements, height)</code>","text":"<p>Sets the element real height </p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>height</code> <code> float</code> <p>height</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def set_height_real(elements: List[int], height: float) -&gt; None:\n    \"\"\"Sets the element real height \n    Args:\n        elements ( List[int]): elements\n        height ( float): height\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.set_length_real","title":"<code>set_length_real(elements, length)</code>","text":"<p>Gets the element real length </p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>length</code> <code> float</code> <p>length</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def set_length_real(elements: List[int], length: float) -&gt; None:\n    \"\"\"Gets the element real length \n    Args:\n        elements ( List[int]): elements\n        length ( float): length\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.set_over_height","title":"<code>set_over_height(element_id_list, value)</code>","text":"<p>Sets the element overheight </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>value</code> <code> float</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def set_over_height(element_id_list: List[int], value: float) -&gt; None:\n    \"\"\"Sets the element overheight \n    Args:\n        element_id_list ( List[int]): element_id_list\n        value ( float): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.set_over_length","title":"<code>set_over_length(element_id_list, value)</code>","text":"<p>Sets the element overlength </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>value</code> <code> float</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def set_over_length(element_id_list: List[int], value: float) -&gt; None:\n    \"\"\"Sets the element overlength \n    Args:\n        element_id_list ( List[int]): element_id_list\n        value ( float): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.set_over_width","title":"<code>set_over_width(element_id_list, value)</code>","text":"<p>Sets the element overwidth </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>value</code> <code> float</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def set_over_width(element_id_list: List[int], value: float) -&gt; None:\n    \"\"\"Sets the element overwidth \n    Args:\n        element_id_list ( List[int]): element_id_list\n        value ( float): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.set_rounding_height","title":"<code>set_rounding_height(element_id_list, value)</code>","text":"<p>Sets the element rounding height </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>value</code> <code> float</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def set_rounding_height(element_id_list: List[int], value: float) -&gt; None:\n    \"\"\"Sets the element rounding height \n    Args:\n        element_id_list ( List[int]): element_id_list\n        value ( float): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.set_rounding_length","title":"<code>set_rounding_length(element_id_list, value)</code>","text":"<p>Sets the element rounding length </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>value</code> <code> float</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def set_rounding_length(element_id_list: List[int], value: float) -&gt; None:\n    \"\"\"Sets the element rounding length \n    Args:\n        element_id_list ( List[int]): element_id_list\n        value ( float): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.set_rounding_width","title":"<code>set_rounding_width(element_id_list, value)</code>","text":"<p>Sets the element rounding width </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>value</code> <code> float</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def set_rounding_width(element_id_list: List[int], value: float) -&gt; None:\n    \"\"\"Sets the element rounding width \n    Args:\n        element_id_list ( List[int]): element_id_list\n        value ( float): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/geometry_controller/#geometry_controller.set_width_real","title":"<code>set_width_real(elements, width)</code>","text":"<p>Sets the element real width </p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>width</code> <code> float</code> <p>width</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>geometry_controller\\__init__.py</code> <pre><code>def set_width_real(elements: List[int], width: float) -&gt; None:\n    \"\"\"Sets the element real width \n    Args:\n        elements ( List[int]): elements\n        width ( float): width\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/","title":"ifc_2x3_element_type","text":""},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type","title":"<code>cadwork.ifc_2x3_element_type</code>","text":""},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type","title":"<code> ifc_2x3_element_type        </code>","text":"Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>class ifc_2x3_element_type:\n    def isIfcCurtainWall(self) -&gt; bool:\n        \"\"\"isIfcCurtainWall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_curtain_wall(self) -&gt; bool:\n        \"\"\"is_ifc_curtain_wall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isIfcWall(self) -&gt; bool:\n        \"\"\"isIfcWall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_wall(self) -&gt; bool:\n        \"\"\"is_ifc_wall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setIfcCovering(self) -&gt; None:\n        \"\"\"setIfcCovering\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_covering(self) -&gt; None:\n        \"\"\"set_ifc_covering\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isIfcDoor(self) -&gt; bool:\n        \"\"\"isIfcDoor\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_door(self) -&gt; bool:\n        \"\"\"is_ifc_door\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setIfcBuildingElementPart(self) -&gt; None:\n        \"\"\"setIfcBuildingElementPart\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_building_element_part(self) -&gt; None:\n        \"\"\"set_ifc_building_element_part\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isIfcStairFlight(self) -&gt; bool:\n        \"\"\"isIfcStairFlight\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_stair_flight(self) -&gt; bool:\n        \"\"\"is_ifc_stair_flight\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setIfcSpace(self) -&gt; None:\n        \"\"\"setIfcSpace\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_space(self) -&gt; None:\n        \"\"\"set_ifc_space\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setIfcPlate(self) -&gt; None:\n        \"\"\"setIfcPlate\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_plate(self) -&gt; None:\n        \"\"\"set_ifc_plate\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setIfcFlowSegment(self) -&gt; None:\n        \"\"\"setIfcFlowSegment\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_flow_segment(self) -&gt; None:\n        \"\"\"set_ifc_flow_segment\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isIfcMember(self) -&gt; bool:\n        \"\"\"isIfcMember\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_member(self) -&gt; bool:\n        \"\"\"is_ifc_member\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isIfcFurnishingElement(self) -&gt; bool:\n        \"\"\"isIfcFurnishingElement\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_furnishing_element(self) -&gt; bool:\n        \"\"\"is_ifc_furnishing_element\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isIfcSpace(self) -&gt; bool:\n        \"\"\"isIfcSpace\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_space(self) -&gt; bool:\n        \"\"\"is_ifc_space\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isIfcDiscreteAccessory(self) -&gt; bool:\n        \"\"\"isIfcDiscreteAccessory\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_discrete_accessory(self) -&gt; bool:\n        \"\"\"is_ifc_discrete_accessory\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isIfcRampFlight(self) -&gt; bool:\n        \"\"\"isIfcRampFlight\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_ramp_flight(self) -&gt; bool:\n        \"\"\"is_ifc_ramp_flight\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isIfcFlowSegment(self) -&gt; bool:\n        \"\"\"isIfcFlowSegment\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_flow_segment(self) -&gt; bool:\n        \"\"\"is_ifc_flow_segment\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isIfcFastener(self) -&gt; bool:\n        \"\"\"isIfcFastener\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_fastener(self) -&gt; bool:\n        \"\"\"is_ifc_fastener\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isIfcFooting(self) -&gt; bool:\n        \"\"\"isIfcFooting\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_footing(self) -&gt; bool:\n        \"\"\"is_ifc_footing\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isNone(self) -&gt; bool:\n        \"\"\"isNone\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_none(self) -&gt; bool:\n        \"\"\"is_none\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setNone(self) -&gt; None:\n        \"\"\"setNone\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_none(self) -&gt; None:\n        \"\"\"set_none\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isIfcRailing(self) -&gt; bool:\n        \"\"\"isIfcRailing\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_railing(self) -&gt; bool:\n        \"\"\"is_ifc_railing\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setIfcRamp(self) -&gt; None:\n        \"\"\"setIfcRamp\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_ramp(self) -&gt; None:\n        \"\"\"set_ifc_ramp\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isIfcChimney(self) -&gt; bool:\n        \"\"\"isIfcChimney\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_chimney(self) -&gt; bool:\n        \"\"\"is_ifc_chimney\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isIfcBuildingElementProxy(self) -&gt; bool:\n        \"\"\"isIfcBuildingElementProxy\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_building_element_proxy(self) -&gt; bool:\n        \"\"\"is_ifc_building_element_proxy\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isIfcWallStandardCase(self) -&gt; bool:\n        \"\"\"isIfcWallStandardCase\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_wall_standard_case(self) -&gt; bool:\n        \"\"\"is_ifc_wall_standard_case\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setIfcBeam(self) -&gt; None:\n        \"\"\"setIfcBeam\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_beam(self) -&gt; None:\n        \"\"\"set_ifc_beam\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isIfcCovering(self) -&gt; bool:\n        \"\"\"isIfcCovering\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_covering(self) -&gt; bool:\n        \"\"\"is_ifc_covering\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setIfcWindow(self) -&gt; None:\n        \"\"\"setIfcWindow\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_window(self) -&gt; None:\n        \"\"\"set_ifc_window\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setIfcStairFlight(self) -&gt; None:\n        \"\"\"setIfcStairFlight\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_stair_flight(self) -&gt; None:\n        \"\"\"set_ifc_stair_flight\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setIfcFurnishingElement(self) -&gt; None:\n        \"\"\"setIfcFurnishingElement\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_furnishing_element(self) -&gt; None:\n        \"\"\"set_ifc_furnishing_element\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setIfcCurtainWall(self) -&gt; None:\n        \"\"\"setIfcCurtainWall\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_curtain_wall(self) -&gt; None:\n        \"\"\"set_ifc_curtain_wall\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setIfcMember(self) -&gt; None:\n        \"\"\"setIfcMember\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_member(self) -&gt; None:\n        \"\"\"set_ifc_member\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isIfcColumn(self) -&gt; bool:\n        \"\"\"isIfcColumn\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_column(self) -&gt; bool:\n        \"\"\"is_ifc_column\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setIfcRoof(self) -&gt; None:\n        \"\"\"setIfcRoof\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_roof(self) -&gt; None:\n        \"\"\"set_ifc_roof\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setIfcFastener(self) -&gt; None:\n        \"\"\"setIfcFastener\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_fastener(self) -&gt; None:\n        \"\"\"set_ifc_fastener\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setIfcRampFlight(self) -&gt; None:\n        \"\"\"setIfcRampFlight\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_ramp_flight(self) -&gt; None:\n        \"\"\"set_ifc_ramp_flight\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setIfcDiscreteAccessory(self) -&gt; None:\n        \"\"\"setIfcDiscreteAccessory\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_discrete_accessory(self) -&gt; None:\n        \"\"\"set_ifc_discrete_accessory\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isIfcRamp(self) -&gt; bool:\n        \"\"\"isIfcRamp\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_ramp(self) -&gt; bool:\n        \"\"\"is_ifc_ramp\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isIfcBuildingElementPart(self) -&gt; bool:\n        \"\"\"isIfcBuildingElementPart\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_building_element_part(self) -&gt; bool:\n        \"\"\"is_ifc_building_element_part\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setIfcSlab(self) -&gt; None:\n        \"\"\"setIfcSlab\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_slab(self) -&gt; None:\n        \"\"\"set_ifc_slab\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setIfcDoor(self) -&gt; None:\n        \"\"\"setIfcDoor\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_door(self) -&gt; None:\n        \"\"\"set_ifc_door\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isIfcBeam(self) -&gt; bool:\n        \"\"\"isIfcBeam\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_beam(self) -&gt; bool:\n        \"\"\"is_ifc_beam\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isIfcPlate(self) -&gt; bool:\n        \"\"\"isIfcPlate\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_plate(self) -&gt; bool:\n        \"\"\"is_ifc_plate\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setIfcStair(self) -&gt; None:\n        \"\"\"setIfcStair\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_stair(self) -&gt; None:\n        \"\"\"set_ifc_stair\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isIfcRoof(self) -&gt; bool:\n        \"\"\"isIfcRoof\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_roof(self) -&gt; bool:\n        \"\"\"is_ifc_roof\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setIfcWall(self) -&gt; None:\n        \"\"\"setIfcWall\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_wall(self) -&gt; None:\n        \"\"\"set_ifc_wall\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setIfcColumn(self) -&gt; None:\n        \"\"\"setIfcColumn\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_column(self) -&gt; None:\n        \"\"\"set_ifc_column\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setIfcRailing(self) -&gt; None:\n        \"\"\"setIfcRailing\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_railing(self) -&gt; None:\n        \"\"\"set_ifc_railing\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setIfcWallStandardCase(self) -&gt; None:\n        \"\"\"setIfcWallStandardCase\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_wall_standard_case(self) -&gt; None:\n        \"\"\"set_ifc_wall_standard_case\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setIfcFooting(self) -&gt; None:\n        \"\"\"setIfcFooting\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_footing(self) -&gt; None:\n        \"\"\"set_ifc_footing\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isIfcMechanicalFastener(self) -&gt; bool:\n        \"\"\"isIfcMechanicalFastener\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_mechanical_fastener(self) -&gt; bool:\n        \"\"\"is_ifc_mechanical_fastener\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isIfcSlab(self) -&gt; bool:\n        \"\"\"isIfcSlab\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_slab(self) -&gt; bool:\n        \"\"\"is_ifc_slab\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setIfcBuildingElementProxy(self) -&gt; None:\n        \"\"\"setIfcBuildingElementProxy\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_building_element_proxy(self) -&gt; None:\n        \"\"\"set_ifc_building_element_proxy\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isIfcOpeningElement(self) -&gt; bool:\n        \"\"\"isIfcOpeningElement\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_opening_element(self) -&gt; bool:\n        \"\"\"is_ifc_opening_element\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def toString(self) -&gt; str:\n        \"\"\"toString\n        Args:\n\n        Returns:\n            str\n        \"\"\"\n\n    def to_string(self) -&gt; str:\n        \"\"\"to_string\n        Args:\n\n        Returns:\n            str\n        \"\"\"\n\n    def setIfcMechanicalFastener(self) -&gt; None:\n        \"\"\"setIfcMechanicalFastener\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_mechanical_fastener(self) -&gt; None:\n        \"\"\"set_ifc_mechanical_fastener\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setIfcChimney(self) -&gt; None:\n        \"\"\"setIfcChimney\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_chimney(self) -&gt; None:\n        \"\"\"set_ifc_chimney\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isIfcWindow(self) -&gt; bool:\n        \"\"\"isIfcWindow\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_window(self) -&gt; bool:\n        \"\"\"is_ifc_window\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setIfcOpeningElement(self) -&gt; None:\n        \"\"\"setIfcOpeningElement\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_ifc_opening_element(self) -&gt; None:\n        \"\"\"set_ifc_opening_element\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isIfcStair(self) -&gt; bool:\n        \"\"\"isIfcStair\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_ifc_stair(self) -&gt; bool:\n        \"\"\"is_ifc_stair\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcBeam","title":"<code>isIfcBeam(self)</code>","text":"<p>isIfcBeam</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcBeam(self) -&gt; bool:\n    \"\"\"isIfcBeam\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcBuildingElementPart","title":"<code>isIfcBuildingElementPart(self)</code>","text":"<p>isIfcBuildingElementPart</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcBuildingElementPart(self) -&gt; bool:\n    \"\"\"isIfcBuildingElementPart\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcBuildingElementProxy","title":"<code>isIfcBuildingElementProxy(self)</code>","text":"<p>isIfcBuildingElementProxy</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcBuildingElementProxy(self) -&gt; bool:\n    \"\"\"isIfcBuildingElementProxy\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcChimney","title":"<code>isIfcChimney(self)</code>","text":"<p>isIfcChimney</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcChimney(self) -&gt; bool:\n    \"\"\"isIfcChimney\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcColumn","title":"<code>isIfcColumn(self)</code>","text":"<p>isIfcColumn</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcColumn(self) -&gt; bool:\n    \"\"\"isIfcColumn\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcCovering","title":"<code>isIfcCovering(self)</code>","text":"<p>isIfcCovering</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcCovering(self) -&gt; bool:\n    \"\"\"isIfcCovering\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcCurtainWall","title":"<code>isIfcCurtainWall(self)</code>","text":"<p>isIfcCurtainWall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcCurtainWall(self) -&gt; bool:\n    \"\"\"isIfcCurtainWall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcDiscreteAccessory","title":"<code>isIfcDiscreteAccessory(self)</code>","text":"<p>isIfcDiscreteAccessory</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcDiscreteAccessory(self) -&gt; bool:\n    \"\"\"isIfcDiscreteAccessory\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcDoor","title":"<code>isIfcDoor(self)</code>","text":"<p>isIfcDoor</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcDoor(self) -&gt; bool:\n    \"\"\"isIfcDoor\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcFastener","title":"<code>isIfcFastener(self)</code>","text":"<p>isIfcFastener</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcFastener(self) -&gt; bool:\n    \"\"\"isIfcFastener\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcFlowSegment","title":"<code>isIfcFlowSegment(self)</code>","text":"<p>isIfcFlowSegment</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcFlowSegment(self) -&gt; bool:\n    \"\"\"isIfcFlowSegment\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcFooting","title":"<code>isIfcFooting(self)</code>","text":"<p>isIfcFooting</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcFooting(self) -&gt; bool:\n    \"\"\"isIfcFooting\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcFurnishingElement","title":"<code>isIfcFurnishingElement(self)</code>","text":"<p>isIfcFurnishingElement</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcFurnishingElement(self) -&gt; bool:\n    \"\"\"isIfcFurnishingElement\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcMechanicalFastener","title":"<code>isIfcMechanicalFastener(self)</code>","text":"<p>isIfcMechanicalFastener</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcMechanicalFastener(self) -&gt; bool:\n    \"\"\"isIfcMechanicalFastener\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcMember","title":"<code>isIfcMember(self)</code>","text":"<p>isIfcMember</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcMember(self) -&gt; bool:\n    \"\"\"isIfcMember\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcOpeningElement","title":"<code>isIfcOpeningElement(self)</code>","text":"<p>isIfcOpeningElement</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcOpeningElement(self) -&gt; bool:\n    \"\"\"isIfcOpeningElement\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcPlate","title":"<code>isIfcPlate(self)</code>","text":"<p>isIfcPlate</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcPlate(self) -&gt; bool:\n    \"\"\"isIfcPlate\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcRailing","title":"<code>isIfcRailing(self)</code>","text":"<p>isIfcRailing</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcRailing(self) -&gt; bool:\n    \"\"\"isIfcRailing\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcRamp","title":"<code>isIfcRamp(self)</code>","text":"<p>isIfcRamp</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcRamp(self) -&gt; bool:\n    \"\"\"isIfcRamp\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcRampFlight","title":"<code>isIfcRampFlight(self)</code>","text":"<p>isIfcRampFlight</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcRampFlight(self) -&gt; bool:\n    \"\"\"isIfcRampFlight\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcRoof","title":"<code>isIfcRoof(self)</code>","text":"<p>isIfcRoof</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcRoof(self) -&gt; bool:\n    \"\"\"isIfcRoof\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcSlab","title":"<code>isIfcSlab(self)</code>","text":"<p>isIfcSlab</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcSlab(self) -&gt; bool:\n    \"\"\"isIfcSlab\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcSpace","title":"<code>isIfcSpace(self)</code>","text":"<p>isIfcSpace</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcSpace(self) -&gt; bool:\n    \"\"\"isIfcSpace\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcStair","title":"<code>isIfcStair(self)</code>","text":"<p>isIfcStair</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcStair(self) -&gt; bool:\n    \"\"\"isIfcStair\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcStairFlight","title":"<code>isIfcStairFlight(self)</code>","text":"<p>isIfcStairFlight</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcStairFlight(self) -&gt; bool:\n    \"\"\"isIfcStairFlight\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcWall","title":"<code>isIfcWall(self)</code>","text":"<p>isIfcWall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcWall(self) -&gt; bool:\n    \"\"\"isIfcWall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcWallStandardCase","title":"<code>isIfcWallStandardCase(self)</code>","text":"<p>isIfcWallStandardCase</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcWallStandardCase(self) -&gt; bool:\n    \"\"\"isIfcWallStandardCase\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isIfcWindow","title":"<code>isIfcWindow(self)</code>","text":"<p>isIfcWindow</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isIfcWindow(self) -&gt; bool:\n    \"\"\"isIfcWindow\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.isNone","title":"<code>isNone(self)</code>","text":"<p>isNone</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def isNone(self) -&gt; bool:\n    \"\"\"isNone\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_beam","title":"<code>is_ifc_beam(self)</code>","text":"<p>is_ifc_beam</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_beam(self) -&gt; bool:\n    \"\"\"is_ifc_beam\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_building_element_part","title":"<code>is_ifc_building_element_part(self)</code>","text":"<p>is_ifc_building_element_part</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_building_element_part(self) -&gt; bool:\n    \"\"\"is_ifc_building_element_part\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_building_element_proxy","title":"<code>is_ifc_building_element_proxy(self)</code>","text":"<p>is_ifc_building_element_proxy</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_building_element_proxy(self) -&gt; bool:\n    \"\"\"is_ifc_building_element_proxy\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_chimney","title":"<code>is_ifc_chimney(self)</code>","text":"<p>is_ifc_chimney</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_chimney(self) -&gt; bool:\n    \"\"\"is_ifc_chimney\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_column","title":"<code>is_ifc_column(self)</code>","text":"<p>is_ifc_column</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_column(self) -&gt; bool:\n    \"\"\"is_ifc_column\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_covering","title":"<code>is_ifc_covering(self)</code>","text":"<p>is_ifc_covering</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_covering(self) -&gt; bool:\n    \"\"\"is_ifc_covering\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_curtain_wall","title":"<code>is_ifc_curtain_wall(self)</code>","text":"<p>is_ifc_curtain_wall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_curtain_wall(self) -&gt; bool:\n    \"\"\"is_ifc_curtain_wall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_discrete_accessory","title":"<code>is_ifc_discrete_accessory(self)</code>","text":"<p>is_ifc_discrete_accessory</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_discrete_accessory(self) -&gt; bool:\n    \"\"\"is_ifc_discrete_accessory\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_door","title":"<code>is_ifc_door(self)</code>","text":"<p>is_ifc_door</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_door(self) -&gt; bool:\n    \"\"\"is_ifc_door\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_fastener","title":"<code>is_ifc_fastener(self)</code>","text":"<p>is_ifc_fastener</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_fastener(self) -&gt; bool:\n    \"\"\"is_ifc_fastener\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_flow_segment","title":"<code>is_ifc_flow_segment(self)</code>","text":"<p>is_ifc_flow_segment</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_flow_segment(self) -&gt; bool:\n    \"\"\"is_ifc_flow_segment\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_footing","title":"<code>is_ifc_footing(self)</code>","text":"<p>is_ifc_footing</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_footing(self) -&gt; bool:\n    \"\"\"is_ifc_footing\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_furnishing_element","title":"<code>is_ifc_furnishing_element(self)</code>","text":"<p>is_ifc_furnishing_element</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_furnishing_element(self) -&gt; bool:\n    \"\"\"is_ifc_furnishing_element\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_mechanical_fastener","title":"<code>is_ifc_mechanical_fastener(self)</code>","text":"<p>is_ifc_mechanical_fastener</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_mechanical_fastener(self) -&gt; bool:\n    \"\"\"is_ifc_mechanical_fastener\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_member","title":"<code>is_ifc_member(self)</code>","text":"<p>is_ifc_member</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_member(self) -&gt; bool:\n    \"\"\"is_ifc_member\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_opening_element","title":"<code>is_ifc_opening_element(self)</code>","text":"<p>is_ifc_opening_element</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_opening_element(self) -&gt; bool:\n    \"\"\"is_ifc_opening_element\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_plate","title":"<code>is_ifc_plate(self)</code>","text":"<p>is_ifc_plate</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_plate(self) -&gt; bool:\n    \"\"\"is_ifc_plate\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_railing","title":"<code>is_ifc_railing(self)</code>","text":"<p>is_ifc_railing</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_railing(self) -&gt; bool:\n    \"\"\"is_ifc_railing\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_ramp","title":"<code>is_ifc_ramp(self)</code>","text":"<p>is_ifc_ramp</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_ramp(self) -&gt; bool:\n    \"\"\"is_ifc_ramp\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_ramp_flight","title":"<code>is_ifc_ramp_flight(self)</code>","text":"<p>is_ifc_ramp_flight</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_ramp_flight(self) -&gt; bool:\n    \"\"\"is_ifc_ramp_flight\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_roof","title":"<code>is_ifc_roof(self)</code>","text":"<p>is_ifc_roof</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_roof(self) -&gt; bool:\n    \"\"\"is_ifc_roof\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_slab","title":"<code>is_ifc_slab(self)</code>","text":"<p>is_ifc_slab</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_slab(self) -&gt; bool:\n    \"\"\"is_ifc_slab\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_space","title":"<code>is_ifc_space(self)</code>","text":"<p>is_ifc_space</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_space(self) -&gt; bool:\n    \"\"\"is_ifc_space\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_stair","title":"<code>is_ifc_stair(self)</code>","text":"<p>is_ifc_stair</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_stair(self) -&gt; bool:\n    \"\"\"is_ifc_stair\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_stair_flight","title":"<code>is_ifc_stair_flight(self)</code>","text":"<p>is_ifc_stair_flight</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_stair_flight(self) -&gt; bool:\n    \"\"\"is_ifc_stair_flight\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_wall","title":"<code>is_ifc_wall(self)</code>","text":"<p>is_ifc_wall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_wall(self) -&gt; bool:\n    \"\"\"is_ifc_wall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_wall_standard_case","title":"<code>is_ifc_wall_standard_case(self)</code>","text":"<p>is_ifc_wall_standard_case</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_wall_standard_case(self) -&gt; bool:\n    \"\"\"is_ifc_wall_standard_case\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_ifc_window","title":"<code>is_ifc_window(self)</code>","text":"<p>is_ifc_window</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_ifc_window(self) -&gt; bool:\n    \"\"\"is_ifc_window\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.is_none","title":"<code>is_none(self)</code>","text":"<p>is_none</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def is_none(self) -&gt; bool:\n    \"\"\"is_none\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcBeam","title":"<code>setIfcBeam(self)</code>","text":"<p>setIfcBeam</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcBeam(self) -&gt; None:\n    \"\"\"setIfcBeam\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcBuildingElementPart","title":"<code>setIfcBuildingElementPart(self)</code>","text":"<p>setIfcBuildingElementPart</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcBuildingElementPart(self) -&gt; None:\n    \"\"\"setIfcBuildingElementPart\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcBuildingElementProxy","title":"<code>setIfcBuildingElementProxy(self)</code>","text":"<p>setIfcBuildingElementProxy</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcBuildingElementProxy(self) -&gt; None:\n    \"\"\"setIfcBuildingElementProxy\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcChimney","title":"<code>setIfcChimney(self)</code>","text":"<p>setIfcChimney</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcChimney(self) -&gt; None:\n    \"\"\"setIfcChimney\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcColumn","title":"<code>setIfcColumn(self)</code>","text":"<p>setIfcColumn</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcColumn(self) -&gt; None:\n    \"\"\"setIfcColumn\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcCovering","title":"<code>setIfcCovering(self)</code>","text":"<p>setIfcCovering</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcCovering(self) -&gt; None:\n    \"\"\"setIfcCovering\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcCurtainWall","title":"<code>setIfcCurtainWall(self)</code>","text":"<p>setIfcCurtainWall</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcCurtainWall(self) -&gt; None:\n    \"\"\"setIfcCurtainWall\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcDiscreteAccessory","title":"<code>setIfcDiscreteAccessory(self)</code>","text":"<p>setIfcDiscreteAccessory</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcDiscreteAccessory(self) -&gt; None:\n    \"\"\"setIfcDiscreteAccessory\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcDoor","title":"<code>setIfcDoor(self)</code>","text":"<p>setIfcDoor</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcDoor(self) -&gt; None:\n    \"\"\"setIfcDoor\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcFastener","title":"<code>setIfcFastener(self)</code>","text":"<p>setIfcFastener</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcFastener(self) -&gt; None:\n    \"\"\"setIfcFastener\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcFlowSegment","title":"<code>setIfcFlowSegment(self)</code>","text":"<p>setIfcFlowSegment</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcFlowSegment(self) -&gt; None:\n    \"\"\"setIfcFlowSegment\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcFooting","title":"<code>setIfcFooting(self)</code>","text":"<p>setIfcFooting</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcFooting(self) -&gt; None:\n    \"\"\"setIfcFooting\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcFurnishingElement","title":"<code>setIfcFurnishingElement(self)</code>","text":"<p>setIfcFurnishingElement</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcFurnishingElement(self) -&gt; None:\n    \"\"\"setIfcFurnishingElement\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcMechanicalFastener","title":"<code>setIfcMechanicalFastener(self)</code>","text":"<p>setIfcMechanicalFastener</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcMechanicalFastener(self) -&gt; None:\n    \"\"\"setIfcMechanicalFastener\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcMember","title":"<code>setIfcMember(self)</code>","text":"<p>setIfcMember</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcMember(self) -&gt; None:\n    \"\"\"setIfcMember\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcOpeningElement","title":"<code>setIfcOpeningElement(self)</code>","text":"<p>setIfcOpeningElement</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcOpeningElement(self) -&gt; None:\n    \"\"\"setIfcOpeningElement\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcPlate","title":"<code>setIfcPlate(self)</code>","text":"<p>setIfcPlate</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcPlate(self) -&gt; None:\n    \"\"\"setIfcPlate\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcRailing","title":"<code>setIfcRailing(self)</code>","text":"<p>setIfcRailing</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcRailing(self) -&gt; None:\n    \"\"\"setIfcRailing\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcRamp","title":"<code>setIfcRamp(self)</code>","text":"<p>setIfcRamp</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcRamp(self) -&gt; None:\n    \"\"\"setIfcRamp\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcRampFlight","title":"<code>setIfcRampFlight(self)</code>","text":"<p>setIfcRampFlight</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcRampFlight(self) -&gt; None:\n    \"\"\"setIfcRampFlight\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcRoof","title":"<code>setIfcRoof(self)</code>","text":"<p>setIfcRoof</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcRoof(self) -&gt; None:\n    \"\"\"setIfcRoof\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcSlab","title":"<code>setIfcSlab(self)</code>","text":"<p>setIfcSlab</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcSlab(self) -&gt; None:\n    \"\"\"setIfcSlab\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcSpace","title":"<code>setIfcSpace(self)</code>","text":"<p>setIfcSpace</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcSpace(self) -&gt; None:\n    \"\"\"setIfcSpace\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcStair","title":"<code>setIfcStair(self)</code>","text":"<p>setIfcStair</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcStair(self) -&gt; None:\n    \"\"\"setIfcStair\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcStairFlight","title":"<code>setIfcStairFlight(self)</code>","text":"<p>setIfcStairFlight</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcStairFlight(self) -&gt; None:\n    \"\"\"setIfcStairFlight\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcWall","title":"<code>setIfcWall(self)</code>","text":"<p>setIfcWall</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcWall(self) -&gt; None:\n    \"\"\"setIfcWall\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcWallStandardCase","title":"<code>setIfcWallStandardCase(self)</code>","text":"<p>setIfcWallStandardCase</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcWallStandardCase(self) -&gt; None:\n    \"\"\"setIfcWallStandardCase\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setIfcWindow","title":"<code>setIfcWindow(self)</code>","text":"<p>setIfcWindow</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setIfcWindow(self) -&gt; None:\n    \"\"\"setIfcWindow\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.setNone","title":"<code>setNone(self)</code>","text":"<p>setNone</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def setNone(self) -&gt; None:\n    \"\"\"setNone\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_beam","title":"<code>set_ifc_beam(self)</code>","text":"<p>set_ifc_beam</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_beam(self) -&gt; None:\n    \"\"\"set_ifc_beam\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_building_element_part","title":"<code>set_ifc_building_element_part(self)</code>","text":"<p>set_ifc_building_element_part</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_building_element_part(self) -&gt; None:\n    \"\"\"set_ifc_building_element_part\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_building_element_proxy","title":"<code>set_ifc_building_element_proxy(self)</code>","text":"<p>set_ifc_building_element_proxy</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_building_element_proxy(self) -&gt; None:\n    \"\"\"set_ifc_building_element_proxy\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_chimney","title":"<code>set_ifc_chimney(self)</code>","text":"<p>set_ifc_chimney</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_chimney(self) -&gt; None:\n    \"\"\"set_ifc_chimney\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_column","title":"<code>set_ifc_column(self)</code>","text":"<p>set_ifc_column</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_column(self) -&gt; None:\n    \"\"\"set_ifc_column\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_covering","title":"<code>set_ifc_covering(self)</code>","text":"<p>set_ifc_covering</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_covering(self) -&gt; None:\n    \"\"\"set_ifc_covering\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_curtain_wall","title":"<code>set_ifc_curtain_wall(self)</code>","text":"<p>set_ifc_curtain_wall</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_curtain_wall(self) -&gt; None:\n    \"\"\"set_ifc_curtain_wall\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_discrete_accessory","title":"<code>set_ifc_discrete_accessory(self)</code>","text":"<p>set_ifc_discrete_accessory</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_discrete_accessory(self) -&gt; None:\n    \"\"\"set_ifc_discrete_accessory\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_door","title":"<code>set_ifc_door(self)</code>","text":"<p>set_ifc_door</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_door(self) -&gt; None:\n    \"\"\"set_ifc_door\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_fastener","title":"<code>set_ifc_fastener(self)</code>","text":"<p>set_ifc_fastener</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_fastener(self) -&gt; None:\n    \"\"\"set_ifc_fastener\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_flow_segment","title":"<code>set_ifc_flow_segment(self)</code>","text":"<p>set_ifc_flow_segment</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_flow_segment(self) -&gt; None:\n    \"\"\"set_ifc_flow_segment\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_footing","title":"<code>set_ifc_footing(self)</code>","text":"<p>set_ifc_footing</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_footing(self) -&gt; None:\n    \"\"\"set_ifc_footing\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_furnishing_element","title":"<code>set_ifc_furnishing_element(self)</code>","text":"<p>set_ifc_furnishing_element</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_furnishing_element(self) -&gt; None:\n    \"\"\"set_ifc_furnishing_element\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_mechanical_fastener","title":"<code>set_ifc_mechanical_fastener(self)</code>","text":"<p>set_ifc_mechanical_fastener</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_mechanical_fastener(self) -&gt; None:\n    \"\"\"set_ifc_mechanical_fastener\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_member","title":"<code>set_ifc_member(self)</code>","text":"<p>set_ifc_member</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_member(self) -&gt; None:\n    \"\"\"set_ifc_member\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_opening_element","title":"<code>set_ifc_opening_element(self)</code>","text":"<p>set_ifc_opening_element</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_opening_element(self) -&gt; None:\n    \"\"\"set_ifc_opening_element\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_plate","title":"<code>set_ifc_plate(self)</code>","text":"<p>set_ifc_plate</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_plate(self) -&gt; None:\n    \"\"\"set_ifc_plate\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_railing","title":"<code>set_ifc_railing(self)</code>","text":"<p>set_ifc_railing</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_railing(self) -&gt; None:\n    \"\"\"set_ifc_railing\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_ramp","title":"<code>set_ifc_ramp(self)</code>","text":"<p>set_ifc_ramp</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_ramp(self) -&gt; None:\n    \"\"\"set_ifc_ramp\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_ramp_flight","title":"<code>set_ifc_ramp_flight(self)</code>","text":"<p>set_ifc_ramp_flight</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_ramp_flight(self) -&gt; None:\n    \"\"\"set_ifc_ramp_flight\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_roof","title":"<code>set_ifc_roof(self)</code>","text":"<p>set_ifc_roof</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_roof(self) -&gt; None:\n    \"\"\"set_ifc_roof\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_slab","title":"<code>set_ifc_slab(self)</code>","text":"<p>set_ifc_slab</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_slab(self) -&gt; None:\n    \"\"\"set_ifc_slab\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_space","title":"<code>set_ifc_space(self)</code>","text":"<p>set_ifc_space</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_space(self) -&gt; None:\n    \"\"\"set_ifc_space\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_stair","title":"<code>set_ifc_stair(self)</code>","text":"<p>set_ifc_stair</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_stair(self) -&gt; None:\n    \"\"\"set_ifc_stair\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_stair_flight","title":"<code>set_ifc_stair_flight(self)</code>","text":"<p>set_ifc_stair_flight</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_stair_flight(self) -&gt; None:\n    \"\"\"set_ifc_stair_flight\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_wall","title":"<code>set_ifc_wall(self)</code>","text":"<p>set_ifc_wall</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_wall(self) -&gt; None:\n    \"\"\"set_ifc_wall\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_wall_standard_case","title":"<code>set_ifc_wall_standard_case(self)</code>","text":"<p>set_ifc_wall_standard_case</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_wall_standard_case(self) -&gt; None:\n    \"\"\"set_ifc_wall_standard_case\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_ifc_window","title":"<code>set_ifc_window(self)</code>","text":"<p>set_ifc_window</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_ifc_window(self) -&gt; None:\n    \"\"\"set_ifc_window\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.set_none","title":"<code>set_none(self)</code>","text":"<p>set_none</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def set_none(self) -&gt; None:\n    \"\"\"set_none\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.toString","title":"<code>toString(self)</code>","text":"<p>toString</p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def toString(self) -&gt; str:\n    \"\"\"toString\n    Args:\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_2x3_element_type/#cadwork.ifc_2x3_element_type.ifc_2x3_element_type.to_string","title":"<code>to_string(self)</code>","text":"<p>to_string</p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>cadwork\\ifc_2x3_element_type.py</code> <pre><code>def to_string(self) -&gt; str:\n    \"\"\"to_string\n    Args:\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/","title":"IFC Options","text":"<p>rendering: show_root_heading: false show_source: true</p>"},{"location":"documentation/ifc_options/#cadwork.ifc_options","title":"<code>cadwork.ifc_options</code>","text":""},{"location":"documentation/ifc_options/#cadwork.ifc_options.ifc_options","title":"<code> ifc_options        </code>","text":"Source code in <code>cadwork\\ifc_options.py</code> <pre><code>class ifc_options:\n    def get_ifc_options_aggregation(self) -&gt; 'ifc_options_aggregation':\n        \"\"\"get ifc options aggregation\n        Args:\n\n        Returns:\n            ifc_options_aggregation\n        \"\"\"\n\n    def get_ifc_options_project_data(self) -&gt; 'ifc_options_project_data':\n        \"\"\"get ifc options project data\n        Args:\n\n        Returns:\n            ifc_options_project_data\n        \"\"\"\n\n    def get_ifc_options_properties(self) -&gt; 'ifc_options_properties':\n        \"\"\"get ifc options properties\n        Args:\n\n        Returns:\n            ifc_options_properties\n        \"\"\"\n\n    def get_ifc_options_level_of_detail(self) -&gt; 'ifc_options_level_of_detail':\n        \"\"\"get ifc options level of detail\n        Args:\n\n        Returns:\n            ifc_options_level_of_detail\n        \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options.ifc_options.get_ifc_options_aggregation","title":"<code>get_ifc_options_aggregation(self)</code>","text":"<p>get ifc options aggregation</p> <p>Returns:</p> Type Description <code>ifc_options_aggregation</code> <p>ifc_options_aggregation</p> Source code in <code>cadwork\\ifc_options.py</code> <pre><code>def get_ifc_options_aggregation(self) -&gt; 'ifc_options_aggregation':\n    \"\"\"get ifc options aggregation\n    Args:\n\n    Returns:\n        ifc_options_aggregation\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options.ifc_options.get_ifc_options_level_of_detail","title":"<code>get_ifc_options_level_of_detail(self)</code>","text":"<p>get ifc options level of detail</p> <p>Returns:</p> Type Description <code>ifc_options_level_of_detail</code> <p>ifc_options_level_of_detail</p> Source code in <code>cadwork\\ifc_options.py</code> <pre><code>def get_ifc_options_level_of_detail(self) -&gt; 'ifc_options_level_of_detail':\n    \"\"\"get ifc options level of detail\n    Args:\n\n    Returns:\n        ifc_options_level_of_detail\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options.ifc_options.get_ifc_options_project_data","title":"<code>get_ifc_options_project_data(self)</code>","text":"<p>get ifc options project data</p> <p>Returns:</p> Type Description <code>ifc_options_project_data</code> <p>ifc_options_project_data</p> Source code in <code>cadwork\\ifc_options.py</code> <pre><code>def get_ifc_options_project_data(self) -&gt; 'ifc_options_project_data':\n    \"\"\"get ifc options project data\n    Args:\n\n    Returns:\n        ifc_options_project_data\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options.ifc_options.get_ifc_options_properties","title":"<code>get_ifc_options_properties(self)</code>","text":"<p>get ifc options properties</p> <p>Returns:</p> Type Description <code>ifc_options_properties</code> <p>ifc_options_properties</p> Source code in <code>cadwork\\ifc_options.py</code> <pre><code>def get_ifc_options_properties(self) -&gt; 'ifc_options_properties':\n    \"\"\"get ifc options properties\n    Args:\n\n    Returns:\n        ifc_options_properties\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_aggregation","title":"<code>cadwork.ifc_options_aggregation</code>","text":""},{"location":"documentation/ifc_options/#cadwork.ifc_options_aggregation.ifc_options_aggregation","title":"<code> ifc_options_aggregation        </code>","text":"Source code in <code>cadwork\\ifc_options_aggregation.py</code> <pre><code>class ifc_options_aggregation:\n    def set_element_aggregation_attribute(self, element_aggregation_attribute: element_grouping_type) -&gt; None:\n        \"\"\"set element aggregation attribute\n        Args:\n            element_aggregation_attribute ( element_grouping_type): element_aggregation_attribute\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_element_combine_type(self, element_combine_type: ifc_element_combine_behaviour) -&gt; None:\n        \"\"\"set element combine type\n        Args:\n            element_combine_type ( ifc_element_combine_behaviour): element_combine_type\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_element_aggregation_attribute(self) -&gt; int:\n        \"\"\"get element aggregation attribute\n        Args:\n\n        Returns:\n            int\n        \"\"\"\n\n    def get_export_cover_geometry(self) -&gt; bool:\n        \"\"\"get export cover geometry\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def get_element_combine_type(self) -&gt; ifc_element_combine_behaviour:\n        \"\"\"get element combine type\n        Args:\n\n        Returns:\n            ifc_element_combine_behaviour\n        \"\"\"\n\n    def set_export_cover_geometry(self, export_cover_geometry: bool) -&gt; None:\n        \"\"\"set export cover geometry\n        Args:\n            export_cover_geometry ( bool): export_cover_geometry\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_consider_element_aggregation(self, consider_element_aggregation: bool) -&gt; None:\n        \"\"\"set consider element aggregation\n        Args:\n            consider_element_aggregation ( bool): consider_element_aggregation\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_consider_element_aggregation(self) -&gt; bool:\n        \"\"\"get consider element aggregation\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_aggregation.ifc_options_aggregation.get_consider_element_aggregation","title":"<code>get_consider_element_aggregation(self)</code>","text":"<p>get consider element aggregation</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_options_aggregation.py</code> <pre><code>def get_consider_element_aggregation(self) -&gt; bool:\n    \"\"\"get consider element aggregation\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_aggregation.ifc_options_aggregation.get_element_aggregation_attribute","title":"<code>get_element_aggregation_attribute(self)</code>","text":"<p>get element aggregation attribute</p> <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>cadwork\\ifc_options_aggregation.py</code> <pre><code>def get_element_aggregation_attribute(self) -&gt; int:\n    \"\"\"get element aggregation attribute\n    Args:\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_aggregation.ifc_options_aggregation.get_element_combine_type","title":"<code>get_element_combine_type(self)</code>","text":"<p>get element combine type</p> <p>Returns:</p> Type Description <code>ifc_element_combine_behaviour</code> <p>ifc_element_combine_behaviour</p> Source code in <code>cadwork\\ifc_options_aggregation.py</code> <pre><code>def get_element_combine_type(self) -&gt; ifc_element_combine_behaviour:\n    \"\"\"get element combine type\n    Args:\n\n    Returns:\n        ifc_element_combine_behaviour\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_aggregation.ifc_options_aggregation.get_export_cover_geometry","title":"<code>get_export_cover_geometry(self)</code>","text":"<p>get export cover geometry</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_options_aggregation.py</code> <pre><code>def get_export_cover_geometry(self) -&gt; bool:\n    \"\"\"get export cover geometry\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_aggregation.ifc_options_aggregation.set_consider_element_aggregation","title":"<code>set_consider_element_aggregation(self, consider_element_aggregation)</code>","text":"<p>set consider element aggregation</p> <p>Parameters:</p> Name Type Description Default <code>consider_element_aggregation</code> <code> bool</code> <p>consider_element_aggregation</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_aggregation.py</code> <pre><code>def set_consider_element_aggregation(self, consider_element_aggregation: bool) -&gt; None:\n    \"\"\"set consider element aggregation\n    Args:\n        consider_element_aggregation ( bool): consider_element_aggregation\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_aggregation.ifc_options_aggregation.set_element_aggregation_attribute","title":"<code>set_element_aggregation_attribute(self, element_aggregation_attribute)</code>","text":"<p>set element aggregation attribute</p> <p>Parameters:</p> Name Type Description Default <code>element_aggregation_attribute</code> <code> element_grouping_type</code> <p>element_aggregation_attribute</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_aggregation.py</code> <pre><code>def set_element_aggregation_attribute(self, element_aggregation_attribute: element_grouping_type) -&gt; None:\n    \"\"\"set element aggregation attribute\n    Args:\n        element_aggregation_attribute ( element_grouping_type): element_aggregation_attribute\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_aggregation.ifc_options_aggregation.set_element_combine_type","title":"<code>set_element_combine_type(self, element_combine_type)</code>","text":"<p>set element combine type</p> <p>Parameters:</p> Name Type Description Default <code>element_combine_type</code> <code> ifc_element_combine_behaviour</code> <p>element_combine_type</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_aggregation.py</code> <pre><code>def set_element_combine_type(self, element_combine_type: ifc_element_combine_behaviour) -&gt; None:\n    \"\"\"set element combine type\n    Args:\n        element_combine_type ( ifc_element_combine_behaviour): element_combine_type\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_aggregation.ifc_options_aggregation.set_export_cover_geometry","title":"<code>set_export_cover_geometry(self, export_cover_geometry)</code>","text":"<p>set export cover geometry</p> <p>Parameters:</p> Name Type Description Default <code>export_cover_geometry</code> <code> bool</code> <p>export_cover_geometry</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_aggregation.py</code> <pre><code>def set_export_cover_geometry(self, export_cover_geometry: bool) -&gt; None:\n    \"\"\"set export cover geometry\n    Args:\n        export_cover_geometry ( bool): export_cover_geometry\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail","title":"<code>cadwork.ifc_options_level_of_detail</code>","text":""},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail.ifc_options_level_of_detail","title":"<code> ifc_options_level_of_detail        </code>","text":"Source code in <code>cadwork\\ifc_options_level_of_detail.py</code> <pre><code>class ifc_options_level_of_detail:\n    def get_cut_installation_round(self) -&gt; bool:\n        \"\"\"get cut installation round\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def set_export_installation_rectangular_materialization(self, export_installation_rectangular_materialization: bool) -&gt; None:\n        \"\"\"set export installation rectangular materialization\n        Args:\n            export_installation_rectangular_materialization ( bool): export_installation_rectangular_materialization\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_cut_endtype_counterparts(self) -&gt; bool:\n        \"\"\"get cut endtype counterparts\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def set_export_installation_round_materialization(self, export_installation_round_materialization: bool) -&gt; None:\n        \"\"\"set export installation round materialization\n        Args:\n            export_installation_round_materialization ( bool): export_installation_round_materialization\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_cut_endtype_counterparts(self, cut_endtype_counterparts: bool) -&gt; None:\n        \"\"\"set cut endtype counterparts\n        Args:\n            cut_endtype_counterparts ( bool): cut_endtype_counterparts\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_cut_installation_round(self, cut_installation_round: bool) -&gt; None:\n        \"\"\"set cut installation round\n        Args:\n            cut_installation_round ( bool): cut_installation_round\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_export_experimental_swept_solid_materialization(self) -&gt; bool:\n        \"\"\"get export experimental swept solid materialization\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def set_cut_drillings(self, flag: bool) -&gt; None:\n        \"\"\"set cut drillings\n        Args:\n            flag ( bool): flag\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_cut_installation_rectangular(self) -&gt; bool:\n        \"\"\"get cut installation rectangular\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def set_cut_installation_rectangular(self, cut_installation_rectangular: bool) -&gt; None:\n        \"\"\"set cut installation rectangular\n        Args:\n            cut_installation_rectangular ( bool): cut_installation_rectangular\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_export_vba_components(self) -&gt; bool:\n        \"\"\"get export vba components\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def set_export_endtype_materialization(self, materializaiton: bool) -&gt; None:\n        \"\"\"set export endtype materialization\n        Args:\n            materializaiton ( bool): materializaiton\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_export_vba_components(self, export_vba_components: bool) -&gt; None:\n        \"\"\"set export vba components\n        Args:\n            export_vba_components ( bool): export_vba_components\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_export_vba_drillings(self, export_vba_drillings: bool) -&gt; None:\n        \"\"\"set export vba drillings\n        Args:\n            export_vba_drillings ( bool): export_vba_drillings\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_cut_drillings(self) -&gt; bool:\n        \"\"\"get cut drillings\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def get_export_installation_round_materialization(self) -&gt; bool:\n        \"\"\"get export installation round materialization\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def get_export_endtype_materialization(self) -&gt; bool:\n        \"\"\"get export endtype materialization\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def get_export_installation_rectangular_materialization(self) -&gt; bool:\n        \"\"\"get export installation rectangular materialization\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def get_export_vba_drillings(self) -&gt; bool:\n        \"\"\"get export vba drillings\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def set_export_experimental_swept_solid_materialization(self, export_swept_solid_for_simple_geometry: bool) -&gt; None:\n        \"\"\"set export experimental swept solid materialization\n        Args:\n            export_swept_solid_for_simple_geometry ( bool): export_swept_solid_for_simple_geometry\n\n        Returns:\n            None\n        \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail.ifc_options_level_of_detail.get_cut_drillings","title":"<code>get_cut_drillings(self)</code>","text":"<p>get cut drillings</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_options_level_of_detail.py</code> <pre><code>def get_cut_drillings(self) -&gt; bool:\n    \"\"\"get cut drillings\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail.ifc_options_level_of_detail.get_cut_endtype_counterparts","title":"<code>get_cut_endtype_counterparts(self)</code>","text":"<p>get cut endtype counterparts</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_options_level_of_detail.py</code> <pre><code>def get_cut_endtype_counterparts(self) -&gt; bool:\n    \"\"\"get cut endtype counterparts\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail.ifc_options_level_of_detail.get_cut_installation_rectangular","title":"<code>get_cut_installation_rectangular(self)</code>","text":"<p>get cut installation rectangular</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_options_level_of_detail.py</code> <pre><code>def get_cut_installation_rectangular(self) -&gt; bool:\n    \"\"\"get cut installation rectangular\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail.ifc_options_level_of_detail.get_cut_installation_round","title":"<code>get_cut_installation_round(self)</code>","text":"<p>get cut installation round</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_options_level_of_detail.py</code> <pre><code>def get_cut_installation_round(self) -&gt; bool:\n    \"\"\"get cut installation round\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail.ifc_options_level_of_detail.get_export_endtype_materialization","title":"<code>get_export_endtype_materialization(self)</code>","text":"<p>get export endtype materialization</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_options_level_of_detail.py</code> <pre><code>def get_export_endtype_materialization(self) -&gt; bool:\n    \"\"\"get export endtype materialization\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail.ifc_options_level_of_detail.get_export_experimental_swept_solid_materialization","title":"<code>get_export_experimental_swept_solid_materialization(self)</code>","text":"<p>get export experimental swept solid materialization</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_options_level_of_detail.py</code> <pre><code>def get_export_experimental_swept_solid_materialization(self) -&gt; bool:\n    \"\"\"get export experimental swept solid materialization\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail.ifc_options_level_of_detail.get_export_installation_rectangular_materialization","title":"<code>get_export_installation_rectangular_materialization(self)</code>","text":"<p>get export installation rectangular materialization</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_options_level_of_detail.py</code> <pre><code>def get_export_installation_rectangular_materialization(self) -&gt; bool:\n    \"\"\"get export installation rectangular materialization\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail.ifc_options_level_of_detail.get_export_installation_round_materialization","title":"<code>get_export_installation_round_materialization(self)</code>","text":"<p>get export installation round materialization</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_options_level_of_detail.py</code> <pre><code>def get_export_installation_round_materialization(self) -&gt; bool:\n    \"\"\"get export installation round materialization\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail.ifc_options_level_of_detail.get_export_vba_components","title":"<code>get_export_vba_components(self)</code>","text":"<p>get export vba components</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_options_level_of_detail.py</code> <pre><code>def get_export_vba_components(self) -&gt; bool:\n    \"\"\"get export vba components\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail.ifc_options_level_of_detail.get_export_vba_drillings","title":"<code>get_export_vba_drillings(self)</code>","text":"<p>get export vba drillings</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_options_level_of_detail.py</code> <pre><code>def get_export_vba_drillings(self) -&gt; bool:\n    \"\"\"get export vba drillings\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail.ifc_options_level_of_detail.set_cut_drillings","title":"<code>set_cut_drillings(self, flag)</code>","text":"<p>set cut drillings</p> <p>Parameters:</p> Name Type Description Default <code>flag</code> <code> bool</code> <p>flag</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_level_of_detail.py</code> <pre><code>def set_cut_drillings(self, flag: bool) -&gt; None:\n    \"\"\"set cut drillings\n    Args:\n        flag ( bool): flag\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail.ifc_options_level_of_detail.set_cut_endtype_counterparts","title":"<code>set_cut_endtype_counterparts(self, cut_endtype_counterparts)</code>","text":"<p>set cut endtype counterparts</p> <p>Parameters:</p> Name Type Description Default <code>cut_endtype_counterparts</code> <code> bool</code> <p>cut_endtype_counterparts</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_level_of_detail.py</code> <pre><code>def set_cut_endtype_counterparts(self, cut_endtype_counterparts: bool) -&gt; None:\n    \"\"\"set cut endtype counterparts\n    Args:\n        cut_endtype_counterparts ( bool): cut_endtype_counterparts\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail.ifc_options_level_of_detail.set_cut_installation_rectangular","title":"<code>set_cut_installation_rectangular(self, cut_installation_rectangular)</code>","text":"<p>set cut installation rectangular</p> <p>Parameters:</p> Name Type Description Default <code>cut_installation_rectangular</code> <code> bool</code> <p>cut_installation_rectangular</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_level_of_detail.py</code> <pre><code>def set_cut_installation_rectangular(self, cut_installation_rectangular: bool) -&gt; None:\n    \"\"\"set cut installation rectangular\n    Args:\n        cut_installation_rectangular ( bool): cut_installation_rectangular\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail.ifc_options_level_of_detail.set_cut_installation_round","title":"<code>set_cut_installation_round(self, cut_installation_round)</code>","text":"<p>set cut installation round</p> <p>Parameters:</p> Name Type Description Default <code>cut_installation_round</code> <code> bool</code> <p>cut_installation_round</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_level_of_detail.py</code> <pre><code>def set_cut_installation_round(self, cut_installation_round: bool) -&gt; None:\n    \"\"\"set cut installation round\n    Args:\n        cut_installation_round ( bool): cut_installation_round\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail.ifc_options_level_of_detail.set_export_endtype_materialization","title":"<code>set_export_endtype_materialization(self, materializaiton)</code>","text":"<p>set export endtype materialization</p> <p>Parameters:</p> Name Type Description Default <code>materializaiton</code> <code> bool</code> <p>materializaiton</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_level_of_detail.py</code> <pre><code>def set_export_endtype_materialization(self, materializaiton: bool) -&gt; None:\n    \"\"\"set export endtype materialization\n    Args:\n        materializaiton ( bool): materializaiton\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail.ifc_options_level_of_detail.set_export_experimental_swept_solid_materialization","title":"<code>set_export_experimental_swept_solid_materialization(self, export_swept_solid_for_simple_geometry)</code>","text":"<p>set export experimental swept solid materialization</p> <p>Parameters:</p> Name Type Description Default <code>export_swept_solid_for_simple_geometry</code> <code> bool</code> <p>export_swept_solid_for_simple_geometry</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_level_of_detail.py</code> <pre><code>def set_export_experimental_swept_solid_materialization(self, export_swept_solid_for_simple_geometry: bool) -&gt; None:\n    \"\"\"set export experimental swept solid materialization\n    Args:\n        export_swept_solid_for_simple_geometry ( bool): export_swept_solid_for_simple_geometry\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail.ifc_options_level_of_detail.set_export_installation_rectangular_materialization","title":"<code>set_export_installation_rectangular_materialization(self, export_installation_rectangular_materialization)</code>","text":"<p>set export installation rectangular materialization</p> <p>Parameters:</p> Name Type Description Default <code>export_installation_rectangular_materialization</code> <code> bool</code> <p>export_installation_rectangular_materialization</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_level_of_detail.py</code> <pre><code>def set_export_installation_rectangular_materialization(self, export_installation_rectangular_materialization: bool) -&gt; None:\n    \"\"\"set export installation rectangular materialization\n    Args:\n        export_installation_rectangular_materialization ( bool): export_installation_rectangular_materialization\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail.ifc_options_level_of_detail.set_export_installation_round_materialization","title":"<code>set_export_installation_round_materialization(self, export_installation_round_materialization)</code>","text":"<p>set export installation round materialization</p> <p>Parameters:</p> Name Type Description Default <code>export_installation_round_materialization</code> <code> bool</code> <p>export_installation_round_materialization</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_level_of_detail.py</code> <pre><code>def set_export_installation_round_materialization(self, export_installation_round_materialization: bool) -&gt; None:\n    \"\"\"set export installation round materialization\n    Args:\n        export_installation_round_materialization ( bool): export_installation_round_materialization\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail.ifc_options_level_of_detail.set_export_vba_components","title":"<code>set_export_vba_components(self, export_vba_components)</code>","text":"<p>set export vba components</p> <p>Parameters:</p> Name Type Description Default <code>export_vba_components</code> <code> bool</code> <p>export_vba_components</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_level_of_detail.py</code> <pre><code>def set_export_vba_components(self, export_vba_components: bool) -&gt; None:\n    \"\"\"set export vba components\n    Args:\n        export_vba_components ( bool): export_vba_components\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_level_of_detail.ifc_options_level_of_detail.set_export_vba_drillings","title":"<code>set_export_vba_drillings(self, export_vba_drillings)</code>","text":"<p>set export vba drillings</p> <p>Parameters:</p> Name Type Description Default <code>export_vba_drillings</code> <code> bool</code> <p>export_vba_drillings</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_level_of_detail.py</code> <pre><code>def set_export_vba_drillings(self, export_vba_drillings: bool) -&gt; None:\n    \"\"\"set export vba drillings\n    Args:\n        export_vba_drillings ( bool): export_vba_drillings\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_project_data","title":"<code>cadwork.ifc_options_project_data</code>","text":""},{"location":"documentation/ifc_options/#cadwork.ifc_options_project_data.ifc_options_project_data","title":"<code> ifc_options_project_data        </code>","text":"Source code in <code>cadwork\\ifc_options_project_data.py</code> <pre><code>class ifc_options_project_data:\n    def set_export_adress_in_ifc_site(self, export_adress_in_ifc_site: bool) -&gt; None:\n        \"\"\"set export adress in ifc site\n        Args:\n            export_adress_in_ifc_site ( bool): export_adress_in_ifc_site\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_export_project_name_as_ifc_project(self) -&gt; bool:\n        \"\"\"get export project name as ifc project\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def set_export_true_north_in_geometric_context(self, export_true_north_in_geometric_context: bool) -&gt; None:\n        \"\"\"set export true north in geometric context\n        Args:\n            export_true_north_in_geometric_context ( bool): export_true_north_in_geometric_context\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_export_true_north_in_geometric_context(self) -&gt; bool:\n        \"\"\"get export true north in geometric context\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def set_export_project_name_as_ifc_project(self, export_project_name_as_ifc_project: bool) -&gt; None:\n        \"\"\"set export project name as ifc project\n        Args:\n            export_project_name_as_ifc_project ( bool): export_project_name_as_ifc_project\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_export_adress_in_ifc_site(self) -&gt; bool:\n        \"\"\"get export adress in ifc site\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def get_export_coordinates_in_ifc_site(self) -&gt; bool:\n        \"\"\"get export coordinates in ifc site\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def set_export_coordinates_in_ifc_site(self, export_coordinates_in_ifc_site: bool) -&gt; None:\n        \"\"\"set export coordinates in ifc site\n        Args:\n            export_coordinates_in_ifc_site ( bool): export_coordinates_in_ifc_site\n\n        Returns:\n            None\n        \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_project_data.ifc_options_project_data.get_export_adress_in_ifc_site","title":"<code>get_export_adress_in_ifc_site(self)</code>","text":"<p>get export adress in ifc site</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_options_project_data.py</code> <pre><code>def get_export_adress_in_ifc_site(self) -&gt; bool:\n    \"\"\"get export adress in ifc site\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_project_data.ifc_options_project_data.get_export_coordinates_in_ifc_site","title":"<code>get_export_coordinates_in_ifc_site(self)</code>","text":"<p>get export coordinates in ifc site</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_options_project_data.py</code> <pre><code>def get_export_coordinates_in_ifc_site(self) -&gt; bool:\n    \"\"\"get export coordinates in ifc site\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_project_data.ifc_options_project_data.get_export_project_name_as_ifc_project","title":"<code>get_export_project_name_as_ifc_project(self)</code>","text":"<p>get export project name as ifc project</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_options_project_data.py</code> <pre><code>def get_export_project_name_as_ifc_project(self) -&gt; bool:\n    \"\"\"get export project name as ifc project\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_project_data.ifc_options_project_data.get_export_true_north_in_geometric_context","title":"<code>get_export_true_north_in_geometric_context(self)</code>","text":"<p>get export true north in geometric context</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_options_project_data.py</code> <pre><code>def get_export_true_north_in_geometric_context(self) -&gt; bool:\n    \"\"\"get export true north in geometric context\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_project_data.ifc_options_project_data.set_export_adress_in_ifc_site","title":"<code>set_export_adress_in_ifc_site(self, export_adress_in_ifc_site)</code>","text":"<p>set export adress in ifc site</p> <p>Parameters:</p> Name Type Description Default <code>export_adress_in_ifc_site</code> <code> bool</code> <p>export_adress_in_ifc_site</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_project_data.py</code> <pre><code>def set_export_adress_in_ifc_site(self, export_adress_in_ifc_site: bool) -&gt; None:\n    \"\"\"set export adress in ifc site\n    Args:\n        export_adress_in_ifc_site ( bool): export_adress_in_ifc_site\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_project_data.ifc_options_project_data.set_export_coordinates_in_ifc_site","title":"<code>set_export_coordinates_in_ifc_site(self, export_coordinates_in_ifc_site)</code>","text":"<p>set export coordinates in ifc site</p> <p>Parameters:</p> Name Type Description Default <code>export_coordinates_in_ifc_site</code> <code> bool</code> <p>export_coordinates_in_ifc_site</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_project_data.py</code> <pre><code>def set_export_coordinates_in_ifc_site(self, export_coordinates_in_ifc_site: bool) -&gt; None:\n    \"\"\"set export coordinates in ifc site\n    Args:\n        export_coordinates_in_ifc_site ( bool): export_coordinates_in_ifc_site\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_project_data.ifc_options_project_data.set_export_project_name_as_ifc_project","title":"<code>set_export_project_name_as_ifc_project(self, export_project_name_as_ifc_project)</code>","text":"<p>set export project name as ifc project</p> <p>Parameters:</p> Name Type Description Default <code>export_project_name_as_ifc_project</code> <code> bool</code> <p>export_project_name_as_ifc_project</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_project_data.py</code> <pre><code>def set_export_project_name_as_ifc_project(self, export_project_name_as_ifc_project: bool) -&gt; None:\n    \"\"\"set export project name as ifc project\n    Args:\n        export_project_name_as_ifc_project ( bool): export_project_name_as_ifc_project\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_project_data.ifc_options_project_data.set_export_true_north_in_geometric_context","title":"<code>set_export_true_north_in_geometric_context(self, export_true_north_in_geometric_context)</code>","text":"<p>set export true north in geometric context</p> <p>Parameters:</p> Name Type Description Default <code>export_true_north_in_geometric_context</code> <code> bool</code> <p>export_true_north_in_geometric_context</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_project_data.py</code> <pre><code>def set_export_true_north_in_geometric_context(self, export_true_north_in_geometric_context: bool) -&gt; None:\n    \"\"\"set export true north in geometric context\n    Args:\n        export_true_north_in_geometric_context ( bool): export_true_north_in_geometric_context\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_properties","title":"<code>cadwork.ifc_options_properties</code>","text":""},{"location":"documentation/ifc_options/#cadwork.ifc_options_properties.ifc_options_properties","title":"<code> ifc_options_properties        </code>","text":"Source code in <code>cadwork\\ifc_options_properties.py</code> <pre><code>class ifc_options_properties:\n    def get_export_cadwork_3d_pset(self) -&gt; bool:\n        \"\"\"get export cadwork 3d pset\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def get_ignore_user_attributes_used_in_psets(self) -&gt; bool:\n        \"\"\"get ignore user attributes used in psets\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def set_ignore_user_attributes_used_in_psets(self, ignore_user_attributes_used_in_user_psets: bool) -&gt; None:\n        \"\"\"set ignore user attributes used in psets\n        Args:\n            ignore_user_attributes_used_in_user_psets ( bool): ignore_user_attributes_used_in_user_psets\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_export_empty_building_and_storeys(self) -&gt; bool:\n        \"\"\"get export empty building and storeys\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def get_attriubte_nr_ifc_tag(self) -&gt; int:\n        \"\"\"get attriubte nr ifc tag\n        Args:\n\n        Returns:\n            int\n        \"\"\"\n\n    def set_export_bim_wood_property(self, export_bi_mwood_property: bool) -&gt; None:\n        \"\"\"set export bim wood property\n        Args:\n            export_bi_mwood_property ( bool): export_bi_mwood_property\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_attribute_nr_ifc_layer(self) -&gt; int:\n        \"\"\"get attribute nr ifc layer\n        Args:\n\n        Returns:\n            int\n        \"\"\"\n\n    def set_export_empty_building_and_storeys(self, export_empty_building_and_storeys: bool) -&gt; None:\n        \"\"\"set export empty building and storeys\n        Args:\n            export_empty_building_and_storeys ( bool): export_empty_building_and_storeys\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_export_bim_wood_property(self) -&gt; bool:\n        \"\"\"get export bim wood property\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def set_export_cadwork_3d_pset(self, export_cadwork3d_p_set: bool) -&gt; None:\n        \"\"\"set export cadwork 3d pset\n        Args:\n            export_cadwork3d_p_set ( bool): export_cadwork3d_p_set\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_attribute_nr_ifc_layer(self, attribute_nr_ifc_layer: int) -&gt; None:\n        \"\"\"set attribute nr ifc layer\n        Args:\n            attribute_nr_ifc_layer ( int): attribute_nr_ifc_layer\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_attribute_nr_ifc_tag(self, attribute_nr_ifc_tag: int) -&gt; None:\n        \"\"\"set attribute nr ifc tag\n        Args:\n            attribute_nr_ifc_tag ( int): attribute_nr_ifc_tag\n\n        Returns:\n            None\n        \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_properties.ifc_options_properties.get_attribute_nr_ifc_layer","title":"<code>get_attribute_nr_ifc_layer(self)</code>","text":"<p>get attribute nr ifc layer</p> <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>cadwork\\ifc_options_properties.py</code> <pre><code>def get_attribute_nr_ifc_layer(self) -&gt; int:\n    \"\"\"get attribute nr ifc layer\n    Args:\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_properties.ifc_options_properties.get_attriubte_nr_ifc_tag","title":"<code>get_attriubte_nr_ifc_tag(self)</code>","text":"<p>get attriubte nr ifc tag</p> <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>cadwork\\ifc_options_properties.py</code> <pre><code>def get_attriubte_nr_ifc_tag(self) -&gt; int:\n    \"\"\"get attriubte nr ifc tag\n    Args:\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_properties.ifc_options_properties.get_export_bim_wood_property","title":"<code>get_export_bim_wood_property(self)</code>","text":"<p>get export bim wood property</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_options_properties.py</code> <pre><code>def get_export_bim_wood_property(self) -&gt; bool:\n    \"\"\"get export bim wood property\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_properties.ifc_options_properties.get_export_cadwork_3d_pset","title":"<code>get_export_cadwork_3d_pset(self)</code>","text":"<p>get export cadwork 3d pset</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_options_properties.py</code> <pre><code>def get_export_cadwork_3d_pset(self) -&gt; bool:\n    \"\"\"get export cadwork 3d pset\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_properties.ifc_options_properties.get_export_empty_building_and_storeys","title":"<code>get_export_empty_building_and_storeys(self)</code>","text":"<p>get export empty building and storeys</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_options_properties.py</code> <pre><code>def get_export_empty_building_and_storeys(self) -&gt; bool:\n    \"\"\"get export empty building and storeys\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_properties.ifc_options_properties.get_ignore_user_attributes_used_in_psets","title":"<code>get_ignore_user_attributes_used_in_psets(self)</code>","text":"<p>get ignore user attributes used in psets</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\ifc_options_properties.py</code> <pre><code>def get_ignore_user_attributes_used_in_psets(self) -&gt; bool:\n    \"\"\"get ignore user attributes used in psets\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_properties.ifc_options_properties.set_attribute_nr_ifc_layer","title":"<code>set_attribute_nr_ifc_layer(self, attribute_nr_ifc_layer)</code>","text":"<p>set attribute nr ifc layer</p> <p>Parameters:</p> Name Type Description Default <code>attribute_nr_ifc_layer</code> <code> int</code> <p>attribute_nr_ifc_layer</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_properties.py</code> <pre><code>def set_attribute_nr_ifc_layer(self, attribute_nr_ifc_layer: int) -&gt; None:\n    \"\"\"set attribute nr ifc layer\n    Args:\n        attribute_nr_ifc_layer ( int): attribute_nr_ifc_layer\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_properties.ifc_options_properties.set_attribute_nr_ifc_tag","title":"<code>set_attribute_nr_ifc_tag(self, attribute_nr_ifc_tag)</code>","text":"<p>set attribute nr ifc tag</p> <p>Parameters:</p> Name Type Description Default <code>attribute_nr_ifc_tag</code> <code> int</code> <p>attribute_nr_ifc_tag</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_properties.py</code> <pre><code>def set_attribute_nr_ifc_tag(self, attribute_nr_ifc_tag: int) -&gt; None:\n    \"\"\"set attribute nr ifc tag\n    Args:\n        attribute_nr_ifc_tag ( int): attribute_nr_ifc_tag\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_properties.ifc_options_properties.set_export_bim_wood_property","title":"<code>set_export_bim_wood_property(self, export_bi_mwood_property)</code>","text":"<p>set export bim wood property</p> <p>Parameters:</p> Name Type Description Default <code>export_bi_mwood_property</code> <code> bool</code> <p>export_bi_mwood_property</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_properties.py</code> <pre><code>def set_export_bim_wood_property(self, export_bi_mwood_property: bool) -&gt; None:\n    \"\"\"set export bim wood property\n    Args:\n        export_bi_mwood_property ( bool): export_bi_mwood_property\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_properties.ifc_options_properties.set_export_cadwork_3d_pset","title":"<code>set_export_cadwork_3d_pset(self, export_cadwork3d_p_set)</code>","text":"<p>set export cadwork 3d pset</p> <p>Parameters:</p> Name Type Description Default <code>export_cadwork3d_p_set</code> <code> bool</code> <p>export_cadwork3d_p_set</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_properties.py</code> <pre><code>def set_export_cadwork_3d_pset(self, export_cadwork3d_p_set: bool) -&gt; None:\n    \"\"\"set export cadwork 3d pset\n    Args:\n        export_cadwork3d_p_set ( bool): export_cadwork3d_p_set\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_properties.ifc_options_properties.set_export_empty_building_and_storeys","title":"<code>set_export_empty_building_and_storeys(self, export_empty_building_and_storeys)</code>","text":"<p>set export empty building and storeys</p> <p>Parameters:</p> Name Type Description Default <code>export_empty_building_and_storeys</code> <code> bool</code> <p>export_empty_building_and_storeys</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_properties.py</code> <pre><code>def set_export_empty_building_and_storeys(self, export_empty_building_and_storeys: bool) -&gt; None:\n    \"\"\"set export empty building and storeys\n    Args:\n        export_empty_building_and_storeys ( bool): export_empty_building_and_storeys\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/ifc_options/#cadwork.ifc_options_properties.ifc_options_properties.set_ignore_user_attributes_used_in_psets","title":"<code>set_ignore_user_attributes_used_in_psets(self, ignore_user_attributes_used_in_user_psets)</code>","text":"<p>set ignore user attributes used in psets</p> <p>Parameters:</p> Name Type Description Default <code>ignore_user_attributes_used_in_user_psets</code> <code> bool</code> <p>ignore_user_attributes_used_in_user_psets</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\ifc_options_properties.py</code> <pre><code>def set_ignore_user_attributes_used_in_psets(self, ignore_user_attributes_used_in_user_psets: bool) -&gt; None:\n    \"\"\"set ignore user attributes used in psets\n    Args:\n        ignore_user_attributes_used_in_user_psets ( bool): ignore_user_attributes_used_in_user_psets\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/layer_settings/","title":"Layer Settings","text":"<p>rendering: show_root_heading: false show_source: true</p>"},{"location":"documentation/layer_settings/#cadwork.layer_settings","title":"<code>cadwork.layer_settings</code>","text":""},{"location":"documentation/layer_settings/#cadwork.layer_settings.layer_settings","title":"<code> layer_settings        </code>","text":"Source code in <code>cadwork\\layer_settings.py</code> <pre><code>class layer_settings:\n    def isWithDimensionsOutput(self) -&gt; bool:\n        \"\"\"isWithDimensionsOutput\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_with_dimensions_output(self) -&gt; bool:\n        \"\"\"is_with_dimensions_output\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isWithoutDimensionsOutput(self) -&gt; bool:\n        \"\"\"isWithoutDimensionsOutput\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_without_dimensions_output(self) -&gt; bool:\n        \"\"\"is_without_dimensions_output\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isWithoutOutput(self) -&gt; bool:\n        \"\"\"isWithoutOutput\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_without_output(self) -&gt; bool:\n        \"\"\"is_without_output\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setLayer(self, layer_number: int) -&gt; None:\n        \"\"\"setLayer\n        Args:\n            layer_number ( int): layer_number\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_layer(self, layer_number: int) -&gt; None:\n        \"\"\"set_layer\n        Args:\n            layer_number ( int): layer_number\n\n        Returns:\n            None\n        \"\"\"\n\n    def setWithAttributesOutput(self) -&gt; None:\n        \"\"\"setWithAttributesOutput\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_with_attributes_output(self) -&gt; None:\n        \"\"\"set_with_attributes_output\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def getLayer(self) -&gt; int:\n        \"\"\"getLayer\n        Args:\n\n        Returns:\n            int\n        \"\"\"\n\n    def get_layer(self) -&gt; int:\n        \"\"\"get_layer\n        Args:\n\n        Returns:\n            int\n        \"\"\"\n\n    def setWithoutOutput(self) -&gt; None:\n        \"\"\"setWithoutOutput\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_without_output(self) -&gt; None:\n        \"\"\"set_without_output\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isWithAttributesOutput(self) -&gt; bool:\n        \"\"\"isWithAttributesOutput\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_with_attributes_output(self) -&gt; bool:\n        \"\"\"is_with_attributes_output\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setWithDimensionsOutput(self) -&gt; None:\n        \"\"\"setWithDimensionsOutput\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_with_dimensions_output(self) -&gt; None:\n        \"\"\"set_with_dimensions_output\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setWithoutDimensionsOutput(self) -&gt; None:\n        \"\"\"setWithoutDimensionsOutput\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_without_dimensions_output(self) -&gt; None:\n        \"\"\"set_without_dimensions_output\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n</code></pre>"},{"location":"documentation/layer_settings/#cadwork.layer_settings.layer_settings.getLayer","title":"<code>getLayer(self)</code>","text":"<p>getLayer</p> <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>cadwork\\layer_settings.py</code> <pre><code>def getLayer(self) -&gt; int:\n    \"\"\"getLayer\n    Args:\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/layer_settings/#cadwork.layer_settings.layer_settings.get_layer","title":"<code>get_layer(self)</code>","text":"<p>get_layer</p> <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>cadwork\\layer_settings.py</code> <pre><code>def get_layer(self) -&gt; int:\n    \"\"\"get_layer\n    Args:\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/layer_settings/#cadwork.layer_settings.layer_settings.isWithAttributesOutput","title":"<code>isWithAttributesOutput(self)</code>","text":"<p>isWithAttributesOutput</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\layer_settings.py</code> <pre><code>def isWithAttributesOutput(self) -&gt; bool:\n    \"\"\"isWithAttributesOutput\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/layer_settings/#cadwork.layer_settings.layer_settings.isWithDimensionsOutput","title":"<code>isWithDimensionsOutput(self)</code>","text":"<p>isWithDimensionsOutput</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\layer_settings.py</code> <pre><code>def isWithDimensionsOutput(self) -&gt; bool:\n    \"\"\"isWithDimensionsOutput\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/layer_settings/#cadwork.layer_settings.layer_settings.isWithoutDimensionsOutput","title":"<code>isWithoutDimensionsOutput(self)</code>","text":"<p>isWithoutDimensionsOutput</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\layer_settings.py</code> <pre><code>def isWithoutDimensionsOutput(self) -&gt; bool:\n    \"\"\"isWithoutDimensionsOutput\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/layer_settings/#cadwork.layer_settings.layer_settings.isWithoutOutput","title":"<code>isWithoutOutput(self)</code>","text":"<p>isWithoutOutput</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\layer_settings.py</code> <pre><code>def isWithoutOutput(self) -&gt; bool:\n    \"\"\"isWithoutOutput\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/layer_settings/#cadwork.layer_settings.layer_settings.is_with_attributes_output","title":"<code>is_with_attributes_output(self)</code>","text":"<p>is_with_attributes_output</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\layer_settings.py</code> <pre><code>def is_with_attributes_output(self) -&gt; bool:\n    \"\"\"is_with_attributes_output\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/layer_settings/#cadwork.layer_settings.layer_settings.is_with_dimensions_output","title":"<code>is_with_dimensions_output(self)</code>","text":"<p>is_with_dimensions_output</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\layer_settings.py</code> <pre><code>def is_with_dimensions_output(self) -&gt; bool:\n    \"\"\"is_with_dimensions_output\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/layer_settings/#cadwork.layer_settings.layer_settings.is_without_dimensions_output","title":"<code>is_without_dimensions_output(self)</code>","text":"<p>is_without_dimensions_output</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\layer_settings.py</code> <pre><code>def is_without_dimensions_output(self) -&gt; bool:\n    \"\"\"is_without_dimensions_output\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/layer_settings/#cadwork.layer_settings.layer_settings.is_without_output","title":"<code>is_without_output(self)</code>","text":"<p>is_without_output</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\layer_settings.py</code> <pre><code>def is_without_output(self) -&gt; bool:\n    \"\"\"is_without_output\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/layer_settings/#cadwork.layer_settings.layer_settings.setLayer","title":"<code>setLayer(self, layer_number)</code>","text":"<p>setLayer</p> <p>Parameters:</p> Name Type Description Default <code>layer_number</code> <code> int</code> <p>layer_number</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\layer_settings.py</code> <pre><code>def setLayer(self, layer_number: int) -&gt; None:\n    \"\"\"setLayer\n    Args:\n        layer_number ( int): layer_number\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/layer_settings/#cadwork.layer_settings.layer_settings.setWithAttributesOutput","title":"<code>setWithAttributesOutput(self)</code>","text":"<p>setWithAttributesOutput</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\layer_settings.py</code> <pre><code>def setWithAttributesOutput(self) -&gt; None:\n    \"\"\"setWithAttributesOutput\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/layer_settings/#cadwork.layer_settings.layer_settings.setWithDimensionsOutput","title":"<code>setWithDimensionsOutput(self)</code>","text":"<p>setWithDimensionsOutput</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\layer_settings.py</code> <pre><code>def setWithDimensionsOutput(self) -&gt; None:\n    \"\"\"setWithDimensionsOutput\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/layer_settings/#cadwork.layer_settings.layer_settings.setWithoutDimensionsOutput","title":"<code>setWithoutDimensionsOutput(self)</code>","text":"<p>setWithoutDimensionsOutput</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\layer_settings.py</code> <pre><code>def setWithoutDimensionsOutput(self) -&gt; None:\n    \"\"\"setWithoutDimensionsOutput\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/layer_settings/#cadwork.layer_settings.layer_settings.setWithoutOutput","title":"<code>setWithoutOutput(self)</code>","text":"<p>setWithoutOutput</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\layer_settings.py</code> <pre><code>def setWithoutOutput(self) -&gt; None:\n    \"\"\"setWithoutOutput\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/layer_settings/#cadwork.layer_settings.layer_settings.set_layer","title":"<code>set_layer(self, layer_number)</code>","text":"<p>set_layer</p> <p>Parameters:</p> Name Type Description Default <code>layer_number</code> <code> int</code> <p>layer_number</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\layer_settings.py</code> <pre><code>def set_layer(self, layer_number: int) -&gt; None:\n    \"\"\"set_layer\n    Args:\n        layer_number ( int): layer_number\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/layer_settings/#cadwork.layer_settings.layer_settings.set_with_attributes_output","title":"<code>set_with_attributes_output(self)</code>","text":"<p>set_with_attributes_output</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\layer_settings.py</code> <pre><code>def set_with_attributes_output(self) -&gt; None:\n    \"\"\"set_with_attributes_output\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/layer_settings/#cadwork.layer_settings.layer_settings.set_with_dimensions_output","title":"<code>set_with_dimensions_output(self)</code>","text":"<p>set_with_dimensions_output</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\layer_settings.py</code> <pre><code>def set_with_dimensions_output(self) -&gt; None:\n    \"\"\"set_with_dimensions_output\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/layer_settings/#cadwork.layer_settings.layer_settings.set_without_dimensions_output","title":"<code>set_without_dimensions_output(self)</code>","text":"<p>set_without_dimensions_output</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\layer_settings.py</code> <pre><code>def set_without_dimensions_output(self) -&gt; None:\n    \"\"\"set_without_dimensions_output\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/layer_settings/#cadwork.layer_settings.layer_settings.set_without_output","title":"<code>set_without_output(self)</code>","text":"<p>set_without_output</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\layer_settings.py</code> <pre><code>def set_without_output(self) -&gt; None:\n    \"\"\"set_without_output\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/list_controller/","title":"List Controller","text":""},{"location":"documentation/list_controller/#list_controller","title":"<code>list_controller</code>  <code>special</code>","text":""},{"location":"documentation/list_controller/#list_controller.check_position_numbers_part_list","title":"<code>check_position_numbers_part_list()</code>","text":"<p>Checks the part list numbers and returns the element ids with discrepancies </p> <p>Returns:</p> Type Description <code>List[int]</code> <p>element ids with discrepancies (List[int])</p> Source code in <code>list_controller\\__init__.py</code> <pre><code>def check_position_numbers_part_list() -&gt; List[int]:\n    \"\"\"Checks the part list numbers and returns the element ids with discrepancies \n    Args:\n\n    Returns:\n        element ids with discrepancies (List[int])\n    \"\"\"\n</code></pre>"},{"location":"documentation/list_controller/#list_controller.check_position_numbers_production_list","title":"<code>check_position_numbers_production_list()</code>","text":"<p>Checks the production list numbers and returns the element ids with discrepancies </p> <p>Returns:</p> Type Description <code>List[int]</code> <p>element ids with discrepancies (List[int])</p> Source code in <code>list_controller\\__init__.py</code> <pre><code>def check_position_numbers_production_list() -&gt; List[int]:\n    \"\"\"Checks the production list numbers and returns the element ids with discrepancies \n    Args:\n\n    Returns:\n        element ids with discrepancies (List[int])\n    \"\"\"\n</code></pre>"},{"location":"documentation/list_controller/#list_controller.clear_errors","title":"<code>clear_errors()</code>","text":"<p>clear errors</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>list_controller\\__init__.py</code> <pre><code>def clear_errors() -&gt; None:\n    \"\"\"clear errors\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/list_controller/#list_controller.export_part_list","title":"<code>export_part_list(element_id_list, file_path)</code>","text":"<p>Exports a part list </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>list_controller\\__init__.py</code> <pre><code>def export_part_list(element_id_list: List[int], file_path: str) -&gt; None:\n    \"\"\"Exports a part list \n    Args:\n        element_id_list ( List[int]): element_id_list\n        file_path ( str): file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/list_controller/#list_controller.export_part_list_with_settings","title":"<code>export_part_list_with_settings(element_id_list, file_path, settings_file_path)</code>","text":"<p>export part list with settings</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <code>settings_file_path</code> <code> str</code> <p>settings_file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>list_controller\\__init__.py</code> <pre><code>def export_part_list_with_settings(element_id_list: List[int], file_path: str, settings_file_path: str) -&gt; None:\n    \"\"\"export part list with settings\n    Args:\n        element_id_list ( List[int]): element_id_list\n        file_path ( str): file_path\n        settings_file_path ( str): settings_file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/list_controller/#list_controller.export_production_list","title":"<code>export_production_list(element_id_list, file_path)</code>","text":"<p>Exports a production list </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>list_controller\\__init__.py</code> <pre><code>def export_production_list(element_id_list: List[int], file_path: str) -&gt; None:\n    \"\"\"Exports a production list \n    Args:\n        element_id_list ( List[int]): element_id_list\n        file_path ( str): file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/list_controller/#list_controller.export_production_list_with_settings","title":"<code>export_production_list_with_settings(element_id_list, file_path, settings_file_path)</code>","text":"<p>export production list with settings</p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <code>settings_file_path</code> <code> str</code> <p>settings_file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>list_controller\\__init__.py</code> <pre><code>def export_production_list_with_settings(element_id_list: List[int], file_path: str, settings_file_path: str) -&gt; None:\n    \"\"\"export production list with settings\n    Args:\n        element_id_list ( List[int]): element_id_list\n        file_path ( str): file_path\n        settings_file_path ( str): settings_file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/list_controller/#list_controller.generate_new_part_list_numbers","title":"<code>generate_new_part_list_numbers(a0)</code>","text":"<p>generate new part list numbers</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>list_controller\\__init__.py</code> <pre><code>def generate_new_part_list_numbers(a0: List[int]) -&gt; None:\n    \"\"\"generate new part list numbers\n    Args:\n        a0 ( List[int]): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/list_controller/#list_controller.generate_new_part_list_silently","title":"<code>generate_new_part_list_silently(a0, a1, a2, a3)</code>","text":"<p>generate new part list silently</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <code>a1</code> <code> int</code> <p>a1</p> required <code>a2</code> <code> bool</code> <p>a2</p> required <code>a3</code> <code> bool</code> <p>a3</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>list_controller\\__init__.py</code> <pre><code>def generate_new_part_list_silently(a0: List[int], a1: int, a2: bool, a3: bool) -&gt; None:\n    \"\"\"generate new part list silently\n    Args:\n        a0 ( List[int]): a0\n        a1 ( int): a1\n        a2 ( bool): a2\n        a3 ( bool): a3\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/list_controller/#list_controller.generate_new_production_list_numbers","title":"<code>generate_new_production_list_numbers(a0)</code>","text":"<p>generate new production list numbers</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>list_controller\\__init__.py</code> <pre><code>def generate_new_production_list_numbers(a0: List[int]) -&gt; None:\n    \"\"\"generate new production list numbers\n    Args:\n        a0 ( List[int]): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/list_controller/#list_controller.generate_new_production_list_silently","title":"<code>generate_new_production_list_silently(a0, a1, a2, a3)</code>","text":"<p>generate new production list silently</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <code>a1</code> <code> int</code> <p>a1</p> required <code>a2</code> <code> bool</code> <p>a2</p> required <code>a3</code> <code> bool</code> <p>a3</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>list_controller\\__init__.py</code> <pre><code>def generate_new_production_list_silently(a0: List[int], a1: int, a2: bool, a3: bool) -&gt; None:\n    \"\"\"generate new production list silently\n    Args:\n        a0 ( List[int]): a0\n        a1 ( int): a1\n        a2 ( bool): a2\n        a3 ( bool): a3\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/list_controller/#list_controller.get_last_error","title":"<code>get_last_error(error_code)</code>","text":"<p>Gets the last error </p> <p>Parameters:</p> Name Type Description Default <code>error_code</code> <code> int</code> <p>error_code</p> required <p>Returns:</p> Type Description <code>str</code> <p>error string (str)</p> Source code in <code>list_controller\\__init__.py</code> <pre><code>def get_last_error(error_code: int) -&gt; str:\n    \"\"\"Gets the last error \n    Args:\n        error_code ( int): error_code\n\n    Returns:\n        error string (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/list_controller/#list_controller.load_part_list_calculation_settings","title":"<code>load_part_list_calculation_settings(a0)</code>","text":"<p>load part list calculation settings</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> str</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>list_controller\\__init__.py</code> <pre><code>def load_part_list_calculation_settings(a0: str) -&gt; None:\n    \"\"\"load part list calculation settings\n    Args:\n        a0 ( str): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/list_controller/#list_controller.load_production_list_calculation_settings","title":"<code>load_production_list_calculation_settings(a0)</code>","text":"<p>load production list calculation settings</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> str</code> <p>a0</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>list_controller\\__init__.py</code> <pre><code>def load_production_list_calculation_settings(a0: str) -&gt; None:\n    \"\"\"load production list calculation settings\n    Args:\n        a0 ( str): a0\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/machine_controller/","title":"Machine Controller","text":""},{"location":"documentation/machine_controller/#machine_controller","title":"<code>machine_controller</code>  <code>special</code>","text":""},{"location":"documentation/machine_controller/#machine_controller.calculate_btl_machine_data","title":"<code>calculate_btl_machine_data(elements, btl_version)</code>","text":"<p>Calculates the Machine Data for BTL </p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>btl_version</code> <code> int</code> <p>btl_version</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>machine_controller\\__init__.py</code> <pre><code>def calculate_btl_machine_data(elements: List[int], btl_version: int) -&gt; None:\n    \"\"\"Calculates the Machine Data for BTL \n    Args:\n        elements ( List[int]): elements\n        btl_version ( int): btl_version\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/machine_controller/#machine_controller.calculate_hundegger_machine_data","title":"<code>calculate_hundegger_machine_data(elements, hunderggertype)</code>","text":"<p>Calculates the Machine Data for Hundegger </p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code> List[int]</code> <p>elements</p> required <code>hunderggertype</code> <code> int</code> <p>hunderggertype</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>machine_controller\\__init__.py</code> <pre><code>def calculate_hundegger_machine_data(elements: List[int], hunderggertype: int) -&gt; None:\n    \"\"\"Calculates the Machine Data for Hundegger \n    Args:\n        elements ( List[int]): elements\n        hunderggertype ( int): hunderggertype\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/machine_controller/#machine_controller.clear_errors","title":"<code>clear_errors()</code>","text":"<p>clear errors</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>machine_controller\\__init__.py</code> <pre><code>def clear_errors() -&gt; None:\n    \"\"\"clear errors\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/machine_controller/#machine_controller.export_btl","title":"<code>export_btl(btl_version, file_path)</code>","text":"<p>Exports a BTL file </p> <p>Parameters:</p> Name Type Description Default <code>btl_version</code> <code> int</code> <p>btl_version</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>machine_controller\\__init__.py</code> <pre><code>def export_btl(btl_version: int, file_path: str) -&gt; None:\n    \"\"\"Exports a BTL file \n    Args:\n        btl_version ( int): btl_version\n        file_path ( str): file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/machine_controller/#machine_controller.export_btl_with_presetting","title":"<code>export_btl_with_presetting(btl_version, file_path, presetting)</code>","text":"<p>Exports a BTL file with a presetting file </p> <p>Parameters:</p> Name Type Description Default <code>btl_version</code> <code> int</code> <p>btl_version</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <code>presetting</code> <code> str</code> <p>presetting</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>machine_controller\\__init__.py</code> <pre><code>def export_btl_with_presetting(btl_version: int, file_path: str, presetting: str) -&gt; None:\n    \"\"\"Exports a BTL file with a presetting file \n    Args:\n        btl_version ( int): btl_version\n        file_path ( str): file_path\n        presetting ( str): presetting\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/machine_controller/#machine_controller.export_hundegger","title":"<code>export_hundegger(hundeggertype)</code>","text":"<p>Exports a Hundegger file </p> <p>Parameters:</p> Name Type Description Default <code>hundeggertype</code> <code> int</code> <p>hundeggertype</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>machine_controller\\__init__.py</code> <pre><code>def export_hundegger(hundeggertype: int) -&gt; None:\n    \"\"\"Exports a Hundegger file \n    Args:\n        hundeggertype ( int): hundeggertype\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/machine_controller/#machine_controller.export_hundegger_with_file_path","title":"<code>export_hundegger_with_file_path(hundeggertype, file_path)</code>","text":"<p>Exports a Hundegger file </p> <p>Parameters:</p> Name Type Description Default <code>hundeggertype</code> <code> int</code> <p>hundeggertype</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>machine_controller\\__init__.py</code> <pre><code>def export_hundegger_with_file_path(hundeggertype: int, file_path: str) -&gt; None:\n    \"\"\"Exports a Hundegger file \n    Args:\n        hundeggertype ( int): hundeggertype\n        file_path ( str): file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/machine_controller/#machine_controller.export_hundegger_with_file_path_and_presetting","title":"<code>export_hundegger_with_file_path_and_presetting(hundeggertype, file_path, presetting)</code>","text":"<p>Exports a Hundegger file </p> <p>Parameters:</p> Name Type Description Default <code>hundeggertype</code> <code> int</code> <p>hundeggertype</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <code>presetting</code> <code> str</code> <p>presetting</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>machine_controller\\__init__.py</code> <pre><code>def export_hundegger_with_file_path_and_presetting(hundeggertype: int, file_path: str, presetting: str) -&gt; None:\n    \"\"\"Exports a Hundegger file \n    Args:\n        hundeggertype ( int): hundeggertype\n        file_path ( str): file_path\n        presetting ( str): presetting\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/machine_controller/#machine_controller.export_hundegger_with_file_path_and_presetting_silent","title":"<code>export_hundegger_with_file_path_and_presetting_silent(hundeggertype, file_path, presetting)</code>","text":"<p>Exports a Hundegger file silently </p> <p>Parameters:</p> Name Type Description Default <code>hundeggertype</code> <code> int</code> <p>hundeggertype</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <code>presetting</code> <code> str</code> <p>presetting</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>machine_controller\\__init__.py</code> <pre><code>def export_hundegger_with_file_path_and_presetting_silent(hundeggertype: int, file_path: str, presetting: str) -&gt; None:\n    \"\"\"Exports a Hundegger file silently \n    Args:\n        hundeggertype ( int): hundeggertype\n        file_path ( str): file_path\n        presetting ( str): presetting\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/machine_controller/#machine_controller.export_hundegger_with_file_path_silent","title":"<code>export_hundegger_with_file_path_silent(hundeggertype, file_path)</code>","text":"<p>Exports a Hundegger file silently </p> <p>Parameters:</p> Name Type Description Default <code>hundeggertype</code> <code> int</code> <p>hundeggertype</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>machine_controller\\__init__.py</code> <pre><code>def export_hundegger_with_file_path_silent(hundeggertype: int, file_path: str) -&gt; None:\n    \"\"\"Exports a Hundegger file silently \n    Args:\n        hundeggertype ( int): hundeggertype\n        file_path ( str): file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/machine_controller/#machine_controller.export_weinmann_mfb","title":"<code>export_weinmann_mfb(mfb_version)</code>","text":"<p>Exports a WUP file </p> <p>Parameters:</p> Name Type Description Default <code>mfb_version</code> <code> int</code> <p>mfb_version</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>machine_controller\\__init__.py</code> <pre><code>def export_weinmann_mfb(mfb_version: int) -&gt; None:\n    \"\"\"Exports a WUP file \n    Args:\n        mfb_version ( int): mfb_version\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/machine_controller/#machine_controller.get_last_error","title":"<code>get_last_error(error_code)</code>","text":"<p>Gets the last error </p> <p>Parameters:</p> Name Type Description Default <code>error_code</code> <code> int</code> <p>error_code</p> required <p>Returns:</p> Type Description <code>str</code> <p>error string (str)</p> Source code in <code>machine_controller\\__init__.py</code> <pre><code>def get_last_error(error_code: int) -&gt; str:\n    \"\"\"Gets the last error \n    Args:\n        error_code ( int): error_code\n\n    Returns:\n        error string (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/machine_controller/#machine_controller.load_hundegger_calculation_set","title":"<code>load_hundegger_calculation_set(hundeggertype, file_path)</code>","text":"<p>load hundegger calculation set</p> <p>Parameters:</p> Name Type Description Default <code>hundeggertype</code> <code> int</code> <p>hundeggertype</p> required <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>machine_controller\\__init__.py</code> <pre><code>def load_hundegger_calculation_set(hundeggertype: int, file_path: str) -&gt; None:\n    \"\"\"load hundegger calculation set\n    Args:\n        hundeggertype ( int): hundeggertype\n        file_path ( str): file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/","title":"Material Controller","text":""},{"location":"documentation/material_controller/#material_controller","title":"<code>material_controller</code>  <code>special</code>","text":""},{"location":"documentation/material_controller/#material_controller.clear_errors","title":"<code>clear_errors()</code>","text":"<p>clear errors</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def clear_errors() -&gt; None:\n    \"\"\"clear errors\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.create_material","title":"<code>create_material(name)</code>","text":"<p>Creates new material </p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code> str</code> <p>name</p> required <p>Returns:</p> Type Description <code>int</code> <p>material ID (int)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def create_material(name: str) -&gt; int:\n    \"\"\"Creates new material \n    Args:\n        name ( str): name\n\n    Returns:\n        material ID (int)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_all_materials","title":"<code>get_all_materials()</code>","text":"<p>Gets all the materials </p> <p>Returns:</p> Type Description <code>List[int]</code> <p>material ID list (List[int])</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_all_materials() -&gt; List[int]:\n    \"\"\"Gets all the materials \n    Args:\n\n    Returns:\n        material ID list (List[int])\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_burn_off_rate","title":"<code>get_burn_off_rate(material_id)</code>","text":"<p>Gets the material burn-off rate </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>material burn off rate (float)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_burn_off_rate(material_id: int) -&gt; float:\n    \"\"\"Gets the material burn-off rate \n    Args:\n        material_id ( int): material_id\n\n    Returns:\n        material burn off rate (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_code","title":"<code>get_code(material_id)</code>","text":"<p>Gets the material code </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>material code (str)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_code(material_id: int) -&gt; str:\n    \"\"\"Gets the material code \n    Args:\n        material_id ( int): material_id\n\n    Returns:\n        material code (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_composition","title":"<code>get_composition(a0)</code>","text":"<p>get composition</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_composition(a0: int) -&gt; str:\n    \"\"\"get composition\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_drop_forming_class","title":"<code>get_drop_forming_class(material_id)</code>","text":"<p>Gets the material drop forming class </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>material drop forming class (str)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_drop_forming_class(material_id: int) -&gt; str:\n    \"\"\"Gets the material drop forming class \n    Args:\n        material_id ( int): material_id\n\n    Returns:\n        material drop forming class (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_fire_resistance_class","title":"<code>get_fire_resistance_class(material_id)</code>","text":"<p>Gets the material fire resistance class </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>material fire resistance class (str)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_fire_resistance_class(material_id: int) -&gt; str:\n    \"\"\"Gets the material fire resistance class \n    Args:\n        material_id ( int): material_id\n\n    Returns:\n        material fire resistance class (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_grade","title":"<code>get_grade(a0)</code>","text":"<p>get grade</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_grade(a0: int) -&gt; str:\n    \"\"\"get grade\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_group","title":"<code>get_group(material_id)</code>","text":"<p>Gets the material group </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>material group (str)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_group(material_id: int) -&gt; str:\n    \"\"\"Gets the material group \n    Args:\n        material_id ( int): material_id\n\n    Returns:\n        material group (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_heat_capacity","title":"<code>get_heat_capacity(material_id)</code>","text":"<p>Gets the material heat capacity </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>material heat capacity (float)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_heat_capacity(material_id: int) -&gt; float:\n    \"\"\"Gets the material heat capacity \n    Args:\n        material_id ( int): material_id\n\n    Returns:\n        material heat capacity (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_last_error","title":"<code>get_last_error(error_code)</code>","text":"<p>Gets the last error </p> <p>Parameters:</p> Name Type Description Default <code>error_code</code> <code> int</code> <p>error_code</p> required <p>Returns:</p> Type Description <code>str</code> <p>error string (str)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_last_error(error_code: int) -&gt; str:\n    \"\"\"Gets the last error \n    Args:\n        error_code ( int): error_code\n\n    Returns:\n        error string (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_material_id","title":"<code>get_material_id(material_name)</code>","text":"<p>Gets the material with a given name </p> <p>Parameters:</p> Name Type Description Default <code>material_name</code> <code> str</code> <p>material_name</p> required <p>Returns:</p> Type Description <code>int</code> <p>material ID (int)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_material_id(material_name: str) -&gt; int:\n    \"\"\"Gets the material with a given name \n    Args:\n        material_name ( str): material_name\n\n    Returns:\n        material ID (int)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_modulus_elasticity_1","title":"<code>get_modulus_elasticity_1(material_id)</code>","text":"<p>Gets the material modulus of elasticity 1 </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>material modulus of elasticity 1 (float)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_modulus_elasticity_1(material_id: int) -&gt; float:\n    \"\"\"Gets the material modulus of elasticity 1 \n    Args:\n        material_id ( int): material_id\n\n    Returns:\n        material modulus of elasticity 1 (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_modulus_elasticity_2","title":"<code>get_modulus_elasticity_2(material_id)</code>","text":"<p>Gets the material modulus of elasticity 2 </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>material modulus of elasticity 2 (float)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_modulus_elasticity_2(material_id: int) -&gt; float:\n    \"\"\"Gets the material modulus of elasticity 2 \n    Args:\n        material_id ( int): material_id\n\n    Returns:\n        material modulus of elasticity 2 (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_modulus_elasticity_3","title":"<code>get_modulus_elasticity_3(material_id)</code>","text":"<p>Gets the material modulus of elasticity 3 </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>material modulus of elasticity 3 (float)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_modulus_elasticity_3(material_id: int) -&gt; float:\n    \"\"\"Gets the material modulus of elasticity 3 \n    Args:\n        material_id ( int): material_id\n\n    Returns:\n        material modulus of elasticity 3 (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_name","title":"<code>get_name(material_id)</code>","text":"<p>Gets the material name </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>material name (str)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_name(material_id: int) -&gt; str:\n    \"\"\"Gets the material name \n    Args:\n        material_id ( int): material_id\n\n    Returns:\n        material name (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_price","title":"<code>get_price(material_id)</code>","text":"<p>Gets the material price </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>material price (float)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_price(material_id: int) -&gt; float:\n    \"\"\"Gets the material price \n    Args:\n        material_id ( int): material_id\n\n    Returns:\n        material price (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_price_type","title":"<code>get_price_type(material_id)</code>","text":"<p>Sets the material price type </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>material price type (str)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_price_type(material_id: int) -&gt; str:\n    \"\"\"Sets the material price type \n    Args:\n        material_id ( int): material_id\n\n    Returns:\n        material price type (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_quality","title":"<code>get_quality(a0)</code>","text":"<p>get quality</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_quality(a0: int) -&gt; str:\n    \"\"\"get quality\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_shear_modulus_1","title":"<code>get_shear_modulus_1(material_id)</code>","text":"<p>Gets the material shear modulus 1 </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>material shear modulus 1 (float)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_shear_modulus_1(material_id: int) -&gt; float:\n    \"\"\"Gets the material shear modulus 1 \n    Args:\n        material_id ( int): material_id\n\n    Returns:\n        material shear modulus 1 (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_shear_modulus_2","title":"<code>get_shear_modulus_2(material_id)</code>","text":"<p>Gets the material shear modulus 2 </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>material shear modulus 2 (float)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_shear_modulus_2(material_id: int) -&gt; float:\n    \"\"\"Gets the material shear modulus 2 \n    Args:\n        material_id ( int): material_id\n\n    Returns:\n        material shear modulus 2 (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_short_name","title":"<code>get_short_name(a0)</code>","text":"<p>get short name</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_short_name(a0: int) -&gt; str:\n    \"\"\"get short name\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_smoke_class","title":"<code>get_smoke_class(material_id)</code>","text":"<p>Gets the material smoke class </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>material smoke class (str)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_smoke_class(material_id: int) -&gt; str:\n    \"\"\"Gets the material smoke class \n    Args:\n        material_id ( int): material_id\n\n    Returns:\n        material smoke class (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_thermal_conductivity","title":"<code>get_thermal_conductivity(material_id)</code>","text":"<p>Gets the material thermal conductivity </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>material thermal conductivity (float)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_thermal_conductivity(material_id: int) -&gt; float:\n    \"\"\"Gets the material thermal conductivity \n    Args:\n        material_id ( int): material_id\n\n    Returns:\n        material thermal conductivity (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_u_max","title":"<code>get_u_max(material_id)</code>","text":"<p>Gets the material U max </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>material U max (float)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_u_max(material_id: int) -&gt; float:\n    \"\"\"Gets the material U max \n    Args:\n        material_id ( int): material_id\n\n    Returns:\n        material U max (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_u_min","title":"<code>get_u_min(material_id)</code>","text":"<p>Gets the material U min </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>material U min (float)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_u_min(material_id: int) -&gt; float:\n    \"\"\"Gets the material U min \n    Args:\n        material_id ( int): material_id\n\n    Returns:\n        material U min (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_weight","title":"<code>get_weight(material_id)</code>","text":"<p>Gets the material weight </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>material weight (float)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_weight(material_id: int) -&gt; float:\n    \"\"\"Gets the material weight \n    Args:\n        material_id ( int): material_id\n\n    Returns:\n        material weight (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.get_weight_type","title":"<code>get_weight_type(material_id)</code>","text":"<p>Gets the material weight type </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>material weight type (str)</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def get_weight_type(material_id: int) -&gt; str:\n    \"\"\"Gets the material weight type \n    Args:\n        material_id ( int): material_id\n\n    Returns:\n        material weight type (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_burn_off_rate","title":"<code>set_burn_off_rate(material_id, burn_off_rate)</code>","text":"<p>Sets the material burn-off rate </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <code>burn_off_rate</code> <code> float</code> <p>burn_off_rate</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_burn_off_rate(material_id: int, burn_off_rate: float) -&gt; None:\n    \"\"\"Sets the material burn-off rate \n    Args:\n        material_id ( int): material_id\n        burn_off_rate ( float): burn_off_rate\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_code","title":"<code>set_code(material_id, code)</code>","text":"<p>Sets the material code </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <code>code</code> <code> str</code> <p>code</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_code(material_id: int, code: str) -&gt; None:\n    \"\"\"Sets the material code \n    Args:\n        material_id ( int): material_id\n        code ( str): code\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_composition","title":"<code>set_composition(a0, a1)</code>","text":"<p>set composition</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <code>a1</code> <code> str</code> <p>a1</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_composition(a0: int, a1: str) -&gt; None:\n    \"\"\"set composition\n    Args:\n        a0 ( int): a0\n        a1 ( str): a1\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_drop_forming_class","title":"<code>set_drop_forming_class(material_id, drop_forming_class)</code>","text":"<p>Sets the material drop forming class </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <code>drop_forming_class</code> <code> str</code> <p>drop_forming_class</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_drop_forming_class(material_id: int, drop_forming_class: str) -&gt; None:\n    \"\"\"Sets the material drop forming class \n    Args:\n        material_id ( int): material_id\n        drop_forming_class ( str): drop_forming_class\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_fire_resistance_class","title":"<code>set_fire_resistance_class(material_id, fire_resistance_class)</code>","text":"<p>Sets the material fire resistance class </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <code>fire_resistance_class</code> <code> str</code> <p>fire_resistance_class</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_fire_resistance_class(material_id: int, fire_resistance_class: str) -&gt; None:\n    \"\"\"Sets the material fire resistance class \n    Args:\n        material_id ( int): material_id\n        fire_resistance_class ( str): fire_resistance_class\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_grade","title":"<code>set_grade(a0, a1)</code>","text":"<p>set grade</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <code>a1</code> <code> str</code> <p>a1</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_grade(a0: int, a1: str) -&gt; None:\n    \"\"\"set grade\n    Args:\n        a0 ( int): a0\n        a1 ( str): a1\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_group","title":"<code>set_group(material_id, group)</code>","text":"<p>Sets the material group </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <code>group</code> <code> str</code> <p>group</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_group(material_id: int, group: str) -&gt; None:\n    \"\"\"Sets the material group \n    Args:\n        material_id ( int): material_id\n        group ( str): group\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_heat_capacity","title":"<code>set_heat_capacity(material_id, heat_capacity)</code>","text":"<p>Sets the material heat capacity </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <code>heat_capacity</code> <code> float</code> <p>heat_capacity</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_heat_capacity(material_id: int, heat_capacity: float) -&gt; None:\n    \"\"\"Sets the material heat capacity \n    Args:\n        material_id ( int): material_id\n        heat_capacity ( float): heat_capacity\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_modulus_elasticity_1","title":"<code>set_modulus_elasticity_1(material_id, modulus_elasticity1)</code>","text":"<p>Sets the material modulus of elasticity 1 </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <code>modulus_elasticity1</code> <code> float</code> <p>modulus_elasticity1</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_modulus_elasticity_1(material_id: int, modulus_elasticity1: float) -&gt; None:\n    \"\"\"Sets the material modulus of elasticity 1 \n    Args:\n        material_id ( int): material_id\n        modulus_elasticity1 ( float): modulus_elasticity1\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_modulus_elasticity_2","title":"<code>set_modulus_elasticity_2(material_id, modulus_elasticity2)</code>","text":"<p>Sets the material modulus of elasticity 2 </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <code>modulus_elasticity2</code> <code> float</code> <p>modulus_elasticity2</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_modulus_elasticity_2(material_id: int, modulus_elasticity2: float) -&gt; None:\n    \"\"\"Sets the material modulus of elasticity 2 \n    Args:\n        material_id ( int): material_id\n        modulus_elasticity2 ( float): modulus_elasticity2\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_modulus_elasticity_3","title":"<code>set_modulus_elasticity_3(material_id, modulus_elasticity3)</code>","text":"<p>Sets the material modulus of elasticity 3 </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <code>modulus_elasticity3</code> <code> float</code> <p>modulus_elasticity3</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_modulus_elasticity_3(material_id: int, modulus_elasticity3: float) -&gt; None:\n    \"\"\"Sets the material modulus of elasticity 3 \n    Args:\n        material_id ( int): material_id\n        modulus_elasticity3 ( float): modulus_elasticity3\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_name","title":"<code>set_name(material_id, name)</code>","text":"<p>Sets the material name </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <code>name</code> <code> str</code> <p>name</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_name(material_id: int, name: str) -&gt; None:\n    \"\"\"Sets the material name \n    Args:\n        material_id ( int): material_id\n        name ( str): name\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_price","title":"<code>set_price(material_id, price)</code>","text":"<p>Sets the material price </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <code>price</code> <code> float</code> <p>price</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_price(material_id: int, price: float) -&gt; None:\n    \"\"\"Sets the material price \n    Args:\n        material_id ( int): material_id\n        price ( float): price\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_price_type","title":"<code>set_price_type(material_id, price_type)</code>","text":"<p>Sets the material price type </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <code>price_type</code> <code> str</code> <p>price_type</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_price_type(material_id: int, price_type: str) -&gt; None:\n    \"\"\"Sets the material price type \n    Args:\n        material_id ( int): material_id\n        price_type ( str): price_type\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_quality","title":"<code>set_quality(a0, a1)</code>","text":"<p>set quality</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <code>a1</code> <code> str</code> <p>a1</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_quality(a0: int, a1: str) -&gt; None:\n    \"\"\"set quality\n    Args:\n        a0 ( int): a0\n        a1 ( str): a1\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_shear_modulus_1","title":"<code>set_shear_modulus_1(material_id, shear_modulus1)</code>","text":"<p>Sets the material shear modulus 1 </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <code>shear_modulus1</code> <code> float</code> <p>shear_modulus1</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_shear_modulus_1(material_id: int, shear_modulus1: float) -&gt; None:\n    \"\"\"Sets the material shear modulus 1 \n    Args:\n        material_id ( int): material_id\n        shear_modulus1 ( float): shear_modulus1\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_shear_modulus_2","title":"<code>set_shear_modulus_2(material_id, shear_modulus2)</code>","text":"<p>Sets the material shear modulus 2 </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <code>shear_modulus2</code> <code> float</code> <p>shear_modulus2</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_shear_modulus_2(material_id: int, shear_modulus2: float) -&gt; None:\n    \"\"\"Sets the material shear modulus 2 \n    Args:\n        material_id ( int): material_id\n        shear_modulus2 ( float): shear_modulus2\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_smoke_class","title":"<code>set_smoke_class(material_id, smoke_class)</code>","text":"<p>Sets the material smoke class </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <code>smoke_class</code> <code> str</code> <p>smoke_class</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_smoke_class(material_id: int, smoke_class: str) -&gt; None:\n    \"\"\"Sets the material smoke class \n    Args:\n        material_id ( int): material_id\n        smoke_class ( str): smoke_class\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_thermal_conductivity","title":"<code>set_thermal_conductivity(material_id, thermal_conductivity)</code>","text":"<p>Sets the material thermal conductivity </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <code>thermal_conductivity</code> <code> float</code> <p>thermal_conductivity</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_thermal_conductivity(material_id: int, thermal_conductivity: float) -&gt; None:\n    \"\"\"Sets the material thermal conductivity \n    Args:\n        material_id ( int): material_id\n        thermal_conductivity ( float): thermal_conductivity\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_u_max","title":"<code>set_u_max(material_id, u_max)</code>","text":"<p>Sets the material U max </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <code>u_max</code> <code> float</code> <p>u_max</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_u_max(material_id: int, u_max: float) -&gt; None:\n    \"\"\"Sets the material U max \n    Args:\n        material_id ( int): material_id\n        u_max ( float): u_max\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_u_min","title":"<code>set_u_min(material_id, u_min)</code>","text":"<p>Sets the material U min </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <code>u_min</code> <code> float</code> <p>u_min</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_u_min(material_id: int, u_min: float) -&gt; None:\n    \"\"\"Sets the material U min \n    Args:\n        material_id ( int): material_id\n        u_min ( float): u_min\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_weight","title":"<code>set_weight(material_id, weight)</code>","text":"<p>Sets the material weight </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <code>weight</code> <code> float</code> <p>weight</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_weight(material_id: int, weight: float) -&gt; None:\n    \"\"\"Sets the material weight \n    Args:\n        material_id ( int): material_id\n        weight ( float): weight\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/material_controller/#material_controller.set_weight_type","title":"<code>set_weight_type(material_id, weight_type)</code>","text":"<p>Sets the material weight type </p> <p>Parameters:</p> Name Type Description Default <code>material_id</code> <code> int</code> <p>material_id</p> required <code>weight_type</code> <code> str</code> <p>weight_type</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>material_controller\\__init__.py</code> <pre><code>def set_weight_type(material_id: int, weight_type: str) -&gt; None:\n    \"\"\"Sets the material weight type \n    Args:\n        material_id ( int): material_id\n        weight_type ( str): weight_type\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/menu_controller/","title":"Menu Controller","text":""},{"location":"documentation/menu_controller/#menu_controller","title":"<code>menu_controller</code>  <code>special</code>","text":""},{"location":"documentation/menu_controller/#menu_controller.display_simple_menu","title":"<code>display_simple_menu(menu_items)</code>","text":"<p>display simple menu</p> <p>Parameters:</p> Name Type Description Default <code>menu_items</code> <code> List[str]</code> <p>menu_items</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>menu_controller\\__init__.py</code> <pre><code>def display_simple_menu(menu_items: List[str]) -&gt; str:\n    \"\"\"display simple menu\n    Args:\n        menu_items ( List[str]): menu_items\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/point_3d/","title":"point_3d","text":""},{"location":"documentation/point_3d/#cadwork.point_3d","title":"<code>cadwork.point_3d</code>","text":""},{"location":"documentation/point_3d/#cadwork.point_3d.point_3d","title":"<code> point_3d        </code>","text":"Source code in <code>cadwork\\point_3d.py</code> <pre><code>class point_3d:\n    def __init__(self, x: float, y: float, z: float) -&gt; None:\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __add__(self, p: 'point_3d'):\n        \"\"\"adds two points\n\n        Args:\n            p ( point_3d): p\n\n        Returns:\n            point_3d: a third point\n        \"\"\"\n\n    def __sub__(self, p: 'point_3d'):\n        \"\"\"subtracts two points\n\n        Args:\n            p ( point_3d): p\n\n        Returns:\n            point_3d: a third point\n        \"\"\"\n\n    def __mul__(self, p: 'point_3d'):\n        \"\"\"multiplies two points\n\n        Args:\n            p ( point_3d): p\n\n        Returns:\n            point_3d: a third point\n        \"\"\"\n\n    def __div__(self, p: 'point_3d'):\n        \"\"\"divides two points\n\n        Args:\n            p ( point_3d): p\n\n        Returns:\n            point_3d: a third point\n        \"\"\"\n\n    def __eq__(self, p: 'point_3d'):\n        \"\"\"checks if two points are equal\n\n        Args:\n            p ( point_3d): p\n\n        Returns:\n            bool: condition\n        \"\"\"\n\n    def __ne__(self, p: 'point_3d'):\n        \"\"\"checks if two points are not equal\n\n        Args:\n            p ( point_3d): p\n        \"\"\"\n\n    def __getitem__(self, index: int):\n        \"\"\"gets the value of a point at a given index\n\n        Args:\n            index (int): index\n\n        Returns:\n            float: value\n        \"\"\"\n\n    def __setitem__(self, index: int, value: float):\n        \"\"\"sets the value of a point at a given index\n\n        Args:\n            index (int): index\n            value (float): value\n        \"\"\"\n\n    def dot(self, p: 'point_3d') -&gt; float:\n        \"\"\"dot\n        Args:\n            p ( point_3d): p\n\n        Returns:\n            float\n        \"\"\"\n\n    def cross(self, p: 'point_3d') -&gt; 'point_3d':\n        \"\"\"cross\n        Args:\n            p ( point_3d): p\n\n        Returns:\n            point_3d\n        \"\"\"\n\n    def magnitude(self) -&gt; float:\n        \"\"\"magnitude\n        Args:\n\n        Returns:\n            float\n        \"\"\"\n\n    def normalized(self) -&gt; 'point_3d':\n        \"\"\"normalized\n        Args:\n\n        Returns:\n            point_3d\n        \"\"\"\n\n    def distance(self, p: 'point_3d') -&gt; float:\n        \"\"\"distance\n        Args:\n            p ( point_3d): p\n\n        Returns:\n            float\n        \"\"\"\n\n    def invert(self) -&gt; 'point_3d':\n        \"\"\"invert\n        Args:\n\n        Returns:\n            point_3d\n        \"\"\"\n</code></pre>"},{"location":"documentation/point_3d/#cadwork.point_3d.point_3d.__add__","title":"<code>__add__(self, p)</code>  <code>special</code>","text":"<p>adds two points</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code> point_3d</code> <p>p</p> required <p>Returns:</p> Type Description <code>point_3d</code> <p>a third point</p> Source code in <code>cadwork\\point_3d.py</code> <pre><code>def __add__(self, p: 'point_3d'):\n    \"\"\"adds two points\n\n    Args:\n        p ( point_3d): p\n\n    Returns:\n        point_3d: a third point\n    \"\"\"\n</code></pre>"},{"location":"documentation/point_3d/#cadwork.point_3d.point_3d.__div__","title":"<code>__div__(self, p)</code>  <code>special</code>","text":"<p>divides two points</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code> point_3d</code> <p>p</p> required <p>Returns:</p> Type Description <code>point_3d</code> <p>a third point</p> Source code in <code>cadwork\\point_3d.py</code> <pre><code>def __div__(self, p: 'point_3d'):\n    \"\"\"divides two points\n\n    Args:\n        p ( point_3d): p\n\n    Returns:\n        point_3d: a third point\n    \"\"\"\n</code></pre>"},{"location":"documentation/point_3d/#cadwork.point_3d.point_3d.__eq__","title":"<code>__eq__(self, p)</code>  <code>special</code>","text":"<p>checks if two points are equal</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code> point_3d</code> <p>p</p> required <p>Returns:</p> Type Description <code>bool</code> <p>condition</p> Source code in <code>cadwork\\point_3d.py</code> <pre><code>def __eq__(self, p: 'point_3d'):\n    \"\"\"checks if two points are equal\n\n    Args:\n        p ( point_3d): p\n\n    Returns:\n        bool: condition\n    \"\"\"\n</code></pre>"},{"location":"documentation/point_3d/#cadwork.point_3d.point_3d.__getitem__","title":"<code>__getitem__(self, index)</code>  <code>special</code>","text":"<p>gets the value of a point at a given index</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>index</p> required <p>Returns:</p> Type Description <code>float</code> <p>value</p> Source code in <code>cadwork\\point_3d.py</code> <pre><code>def __getitem__(self, index: int):\n    \"\"\"gets the value of a point at a given index\n\n    Args:\n        index (int): index\n\n    Returns:\n        float: value\n    \"\"\"\n</code></pre>"},{"location":"documentation/point_3d/#cadwork.point_3d.point_3d.__mul__","title":"<code>__mul__(self, p)</code>  <code>special</code>","text":"<p>multiplies two points</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code> point_3d</code> <p>p</p> required <p>Returns:</p> Type Description <code>point_3d</code> <p>a third point</p> Source code in <code>cadwork\\point_3d.py</code> <pre><code>def __mul__(self, p: 'point_3d'):\n    \"\"\"multiplies two points\n\n    Args:\n        p ( point_3d): p\n\n    Returns:\n        point_3d: a third point\n    \"\"\"\n</code></pre>"},{"location":"documentation/point_3d/#cadwork.point_3d.point_3d.__ne__","title":"<code>__ne__(self, p)</code>  <code>special</code>","text":"<p>checks if two points are not equal</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code> point_3d</code> <p>p</p> required Source code in <code>cadwork\\point_3d.py</code> <pre><code>def __ne__(self, p: 'point_3d'):\n    \"\"\"checks if two points are not equal\n\n    Args:\n        p ( point_3d): p\n    \"\"\"\n</code></pre>"},{"location":"documentation/point_3d/#cadwork.point_3d.point_3d.__setitem__","title":"<code>__setitem__(self, index, value)</code>  <code>special</code>","text":"<p>sets the value of a point at a given index</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>index</p> required <code>value</code> <code>float</code> <p>value</p> required Source code in <code>cadwork\\point_3d.py</code> <pre><code>def __setitem__(self, index: int, value: float):\n    \"\"\"sets the value of a point at a given index\n\n    Args:\n        index (int): index\n        value (float): value\n    \"\"\"\n</code></pre>"},{"location":"documentation/point_3d/#cadwork.point_3d.point_3d.__sub__","title":"<code>__sub__(self, p)</code>  <code>special</code>","text":"<p>subtracts two points</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code> point_3d</code> <p>p</p> required <p>Returns:</p> Type Description <code>point_3d</code> <p>a third point</p> Source code in <code>cadwork\\point_3d.py</code> <pre><code>def __sub__(self, p: 'point_3d'):\n    \"\"\"subtracts two points\n\n    Args:\n        p ( point_3d): p\n\n    Returns:\n        point_3d: a third point\n    \"\"\"\n</code></pre>"},{"location":"documentation/point_3d/#cadwork.point_3d.point_3d.cross","title":"<code>cross(self, p)</code>","text":"<p>cross</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code> point_3d</code> <p>p</p> required <p>Returns:</p> Type Description <code>point_3d</code> <p>point_3d</p> Source code in <code>cadwork\\point_3d.py</code> <pre><code>def cross(self, p: 'point_3d') -&gt; 'point_3d':\n    \"\"\"cross\n    Args:\n        p ( point_3d): p\n\n    Returns:\n        point_3d\n    \"\"\"\n</code></pre>"},{"location":"documentation/point_3d/#cadwork.point_3d.point_3d.distance","title":"<code>distance(self, p)</code>","text":"<p>distance</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code> point_3d</code> <p>p</p> required <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>cadwork\\point_3d.py</code> <pre><code>def distance(self, p: 'point_3d') -&gt; float:\n    \"\"\"distance\n    Args:\n        p ( point_3d): p\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/point_3d/#cadwork.point_3d.point_3d.dot","title":"<code>dot(self, p)</code>","text":"<p>dot</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code> point_3d</code> <p>p</p> required <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>cadwork\\point_3d.py</code> <pre><code>def dot(self, p: 'point_3d') -&gt; float:\n    \"\"\"dot\n    Args:\n        p ( point_3d): p\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/point_3d/#cadwork.point_3d.point_3d.invert","title":"<code>invert(self)</code>","text":"<p>invert</p> <p>Returns:</p> Type Description <code>point_3d</code> <p>point_3d</p> Source code in <code>cadwork\\point_3d.py</code> <pre><code>def invert(self) -&gt; 'point_3d':\n    \"\"\"invert\n    Args:\n\n    Returns:\n        point_3d\n    \"\"\"\n</code></pre>"},{"location":"documentation/point_3d/#cadwork.point_3d.point_3d.magnitude","title":"<code>magnitude(self)</code>","text":"<p>magnitude</p> <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>cadwork\\point_3d.py</code> <pre><code>def magnitude(self) -&gt; float:\n    \"\"\"magnitude\n    Args:\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/point_3d/#cadwork.point_3d.point_3d.normalized","title":"<code>normalized(self)</code>","text":"<p>normalized</p> <p>Returns:</p> Type Description <code>point_3d</code> <p>point_3d</p> Source code in <code>cadwork\\point_3d.py</code> <pre><code>def normalized(self) -&gt; 'point_3d':\n    \"\"\"normalized\n    Args:\n\n    Returns:\n        point_3d\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/","title":"process_type","text":""},{"location":"documentation/process_type/#cadwork.process_type","title":"<code>cadwork.process_type</code>","text":""},{"location":"documentation/process_type/#cadwork.process_type.process_type","title":"<code> process_type        </code>","text":"Source code in <code>cadwork\\process_type.py</code> <pre><code>class process_type:\n    def isTruss(self) -&gt; bool:\n        \"\"\"isTruss\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_truss(self) -&gt; bool:\n        \"\"\"is_truss\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isUser3(self) -&gt; bool:\n        \"\"\"isUser3\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_user3(self) -&gt; bool:\n        \"\"\"is_user3\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isJackRafter(self) -&gt; bool:\n        \"\"\"isJackRafter\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_jack_rafter(self) -&gt; bool:\n        \"\"\"is_jack_rafter\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setStud(self) -&gt; None:\n        \"\"\"setStud\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_stud(self) -&gt; None:\n        \"\"\"set_stud\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isUser1(self) -&gt; bool:\n        \"\"\"isUser1\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_user1(self) -&gt; bool:\n        \"\"\"is_user1\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setHipValley(self) -&gt; None:\n        \"\"\"setHipValley\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_hip_valley(self) -&gt; None:\n        \"\"\"set_hip_valley\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setPanel1(self) -&gt; None:\n        \"\"\"setPanel1\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_panel1(self) -&gt; None:\n        \"\"\"set_panel1\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isRoughVolumeSolidWoodWall(self) -&gt; bool:\n        \"\"\"isRoughVolumeSolidWoodWall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_rough_volume_solid_wood_wall(self) -&gt; bool:\n        \"\"\"is_rough_volume_solid_wood_wall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isUser2(self) -&gt; bool:\n        \"\"\"isUser2\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_user2(self) -&gt; bool:\n        \"\"\"is_user2\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isPurlin(self) -&gt; bool:\n        \"\"\"isPurlin\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_purlin(self) -&gt; bool:\n        \"\"\"is_purlin\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setLog(self) -&gt; None:\n        \"\"\"setLog\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_log(self) -&gt; None:\n        \"\"\"set_log\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setRoughVolumeSolidWoodWall(self) -&gt; None:\n        \"\"\"setRoughVolumeSolidWoodWall\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_rough_volume_solid_wood_wall(self) -&gt; None:\n        \"\"\"set_rough_volume_solid_wood_wall\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setPanel2(self) -&gt; None:\n        \"\"\"setPanel2\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_panel2(self) -&gt; None:\n        \"\"\"set_panel2\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setTruss(self) -&gt; None:\n        \"\"\"setTruss\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_truss(self) -&gt; None:\n        \"\"\"set_truss\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setPanel4(self) -&gt; None:\n        \"\"\"setPanel4\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_panel4(self) -&gt; None:\n        \"\"\"set_panel4\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setUser3(self) -&gt; None:\n        \"\"\"setUser3\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_user3(self) -&gt; None:\n        \"\"\"set_user3\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setPanel5(self) -&gt; None:\n        \"\"\"setPanel5\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_panel5(self) -&gt; None:\n        \"\"\"set_panel5\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setRafter(self) -&gt; None:\n        \"\"\"setRafter\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_rafter(self) -&gt; None:\n        \"\"\"set_rafter\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isPanel2(self) -&gt; bool:\n        \"\"\"isPanel2\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_panel2(self) -&gt; bool:\n        \"\"\"is_panel2\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setPanel3(self) -&gt; None:\n        \"\"\"setPanel3\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_panel3(self) -&gt; None:\n        \"\"\"set_panel3\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setUser2(self) -&gt; None:\n        \"\"\"setUser2\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_user2(self) -&gt; None:\n        \"\"\"set_user2\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isPanel1(self) -&gt; bool:\n        \"\"\"isPanel1\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_panel1(self) -&gt; bool:\n        \"\"\"is_panel1\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isNone(self) -&gt; bool:\n        \"\"\"isNone\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_none(self) -&gt; bool:\n        \"\"\"is_none\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setNone(self) -&gt; None:\n        \"\"\"setNone\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_none(self) -&gt; None:\n        \"\"\"set_none\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isRoughVolumeFramedWall(self) -&gt; bool:\n        \"\"\"isRoughVolumeFramedWall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_rough_volume_framed_wall(self) -&gt; bool:\n        \"\"\"is_rough_volume_framed_wall\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isRoughVolumeLogHome(self) -&gt; bool:\n        \"\"\"isRoughVolumeLogHome\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_rough_volume_log_home(self) -&gt; bool:\n        \"\"\"is_rough_volume_log_home\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isUser5(self) -&gt; bool:\n        \"\"\"isUser5\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_user5(self) -&gt; bool:\n        \"\"\"is_user5\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setUser4(self) -&gt; None:\n        \"\"\"setUser4\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_user4(self) -&gt; None:\n        \"\"\"set_user4\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setPurlin(self) -&gt; None:\n        \"\"\"setPurlin\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_purlin(self) -&gt; None:\n        \"\"\"set_purlin\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isStud(self) -&gt; bool:\n        \"\"\"isStud\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_stud(self) -&gt; bool:\n        \"\"\"is_stud\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isLog(self) -&gt; bool:\n        \"\"\"isLog\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_log(self) -&gt; bool:\n        \"\"\"is_log\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isPanel4(self) -&gt; bool:\n        \"\"\"isPanel4\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_panel4(self) -&gt; bool:\n        \"\"\"is_panel4\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isPanel3(self) -&gt; bool:\n        \"\"\"isPanel3\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_panel3(self) -&gt; bool:\n        \"\"\"is_panel3\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setJackRafter(self) -&gt; None:\n        \"\"\"setJackRafter\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_jack_rafter(self) -&gt; None:\n        \"\"\"set_jack_rafter\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setTread(self) -&gt; None:\n        \"\"\"setTread\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_tread(self) -&gt; None:\n        \"\"\"set_tread\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def setRoughVolumeLogHome(self) -&gt; None:\n        \"\"\"setRoughVolumeLogHome\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_rough_volume_log_home(self) -&gt; None:\n        \"\"\"set_rough_volume_log_home\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isUser4(self) -&gt; bool:\n        \"\"\"isUser4\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_user4(self) -&gt; bool:\n        \"\"\"is_user4\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setUser5(self) -&gt; None:\n        \"\"\"setUser5\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_user5(self) -&gt; None:\n        \"\"\"set_user5\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isHipValley(self) -&gt; bool:\n        \"\"\"isHipValley\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_hip_valley(self) -&gt; bool:\n        \"\"\"is_hip_valley\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isRafter(self) -&gt; bool:\n        \"\"\"isRafter\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_rafter(self) -&gt; bool:\n        \"\"\"is_rafter\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def isTread(self) -&gt; bool:\n        \"\"\"isTread\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_tread(self) -&gt; bool:\n        \"\"\"is_tread\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setRoughVolumeFramedWall(self) -&gt; None:\n        \"\"\"setRoughVolumeFramedWall\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_rough_volume_framed_wall(self) -&gt; None:\n        \"\"\"set_rough_volume_framed_wall\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def isPanel5(self) -&gt; bool:\n        \"\"\"isPanel5\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def is_panel5(self) -&gt; bool:\n        \"\"\"is_panel5\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def setUser1(self) -&gt; None:\n        \"\"\"setUser1\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n\n    def set_user1(self) -&gt; None:\n        \"\"\"set_user1\n        Args:\n\n        Returns:\n            None\n        \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isHipValley","title":"<code>isHipValley(self)</code>","text":"<p>isHipValley</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isHipValley(self) -&gt; bool:\n    \"\"\"isHipValley\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isJackRafter","title":"<code>isJackRafter(self)</code>","text":"<p>isJackRafter</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isJackRafter(self) -&gt; bool:\n    \"\"\"isJackRafter\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isLog","title":"<code>isLog(self)</code>","text":"<p>isLog</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isLog(self) -&gt; bool:\n    \"\"\"isLog\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isNone","title":"<code>isNone(self)</code>","text":"<p>isNone</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isNone(self) -&gt; bool:\n    \"\"\"isNone\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isPanel1","title":"<code>isPanel1(self)</code>","text":"<p>isPanel1</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isPanel1(self) -&gt; bool:\n    \"\"\"isPanel1\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isPanel2","title":"<code>isPanel2(self)</code>","text":"<p>isPanel2</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isPanel2(self) -&gt; bool:\n    \"\"\"isPanel2\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isPanel3","title":"<code>isPanel3(self)</code>","text":"<p>isPanel3</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isPanel3(self) -&gt; bool:\n    \"\"\"isPanel3\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isPanel4","title":"<code>isPanel4(self)</code>","text":"<p>isPanel4</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isPanel4(self) -&gt; bool:\n    \"\"\"isPanel4\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isPanel5","title":"<code>isPanel5(self)</code>","text":"<p>isPanel5</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isPanel5(self) -&gt; bool:\n    \"\"\"isPanel5\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isPurlin","title":"<code>isPurlin(self)</code>","text":"<p>isPurlin</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isPurlin(self) -&gt; bool:\n    \"\"\"isPurlin\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isRafter","title":"<code>isRafter(self)</code>","text":"<p>isRafter</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isRafter(self) -&gt; bool:\n    \"\"\"isRafter\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isRoughVolumeFramedWall","title":"<code>isRoughVolumeFramedWall(self)</code>","text":"<p>isRoughVolumeFramedWall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isRoughVolumeFramedWall(self) -&gt; bool:\n    \"\"\"isRoughVolumeFramedWall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isRoughVolumeLogHome","title":"<code>isRoughVolumeLogHome(self)</code>","text":"<p>isRoughVolumeLogHome</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isRoughVolumeLogHome(self) -&gt; bool:\n    \"\"\"isRoughVolumeLogHome\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isRoughVolumeSolidWoodWall","title":"<code>isRoughVolumeSolidWoodWall(self)</code>","text":"<p>isRoughVolumeSolidWoodWall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isRoughVolumeSolidWoodWall(self) -&gt; bool:\n    \"\"\"isRoughVolumeSolidWoodWall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isStud","title":"<code>isStud(self)</code>","text":"<p>isStud</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isStud(self) -&gt; bool:\n    \"\"\"isStud\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isTread","title":"<code>isTread(self)</code>","text":"<p>isTread</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isTread(self) -&gt; bool:\n    \"\"\"isTread\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isTruss","title":"<code>isTruss(self)</code>","text":"<p>isTruss</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isTruss(self) -&gt; bool:\n    \"\"\"isTruss\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isUser1","title":"<code>isUser1(self)</code>","text":"<p>isUser1</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isUser1(self) -&gt; bool:\n    \"\"\"isUser1\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isUser2","title":"<code>isUser2(self)</code>","text":"<p>isUser2</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isUser2(self) -&gt; bool:\n    \"\"\"isUser2\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isUser3","title":"<code>isUser3(self)</code>","text":"<p>isUser3</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isUser3(self) -&gt; bool:\n    \"\"\"isUser3\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isUser4","title":"<code>isUser4(self)</code>","text":"<p>isUser4</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isUser4(self) -&gt; bool:\n    \"\"\"isUser4\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.isUser5","title":"<code>isUser5(self)</code>","text":"<p>isUser5</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def isUser5(self) -&gt; bool:\n    \"\"\"isUser5\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_hip_valley","title":"<code>is_hip_valley(self)</code>","text":"<p>is_hip_valley</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_hip_valley(self) -&gt; bool:\n    \"\"\"is_hip_valley\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_jack_rafter","title":"<code>is_jack_rafter(self)</code>","text":"<p>is_jack_rafter</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_jack_rafter(self) -&gt; bool:\n    \"\"\"is_jack_rafter\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_log","title":"<code>is_log(self)</code>","text":"<p>is_log</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_log(self) -&gt; bool:\n    \"\"\"is_log\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_none","title":"<code>is_none(self)</code>","text":"<p>is_none</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_none(self) -&gt; bool:\n    \"\"\"is_none\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_panel1","title":"<code>is_panel1(self)</code>","text":"<p>is_panel1</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_panel1(self) -&gt; bool:\n    \"\"\"is_panel1\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_panel2","title":"<code>is_panel2(self)</code>","text":"<p>is_panel2</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_panel2(self) -&gt; bool:\n    \"\"\"is_panel2\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_panel3","title":"<code>is_panel3(self)</code>","text":"<p>is_panel3</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_panel3(self) -&gt; bool:\n    \"\"\"is_panel3\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_panel4","title":"<code>is_panel4(self)</code>","text":"<p>is_panel4</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_panel4(self) -&gt; bool:\n    \"\"\"is_panel4\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_panel5","title":"<code>is_panel5(self)</code>","text":"<p>is_panel5</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_panel5(self) -&gt; bool:\n    \"\"\"is_panel5\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_purlin","title":"<code>is_purlin(self)</code>","text":"<p>is_purlin</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_purlin(self) -&gt; bool:\n    \"\"\"is_purlin\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_rafter","title":"<code>is_rafter(self)</code>","text":"<p>is_rafter</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_rafter(self) -&gt; bool:\n    \"\"\"is_rafter\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_rough_volume_framed_wall","title":"<code>is_rough_volume_framed_wall(self)</code>","text":"<p>is_rough_volume_framed_wall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_rough_volume_framed_wall(self) -&gt; bool:\n    \"\"\"is_rough_volume_framed_wall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_rough_volume_log_home","title":"<code>is_rough_volume_log_home(self)</code>","text":"<p>is_rough_volume_log_home</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_rough_volume_log_home(self) -&gt; bool:\n    \"\"\"is_rough_volume_log_home\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_rough_volume_solid_wood_wall","title":"<code>is_rough_volume_solid_wood_wall(self)</code>","text":"<p>is_rough_volume_solid_wood_wall</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_rough_volume_solid_wood_wall(self) -&gt; bool:\n    \"\"\"is_rough_volume_solid_wood_wall\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_stud","title":"<code>is_stud(self)</code>","text":"<p>is_stud</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_stud(self) -&gt; bool:\n    \"\"\"is_stud\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_tread","title":"<code>is_tread(self)</code>","text":"<p>is_tread</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_tread(self) -&gt; bool:\n    \"\"\"is_tread\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_truss","title":"<code>is_truss(self)</code>","text":"<p>is_truss</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_truss(self) -&gt; bool:\n    \"\"\"is_truss\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_user1","title":"<code>is_user1(self)</code>","text":"<p>is_user1</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_user1(self) -&gt; bool:\n    \"\"\"is_user1\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_user2","title":"<code>is_user2(self)</code>","text":"<p>is_user2</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_user2(self) -&gt; bool:\n    \"\"\"is_user2\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_user3","title":"<code>is_user3(self)</code>","text":"<p>is_user3</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_user3(self) -&gt; bool:\n    \"\"\"is_user3\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_user4","title":"<code>is_user4(self)</code>","text":"<p>is_user4</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_user4(self) -&gt; bool:\n    \"\"\"is_user4\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.is_user5","title":"<code>is_user5(self)</code>","text":"<p>is_user5</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def is_user5(self) -&gt; bool:\n    \"\"\"is_user5\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setHipValley","title":"<code>setHipValley(self)</code>","text":"<p>setHipValley</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setHipValley(self) -&gt; None:\n    \"\"\"setHipValley\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setJackRafter","title":"<code>setJackRafter(self)</code>","text":"<p>setJackRafter</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setJackRafter(self) -&gt; None:\n    \"\"\"setJackRafter\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setLog","title":"<code>setLog(self)</code>","text":"<p>setLog</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setLog(self) -&gt; None:\n    \"\"\"setLog\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setNone","title":"<code>setNone(self)</code>","text":"<p>setNone</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setNone(self) -&gt; None:\n    \"\"\"setNone\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setPanel1","title":"<code>setPanel1(self)</code>","text":"<p>setPanel1</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setPanel1(self) -&gt; None:\n    \"\"\"setPanel1\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setPanel2","title":"<code>setPanel2(self)</code>","text":"<p>setPanel2</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setPanel2(self) -&gt; None:\n    \"\"\"setPanel2\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setPanel3","title":"<code>setPanel3(self)</code>","text":"<p>setPanel3</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setPanel3(self) -&gt; None:\n    \"\"\"setPanel3\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setPanel4","title":"<code>setPanel4(self)</code>","text":"<p>setPanel4</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setPanel4(self) -&gt; None:\n    \"\"\"setPanel4\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setPanel5","title":"<code>setPanel5(self)</code>","text":"<p>setPanel5</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setPanel5(self) -&gt; None:\n    \"\"\"setPanel5\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setPurlin","title":"<code>setPurlin(self)</code>","text":"<p>setPurlin</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setPurlin(self) -&gt; None:\n    \"\"\"setPurlin\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setRafter","title":"<code>setRafter(self)</code>","text":"<p>setRafter</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setRafter(self) -&gt; None:\n    \"\"\"setRafter\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setRoughVolumeFramedWall","title":"<code>setRoughVolumeFramedWall(self)</code>","text":"<p>setRoughVolumeFramedWall</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setRoughVolumeFramedWall(self) -&gt; None:\n    \"\"\"setRoughVolumeFramedWall\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setRoughVolumeLogHome","title":"<code>setRoughVolumeLogHome(self)</code>","text":"<p>setRoughVolumeLogHome</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setRoughVolumeLogHome(self) -&gt; None:\n    \"\"\"setRoughVolumeLogHome\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setRoughVolumeSolidWoodWall","title":"<code>setRoughVolumeSolidWoodWall(self)</code>","text":"<p>setRoughVolumeSolidWoodWall</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setRoughVolumeSolidWoodWall(self) -&gt; None:\n    \"\"\"setRoughVolumeSolidWoodWall\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setStud","title":"<code>setStud(self)</code>","text":"<p>setStud</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setStud(self) -&gt; None:\n    \"\"\"setStud\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setTread","title":"<code>setTread(self)</code>","text":"<p>setTread</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setTread(self) -&gt; None:\n    \"\"\"setTread\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setTruss","title":"<code>setTruss(self)</code>","text":"<p>setTruss</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setTruss(self) -&gt; None:\n    \"\"\"setTruss\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setUser1","title":"<code>setUser1(self)</code>","text":"<p>setUser1</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setUser1(self) -&gt; None:\n    \"\"\"setUser1\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setUser2","title":"<code>setUser2(self)</code>","text":"<p>setUser2</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setUser2(self) -&gt; None:\n    \"\"\"setUser2\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setUser3","title":"<code>setUser3(self)</code>","text":"<p>setUser3</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setUser3(self) -&gt; None:\n    \"\"\"setUser3\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setUser4","title":"<code>setUser4(self)</code>","text":"<p>setUser4</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setUser4(self) -&gt; None:\n    \"\"\"setUser4\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.setUser5","title":"<code>setUser5(self)</code>","text":"<p>setUser5</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def setUser5(self) -&gt; None:\n    \"\"\"setUser5\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_hip_valley","title":"<code>set_hip_valley(self)</code>","text":"<p>set_hip_valley</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_hip_valley(self) -&gt; None:\n    \"\"\"set_hip_valley\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_jack_rafter","title":"<code>set_jack_rafter(self)</code>","text":"<p>set_jack_rafter</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_jack_rafter(self) -&gt; None:\n    \"\"\"set_jack_rafter\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_log","title":"<code>set_log(self)</code>","text":"<p>set_log</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_log(self) -&gt; None:\n    \"\"\"set_log\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_none","title":"<code>set_none(self)</code>","text":"<p>set_none</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_none(self) -&gt; None:\n    \"\"\"set_none\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_panel1","title":"<code>set_panel1(self)</code>","text":"<p>set_panel1</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_panel1(self) -&gt; None:\n    \"\"\"set_panel1\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_panel2","title":"<code>set_panel2(self)</code>","text":"<p>set_panel2</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_panel2(self) -&gt; None:\n    \"\"\"set_panel2\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_panel3","title":"<code>set_panel3(self)</code>","text":"<p>set_panel3</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_panel3(self) -&gt; None:\n    \"\"\"set_panel3\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_panel4","title":"<code>set_panel4(self)</code>","text":"<p>set_panel4</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_panel4(self) -&gt; None:\n    \"\"\"set_panel4\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_panel5","title":"<code>set_panel5(self)</code>","text":"<p>set_panel5</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_panel5(self) -&gt; None:\n    \"\"\"set_panel5\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_purlin","title":"<code>set_purlin(self)</code>","text":"<p>set_purlin</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_purlin(self) -&gt; None:\n    \"\"\"set_purlin\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_rafter","title":"<code>set_rafter(self)</code>","text":"<p>set_rafter</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_rafter(self) -&gt; None:\n    \"\"\"set_rafter\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_rough_volume_framed_wall","title":"<code>set_rough_volume_framed_wall(self)</code>","text":"<p>set_rough_volume_framed_wall</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_rough_volume_framed_wall(self) -&gt; None:\n    \"\"\"set_rough_volume_framed_wall\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_rough_volume_log_home","title":"<code>set_rough_volume_log_home(self)</code>","text":"<p>set_rough_volume_log_home</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_rough_volume_log_home(self) -&gt; None:\n    \"\"\"set_rough_volume_log_home\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_rough_volume_solid_wood_wall","title":"<code>set_rough_volume_solid_wood_wall(self)</code>","text":"<p>set_rough_volume_solid_wood_wall</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_rough_volume_solid_wood_wall(self) -&gt; None:\n    \"\"\"set_rough_volume_solid_wood_wall\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_stud","title":"<code>set_stud(self)</code>","text":"<p>set_stud</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_stud(self) -&gt; None:\n    \"\"\"set_stud\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_tread","title":"<code>set_tread(self)</code>","text":"<p>set_tread</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_tread(self) -&gt; None:\n    \"\"\"set_tread\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_truss","title":"<code>set_truss(self)</code>","text":"<p>set_truss</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_truss(self) -&gt; None:\n    \"\"\"set_truss\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_user1","title":"<code>set_user1(self)</code>","text":"<p>set_user1</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_user1(self) -&gt; None:\n    \"\"\"set_user1\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_user2","title":"<code>set_user2(self)</code>","text":"<p>set_user2</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_user2(self) -&gt; None:\n    \"\"\"set_user2\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_user3","title":"<code>set_user3(self)</code>","text":"<p>set_user3</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_user3(self) -&gt; None:\n    \"\"\"set_user3\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_user4","title":"<code>set_user4(self)</code>","text":"<p>set_user4</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_user4(self) -&gt; None:\n    \"\"\"set_user4\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/process_type/#cadwork.process_type.process_type.set_user5","title":"<code>set_user5(self)</code>","text":"<p>set_user5</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\process_type.py</code> <pre><code>def set_user5(self) -&gt; None:\n    \"\"\"set_user5\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/rhino_export_options/","title":"rhino_options","text":"<p>rendering: show_root_heading: false show_source: true</p>"},{"location":"documentation/rhino_export_options/#cadwork.rhino_options","title":"<code>cadwork.rhino_options</code>","text":""},{"location":"documentation/rhino_export_options/#cadwork.rhino_options.rhino_options","title":"<code> rhino_options        </code>","text":"Source code in <code>cadwork\\rhino_options.py</code> <pre><code>class rhino_options:\n    def get_materialize_end_types(self) -&gt; bool:\n        \"\"\"get materialize end types\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def set_materialize_end_types(self, flag: bool) -&gt; None:\n        \"\"\"set materialize end types\n        Args:\n            flag ( bool): flag\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_cut_end_types_counterparts(self) -&gt; bool:\n        \"\"\"get cut end types counterparts\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def set_cut_end_types_counterparts(self, flag: bool) -&gt; None:\n        \"\"\"set cut end types counterparts\n        Args:\n            flag ( bool): flag\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_cut_drillings(self) -&gt; bool:\n        \"\"\"get cut drillings\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def set_cut_drillings(self, flag: bool) -&gt; None:\n        \"\"\"set cut drillings\n        Args:\n            flag ( bool): flag\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_cut_mep(self) -&gt; bool:\n        \"\"\"get cut mep\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def set_cut_mep(self, flag: bool) -&gt; None:\n        \"\"\"set cut mep\n        Args:\n            flag ( bool): flag\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_cut_openings(self) -&gt; bool:\n        \"\"\"get cut openings\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def set_cut_openings(self, flag: bool) -&gt; None:\n        \"\"\"set cut openings\n        Args:\n            flag ( bool): flag\n\n        Returns:\n            None\n        \"\"\"\n</code></pre>"},{"location":"documentation/rhino_export_options/#cadwork.rhino_options.rhino_options.get_cut_drillings","title":"<code>get_cut_drillings(self)</code>","text":"<p>get cut drillings</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\rhino_options.py</code> <pre><code>def get_cut_drillings(self) -&gt; bool:\n    \"\"\"get cut drillings\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/rhino_export_options/#cadwork.rhino_options.rhino_options.get_cut_end_types_counterparts","title":"<code>get_cut_end_types_counterparts(self)</code>","text":"<p>get cut end types counterparts</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\rhino_options.py</code> <pre><code>def get_cut_end_types_counterparts(self) -&gt; bool:\n    \"\"\"get cut end types counterparts\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/rhino_export_options/#cadwork.rhino_options.rhino_options.get_cut_mep","title":"<code>get_cut_mep(self)</code>","text":"<p>get cut mep</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\rhino_options.py</code> <pre><code>def get_cut_mep(self) -&gt; bool:\n    \"\"\"get cut mep\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/rhino_export_options/#cadwork.rhino_options.rhino_options.get_cut_openings","title":"<code>get_cut_openings(self)</code>","text":"<p>get cut openings</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\rhino_options.py</code> <pre><code>def get_cut_openings(self) -&gt; bool:\n    \"\"\"get cut openings\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/rhino_export_options/#cadwork.rhino_options.rhino_options.get_materialize_end_types","title":"<code>get_materialize_end_types(self)</code>","text":"<p>get materialize end types</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\rhino_options.py</code> <pre><code>def get_materialize_end_types(self) -&gt; bool:\n    \"\"\"get materialize end types\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/rhino_export_options/#cadwork.rhino_options.rhino_options.set_cut_drillings","title":"<code>set_cut_drillings(self, flag)</code>","text":"<p>set cut drillings</p> <p>Parameters:</p> Name Type Description Default <code>flag</code> <code> bool</code> <p>flag</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\rhino_options.py</code> <pre><code>def set_cut_drillings(self, flag: bool) -&gt; None:\n    \"\"\"set cut drillings\n    Args:\n        flag ( bool): flag\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/rhino_export_options/#cadwork.rhino_options.rhino_options.set_cut_end_types_counterparts","title":"<code>set_cut_end_types_counterparts(self, flag)</code>","text":"<p>set cut end types counterparts</p> <p>Parameters:</p> Name Type Description Default <code>flag</code> <code> bool</code> <p>flag</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\rhino_options.py</code> <pre><code>def set_cut_end_types_counterparts(self, flag: bool) -&gt; None:\n    \"\"\"set cut end types counterparts\n    Args:\n        flag ( bool): flag\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/rhino_export_options/#cadwork.rhino_options.rhino_options.set_cut_mep","title":"<code>set_cut_mep(self, flag)</code>","text":"<p>set cut mep</p> <p>Parameters:</p> Name Type Description Default <code>flag</code> <code> bool</code> <p>flag</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\rhino_options.py</code> <pre><code>def set_cut_mep(self, flag: bool) -&gt; None:\n    \"\"\"set cut mep\n    Args:\n        flag ( bool): flag\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/rhino_export_options/#cadwork.rhino_options.rhino_options.set_cut_openings","title":"<code>set_cut_openings(self, flag)</code>","text":"<p>set cut openings</p> <p>Parameters:</p> Name Type Description Default <code>flag</code> <code> bool</code> <p>flag</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\rhino_options.py</code> <pre><code>def set_cut_openings(self, flag: bool) -&gt; None:\n    \"\"\"set cut openings\n    Args:\n        flag ( bool): flag\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/rhino_export_options/#cadwork.rhino_options.rhino_options.set_materialize_end_types","title":"<code>set_materialize_end_types(self, flag)</code>","text":"<p>set materialize end types</p> <p>Parameters:</p> Name Type Description Default <code>flag</code> <code> bool</code> <p>flag</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\rhino_options.py</code> <pre><code>def set_materialize_end_types(self, flag: bool) -&gt; None:\n    \"\"\"set materialize end types\n    Args:\n        flag ( bool): flag\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/roof_controller/","title":"Roof Controller","text":""},{"location":"documentation/roof_controller/#roof_controller","title":"<code>roof_controller</code>  <code>special</code>","text":""},{"location":"documentation/roof_controller/#roof_controller.clear_errors","title":"<code>clear_errors()</code>","text":"<p>clear errors</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>roof_controller\\__init__.py</code> <pre><code>def clear_errors() -&gt; None:\n    \"\"\"clear errors\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/roof_controller/#roof_controller.get_all_caddy_element_ids","title":"<code>get_all_caddy_element_ids()</code>","text":"<p>Gets all caddy elements </p> <p>Returns:</p> Type Description <code>List[int]</code> <p>element ID list (List[int])</p> Source code in <code>roof_controller\\__init__.py</code> <pre><code>def get_all_caddy_element_ids() -&gt; List[int]:\n    \"\"\"Gets all caddy elements \n    Args:\n\n    Returns:\n        element ID list (List[int])\n    \"\"\"\n</code></pre>"},{"location":"documentation/roof_controller/#roof_controller.get_edge_length","title":"<code>get_edge_length(element_id, edge_type)</code>","text":"<p>Gets the edge length </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <code>edge_type</code> <code> str</code> <p>edge_type</p> required <p>Returns:</p> Type Description <code>float</code> <p>edge length (float)</p> Source code in <code>roof_controller\\__init__.py</code> <pre><code>def get_edge_length(element_id: int, edge_type: str) -&gt; float:\n    \"\"\"Gets the edge length \n    Args:\n        element_id ( int): element_id\n        edge_type ( str): edge_type\n\n    Returns:\n        edge length (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/roof_controller/#roof_controller.get_last_error","title":"<code>get_last_error(a0)</code>","text":"<p>get last error</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>roof_controller\\__init__.py</code> <pre><code>def get_last_error(a0: int) -&gt; str:\n    \"\"\"get last error\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/roof_controller/#roof_controller.get_profile_length","title":"<code>get_profile_length(element_id)</code>","text":"<p>Gets the profile length </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>float</code> <p>profile length (float)</p> Source code in <code>roof_controller\\__init__.py</code> <pre><code>def get_profile_length(element_id: int) -&gt; float:\n    \"\"\"Gets the profile length \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        profile length (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/scene_controller/","title":"Scene Controller","text":""},{"location":"documentation/scene_controller/#scene_controller","title":"<code>scene_controller</code>  <code>special</code>","text":""},{"location":"documentation/scene_controller/#scene_controller.activate_scene","title":"<code>activate_scene(name)</code>","text":"<p>Activates a scene </p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code> str</code> <p>name</p> required <p>Returns:</p> Type Description <code>bool</code> <p>did operation succeed (bool)</p> Source code in <code>scene_controller\\__init__.py</code> <pre><code>def activate_scene(name: str) -&gt; bool:\n    \"\"\"Activates a scene \n    Args:\n        name ( str): name\n\n    Returns:\n        did operation succeed (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/scene_controller/#scene_controller.add_elements_to_scene","title":"<code>add_elements_to_scene(name, element_i_ds)</code>","text":"<p>Adds elements to a scene </p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code> str</code> <p>name</p> required <code>element_i_ds</code> <code> List[int]</code> <p>element_i_ds</p> required <p>Returns:</p> Type Description <code>bool</code> <p>did operation succeed (bool)</p> Source code in <code>scene_controller\\__init__.py</code> <pre><code>def add_elements_to_scene(name: str, element_i_ds: List[int]) -&gt; bool:\n    \"\"\"Adds elements to a scene \n    Args:\n        name ( str): name\n        element_i_ds ( List[int]): element_i_ds\n\n    Returns:\n        did operation succeed (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/scene_controller/#scene_controller.add_scene","title":"<code>add_scene(name)</code>","text":"<p>Adds a new scene </p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code> str</code> <p>name</p> required <p>Returns:</p> Type Description <code>bool</code> <p>did operation succeed (bool)</p> Source code in <code>scene_controller\\__init__.py</code> <pre><code>def add_scene(name: str) -&gt; bool:\n    \"\"\"Adds a new scene \n    Args:\n        name ( str): name\n\n    Returns:\n        did operation succeed (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/scene_controller/#scene_controller.clear_errors","title":"<code>clear_errors()</code>","text":"<p>clear errors</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>scene_controller\\__init__.py</code> <pre><code>def clear_errors() -&gt; None:\n    \"\"\"clear errors\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/scene_controller/#scene_controller.delete_scene","title":"<code>delete_scene(name)</code>","text":"<p>Deletes a scene </p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code> str</code> <p>name</p> required <p>Returns:</p> Type Description <code>bool</code> <p>did operation succeed (bool)</p> Source code in <code>scene_controller\\__init__.py</code> <pre><code>def delete_scene(name: str) -&gt; bool:\n    \"\"\"Deletes a scene \n    Args:\n        name ( str): name\n\n    Returns:\n        did operation succeed (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/scene_controller/#scene_controller.get_elements_from_scene","title":"<code>get_elements_from_scene(name)</code>","text":"<p>Gets the elements from a scene </p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code> str</code> <p>name</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>element ID list (List[int])</p> Source code in <code>scene_controller\\__init__.py</code> <pre><code>def get_elements_from_scene(name: str) -&gt; List[int]:\n    \"\"\"Gets the elements from a scene \n    Args:\n        name ( str): name\n\n    Returns:\n        element ID list (List[int])\n    \"\"\"\n</code></pre>"},{"location":"documentation/scene_controller/#scene_controller.get_last_error","title":"<code>get_last_error(error_code)</code>","text":"<p>Gets the last error </p> <p>Parameters:</p> Name Type Description Default <code>error_code</code> <code> int</code> <p>error_code</p> required <p>Returns:</p> Type Description <code>str</code> <p>error string (str)</p> Source code in <code>scene_controller\\__init__.py</code> <pre><code>def get_last_error(error_code: int) -&gt; str:\n    \"\"\"Gets the last error \n    Args:\n        error_code ( int): error_code\n\n    Returns:\n        error string (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/scene_controller/#scene_controller.get_scene_list","title":"<code>get_scene_list()</code>","text":"<p>get scene list</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]</p> Source code in <code>scene_controller\\__init__.py</code> <pre><code>def get_scene_list() -&gt; List[str]:\n    \"\"\"get scene list\n    Args:\n\n    Returns:\n        List[str]\n    \"\"\"\n</code></pre>"},{"location":"documentation/scene_controller/#scene_controller.remove_elements_from_scene","title":"<code>remove_elements_from_scene(name, element_i_ds)</code>","text":"<p>Removes elements from a scene </p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code> str</code> <p>name</p> required <code>element_i_ds</code> <code> List[int]</code> <p>element_i_ds</p> required <p>Returns:</p> Type Description <code>bool</code> <p>did operation succeed (bool)</p> Source code in <code>scene_controller\\__init__.py</code> <pre><code>def remove_elements_from_scene(name: str, element_i_ds: List[int]) -&gt; bool:\n    \"\"\"Removes elements from a scene \n    Args:\n        name ( str): name\n        element_i_ds ( List[int]): element_i_ds\n\n    Returns:\n        did operation succeed (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/scene_controller/#scene_controller.rename_scene","title":"<code>rename_scene(old_name, new_name)</code>","text":"<p>Renames a scene </p> <p>Parameters:</p> Name Type Description Default <code>old_name</code> <code> str</code> <p>old_name</p> required <code>new_name</code> <code> str</code> <p>new_name</p> required <p>Returns:</p> Type Description <code>bool</code> <p>did operation succeed (bool)</p> Source code in <code>scene_controller\\__init__.py</code> <pre><code>def rename_scene(old_name: str, new_name: str) -&gt; bool:\n    \"\"\"Renames a scene \n    Args:\n        old_name ( str): old_name\n        new_name ( str): new_name\n\n    Returns:\n        did operation succeed (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/shop_drawing_controller/","title":"Shop Drawing Controller","text":""},{"location":"documentation/shop_drawing_controller/#shop_drawing_controller","title":"<code>shop_drawing_controller</code>  <code>special</code>","text":""},{"location":"documentation/shop_drawing_controller/#shop_drawing_controller.add_wall_section_horizontal","title":"<code>add_wall_section_horizontal(element, position)</code>","text":"<p>Adds a horizontal wall section </p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code> int</code> <p>element</p> required <code>position</code> <code> point_3d</code> <p>position</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>shop_drawing_controller\\__init__.py</code> <pre><code>def add_wall_section_horizontal(element: int, position: point_3d) -&gt; None:\n    \"\"\"Adds a horizontal wall section \n    Args:\n        element ( int): element\n        position ( point_3d): position\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/shop_drawing_controller/#shop_drawing_controller.add_wall_section_vertical","title":"<code>add_wall_section_vertical(element, position)</code>","text":"<p>Adds a vertical wall section </p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code> int</code> <p>element</p> required <code>position</code> <code> point_3d</code> <p>position</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>shop_drawing_controller\\__init__.py</code> <pre><code>def add_wall_section_vertical(element: int, position: point_3d) -&gt; None:\n    \"\"\"Adds a vertical wall section \n    Args:\n        element ( int): element\n        position ( point_3d): position\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/shop_drawing_controller/#shop_drawing_controller.assign_export_solid","title":"<code>assign_export_solid(ceo_element, element_id_list)</code>","text":"<p>Assigns elements to an export solid </p> <p>Parameters:</p> Name Type Description Default <code>ceo_element</code> <code> List[int]</code> <p>ceo_element</p> required <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>shop_drawing_controller\\__init__.py</code> <pre><code>def assign_export_solid(ceo_element: List[int], element_id_list: List[int]) -&gt; None:\n    \"\"\"Assigns elements to an export solid \n    Args:\n        ceo_element ( List[int]): ceo_element\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/shop_drawing_controller/#shop_drawing_controller.clear_errors","title":"<code>clear_errors()</code>","text":"<p>clear errors</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>shop_drawing_controller\\__init__.py</code> <pre><code>def clear_errors() -&gt; None:\n    \"\"\"clear errors\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/shop_drawing_controller/#shop_drawing_controller.export_2d_hidden_lines_with_2dc","title":"<code>export_2d_hidden_lines_with_2dc(file_path)</code>","text":"<p>Exports a 2D hidden lines to a 2DC file </p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>shop_drawing_controller\\__init__.py</code> <pre><code>def export_2d_hidden_lines_with_2dc(file_path: str) -&gt; None:\n    \"\"\"Exports a 2D hidden lines to a 2DC file \n    Args:\n        file_path ( str): file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/shop_drawing_controller/#shop_drawing_controller.export_2d_hidden_lines_with_clipboard","title":"<code>export_2d_hidden_lines_with_clipboard(clipboard_number)</code>","text":"<p>Exports a 2D hidden lines to the clipboard </p> <p>Parameters:</p> Name Type Description Default <code>clipboard_number</code> <code> int</code> <p>clipboard_number</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>shop_drawing_controller\\__init__.py</code> <pre><code>def export_2d_hidden_lines_with_clipboard(clipboard_number: int) -&gt; None:\n    \"\"\"Exports a 2D hidden lines to the clipboard \n    Args:\n        clipboard_number ( int): clipboard_number\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/shop_drawing_controller/#shop_drawing_controller.export_2d_wireframe_with_2dc","title":"<code>export_2d_wireframe_with_2dc(file_path)</code>","text":"<p>Exports a 2D wireframe to a 2DC file </p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>shop_drawing_controller\\__init__.py</code> <pre><code>def export_2d_wireframe_with_2dc(file_path: str) -&gt; None:\n    \"\"\"Exports a 2D wireframe to a 2DC file \n    Args:\n        file_path ( str): file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/shop_drawing_controller/#shop_drawing_controller.export_2d_wireframe_with_clipboard","title":"<code>export_2d_wireframe_with_clipboard(clipboard_number)</code>","text":"<p>Exports a 2D wireframe to the clipboard </p> <p>Parameters:</p> Name Type Description Default <code>clipboard_number</code> <code> int</code> <p>clipboard_number</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>shop_drawing_controller\\__init__.py</code> <pre><code>def export_2d_wireframe_with_clipboard(clipboard_number: int) -&gt; None:\n    \"\"\"Exports a 2D wireframe to the clipboard \n    Args:\n        clipboard_number ( int): clipboard_number\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/shop_drawing_controller/#shop_drawing_controller.export_container_with_clipboard","title":"<code>export_container_with_clipboard(clipboard_number, elements)</code>","text":"<p>Export a container to the clipboard </p> <p>Parameters:</p> Name Type Description Default <code>clipboard_number</code> <code> int</code> <p>clipboard_number</p> required <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>shop_drawing_controller\\__init__.py</code> <pre><code>def export_container_with_clipboard(clipboard_number: int, elements: List[int]) -&gt; None:\n    \"\"\"Export a container to the clipboard \n    Args:\n        clipboard_number ( int): clipboard_number\n        elements ( List[int]): elements\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/shop_drawing_controller/#shop_drawing_controller.export_export_solid_with_clipboard","title":"<code>export_export_solid_with_clipboard(clipboard_number, element_id_list)</code>","text":"<p>Exports an export solid to the clipboard </p> <p>Parameters:</p> Name Type Description Default <code>clipboard_number</code> <code> int</code> <p>clipboard_number</p> required <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>shop_drawing_controller\\__init__.py</code> <pre><code>def export_export_solid_with_clipboard(clipboard_number: int, element_id_list: List[int]) -&gt; None:\n    \"\"\"Exports an export solid to the clipboard \n    Args:\n        clipboard_number ( int): clipboard_number\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/shop_drawing_controller/#shop_drawing_controller.export_piece_by_piece_with_clipboard","title":"<code>export_piece_by_piece_with_clipboard(clipboard_number, element_id_list)</code>","text":"<p>Exports a piece-by-piece to the clipboard </p> <p>Parameters:</p> Name Type Description Default <code>clipboard_number</code> <code> int</code> <p>clipboard_number</p> required <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>shop_drawing_controller\\__init__.py</code> <pre><code>def export_piece_by_piece_with_clipboard(clipboard_number: int, element_id_list: List[int]) -&gt; None:\n    \"\"\"Exports a piece-by-piece to the clipboard \n    Args:\n        clipboard_number ( int): clipboard_number\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/shop_drawing_controller/#shop_drawing_controller.export_wall_with_clipboard","title":"<code>export_wall_with_clipboard(clipboard_number, element_id_list)</code>","text":"<p>Exports a wall to the clipboard </p> <p>Parameters:</p> Name Type Description Default <code>clipboard_number</code> <code> int</code> <p>clipboard_number</p> required <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>shop_drawing_controller\\__init__.py</code> <pre><code>def export_wall_with_clipboard(clipboard_number: int, element_id_list: List[int]) -&gt; None:\n    \"\"\"Exports a wall to the clipboard \n    Args:\n        clipboard_number ( int): clipboard_number\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/shop_drawing_controller/#shop_drawing_controller.export_wall_with_clipboard_and_presetting","title":"<code>export_wall_with_clipboard_and_presetting(clipboard_number, element_id_list, presetting_file)</code>","text":"<p>Exports a wall to the clipboard </p> <p>Parameters:</p> Name Type Description Default <code>clipboard_number</code> <code> int</code> <p>clipboard_number</p> required <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>presetting_file</code> <code> str</code> <p>presetting_file</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>shop_drawing_controller\\__init__.py</code> <pre><code>def export_wall_with_clipboard_and_presetting(clipboard_number: int, element_id_list: List[int], presetting_file: str) -&gt; None:\n    \"\"\"Exports a wall to the clipboard \n    Args:\n        clipboard_number ( int): clipboard_number\n        element_id_list ( List[int]): element_id_list\n        presetting_file ( str): presetting_file\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/shop_drawing_controller/#shop_drawing_controller.get_last_error","title":"<code>get_last_error(error_code)</code>","text":"<p>Gets the last error </p> <p>Parameters:</p> Name Type Description Default <code>error_code</code> <code> int</code> <p>error_code</p> required <p>Returns:</p> Type Description <code>str</code> <p>error string (str)</p> Source code in <code>shop_drawing_controller\\__init__.py</code> <pre><code>def get_last_error(error_code: int) -&gt; str:\n    \"\"\"Gets the last error \n    Args:\n        error_code ( int): error_code\n\n    Returns:\n        error string (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/shop_drawing_controller/#shop_drawing_controller.load_export_container_settings","title":"<code>load_export_container_settings(settings_file_path)</code>","text":"<p>Loads container export settings </p> <p>Parameters:</p> Name Type Description Default <code>settings_file_path</code> <code> str</code> <p>settings_file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>shop_drawing_controller\\__init__.py</code> <pre><code>def load_export_container_settings(settings_file_path: str) -&gt; None:\n    \"\"\"Loads container export settings \n    Args:\n        settings_file_path ( str): settings_file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/shop_drawing_controller/#shop_drawing_controller.load_export_piece_by_piece_settings","title":"<code>load_export_piece_by_piece_settings(settings_file_path)</code>","text":"<p>Loads piece by piece export settings </p> <p>Parameters:</p> Name Type Description Default <code>settings_file_path</code> <code> str</code> <p>settings_file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>shop_drawing_controller\\__init__.py</code> <pre><code>def load_export_piece_by_piece_settings(settings_file_path: str) -&gt; None:\n    \"\"\"Loads piece by piece export settings \n    Args:\n        settings_file_path ( str): settings_file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/shop_drawing_controller/#shop_drawing_controller.load_export_solid_settings","title":"<code>load_export_solid_settings(settings_file_path)</code>","text":"<p>Loads export solid settings </p> <p>Parameters:</p> Name Type Description Default <code>settings_file_path</code> <code> str</code> <p>settings_file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>shop_drawing_controller\\__init__.py</code> <pre><code>def load_export_solid_settings(settings_file_path: str) -&gt; None:\n    \"\"\"Loads export solid settings \n    Args:\n        settings_file_path ( str): settings_file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/shop_drawing_controller/#shop_drawing_controller.load_export_wall_settings","title":"<code>load_export_wall_settings(settings_file_path)</code>","text":"<p>Loads wall export settings </p> <p>Parameters:</p> Name Type Description Default <code>settings_file_path</code> <code> str</code> <p>settings_file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>shop_drawing_controller\\__init__.py</code> <pre><code>def load_export_wall_settings(settings_file_path: str) -&gt; None:\n    \"\"\"Loads wall export settings \n    Args:\n        settings_file_path ( str): settings_file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/shop_drawing_controller/#shop_drawing_controller.save_export_piece_by_piece_settings","title":"<code>save_export_piece_by_piece_settings(settings_file_path)</code>","text":"<p>Saves piece by piece export settings </p> <p>Parameters:</p> Name Type Description Default <code>settings_file_path</code> <code> str</code> <p>settings_file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>shop_drawing_controller\\__init__.py</code> <pre><code>def save_export_piece_by_piece_settings(settings_file_path: str) -&gt; None:\n    \"\"\"Saves piece by piece export settings \n    Args:\n        settings_file_path ( str): settings_file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/text_object_options/","title":"Test Object Options","text":"<p>rendering: show_root_heading: false show_source: true</p>"},{"location":"documentation/text_object_options/#cadwork.text_object_options","title":"<code>cadwork.text_object_options</code>","text":""},{"location":"documentation/text_object_options/#cadwork.text_object_options.text_object_options","title":"<code> text_object_options        </code>","text":"Source code in <code>cadwork\\text_object_options.py</code> <pre><code>class text_object_options:\n    def set_font_name(self, font_name: str) -&gt; None:\n        \"\"\"set font name\n        Args:\n            font_name ( str): font_name\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_font_name(self) -&gt; str:\n        \"\"\"get font name\n        Args:\n\n        Returns:\n\n        \"\"\"\n\n    def set_text(self, text: str) -&gt; None:\n        \"\"\"set text\n        Args:\n            text ( str): text\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_text(self) -&gt; str:\n        \"\"\"get text\n        Args:\n\n        Returns:\n            str\n        \"\"\"\n\n    def set_bold(self, value: bool) -&gt; None:\n        \"\"\"set bold\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_bold(self) -&gt; bool:\n        \"\"\"get bold\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def set_italic(self, value: bool) -&gt; None:\n        \"\"\"set italic\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_italic(self) -&gt; bool:\n        \"\"\"get italic\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n\n    def set_height(self, height: float) -&gt; None:\n        \"\"\"set height\n        Args:\n            height ( float): height\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_height(self) -&gt; float:\n        \"\"\"get height\n        Args:\n\n        Returns:\n            float\n        \"\"\"\n\n    def set_element_type(self, element_type: text_element_type) -&gt; None:\n        \"\"\"set element type\n        Args:\n            element_type ( text_element_type): element_type\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_element_type(self) -&gt; text_element_type:\n        \"\"\"get element type\n        Args:\n\n        Returns:\n            text_element_type\n        \"\"\"\n\n    def set_thickness(self, thickness: float) -&gt; None:\n        \"\"\"set thickness\n        Args:\n            thickness ( float): thickness\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_thickness(self) -&gt; float:\n        \"\"\"get thickness\n        Args:\n\n        Returns:\n            float\n        \"\"\"\n\n    def set_color(self, color: int) -&gt; None:\n        \"\"\"set color\n        Args:\n            color ( int): color\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_color(self) -&gt; int:\n        \"\"\"get color\n        Args:\n\n        Returns:\n            int\n        \"\"\"\n\n    def set_height_relative(self, value: bool) -&gt; None:\n        \"\"\"set height relative\n        Args:\n            value ( bool): value\n\n        Returns:\n            None\n        \"\"\"\n\n    def get_height_relative(self) -&gt; bool:\n        \"\"\"get height relative\n        Args:\n\n        Returns:\n            bool\n        \"\"\"\n</code></pre>"},{"location":"documentation/text_object_options/#cadwork.text_object_options.text_object_options.get_bold","title":"<code>get_bold(self)</code>","text":"<p>get bold</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\text_object_options.py</code> <pre><code>def get_bold(self) -&gt; bool:\n    \"\"\"get bold\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/text_object_options/#cadwork.text_object_options.text_object_options.get_color","title":"<code>get_color(self)</code>","text":"<p>get color</p> <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>cadwork\\text_object_options.py</code> <pre><code>def get_color(self) -&gt; int:\n    \"\"\"get color\n    Args:\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/text_object_options/#cadwork.text_object_options.text_object_options.get_element_type","title":"<code>get_element_type(self)</code>","text":"<p>get element type</p> <p>Returns:</p> Type Description <code>text_element_type</code> <p>text_element_type</p> Source code in <code>cadwork\\text_object_options.py</code> <pre><code>def get_element_type(self) -&gt; text_element_type:\n    \"\"\"get element type\n    Args:\n\n    Returns:\n        text_element_type\n    \"\"\"\n</code></pre>"},{"location":"documentation/text_object_options/#cadwork.text_object_options.text_object_options.get_font_name","title":"<code>get_font_name(self)</code>","text":"<p>get font name</p> Source code in <code>cadwork\\text_object_options.py</code> <pre><code>def get_font_name(self) -&gt; str:\n    \"\"\"get font name\n    Args:\n\n    Returns:\n\n    \"\"\"\n</code></pre>"},{"location":"documentation/text_object_options/#cadwork.text_object_options.text_object_options.get_height","title":"<code>get_height(self)</code>","text":"<p>get height</p> <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>cadwork\\text_object_options.py</code> <pre><code>def get_height(self) -&gt; float:\n    \"\"\"get height\n    Args:\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/text_object_options/#cadwork.text_object_options.text_object_options.get_height_relative","title":"<code>get_height_relative(self)</code>","text":"<p>get height relative</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\text_object_options.py</code> <pre><code>def get_height_relative(self) -&gt; bool:\n    \"\"\"get height relative\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/text_object_options/#cadwork.text_object_options.text_object_options.get_italic","title":"<code>get_italic(self)</code>","text":"<p>get italic</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>cadwork\\text_object_options.py</code> <pre><code>def get_italic(self) -&gt; bool:\n    \"\"\"get italic\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/text_object_options/#cadwork.text_object_options.text_object_options.get_text","title":"<code>get_text(self)</code>","text":"<p>get text</p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>cadwork\\text_object_options.py</code> <pre><code>def get_text(self) -&gt; str:\n    \"\"\"get text\n    Args:\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/text_object_options/#cadwork.text_object_options.text_object_options.get_thickness","title":"<code>get_thickness(self)</code>","text":"<p>get thickness</p> <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>cadwork\\text_object_options.py</code> <pre><code>def get_thickness(self) -&gt; float:\n    \"\"\"get thickness\n    Args:\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/text_object_options/#cadwork.text_object_options.text_object_options.set_bold","title":"<code>set_bold(self, value)</code>","text":"<p>set bold</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\text_object_options.py</code> <pre><code>def set_bold(self, value: bool) -&gt; None:\n    \"\"\"set bold\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/text_object_options/#cadwork.text_object_options.text_object_options.set_color","title":"<code>set_color(self, color)</code>","text":"<p>set color</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code> int</code> <p>color</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\text_object_options.py</code> <pre><code>def set_color(self, color: int) -&gt; None:\n    \"\"\"set color\n    Args:\n        color ( int): color\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/text_object_options/#cadwork.text_object_options.text_object_options.set_element_type","title":"<code>set_element_type(self, element_type)</code>","text":"<p>set element type</p> <p>Parameters:</p> Name Type Description Default <code>element_type</code> <code> text_element_type</code> <p>element_type</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\text_object_options.py</code> <pre><code>def set_element_type(self, element_type: text_element_type) -&gt; None:\n    \"\"\"set element type\n    Args:\n        element_type ( text_element_type): element_type\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/text_object_options/#cadwork.text_object_options.text_object_options.set_font_name","title":"<code>set_font_name(self, font_name)</code>","text":"<p>set font name</p> <p>Parameters:</p> Name Type Description Default <code>font_name</code> <code> str</code> <p>font_name</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\text_object_options.py</code> <pre><code>def set_font_name(self, font_name: str) -&gt; None:\n    \"\"\"set font name\n    Args:\n        font_name ( str): font_name\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/text_object_options/#cadwork.text_object_options.text_object_options.set_height","title":"<code>set_height(self, height)</code>","text":"<p>set height</p> <p>Parameters:</p> Name Type Description Default <code>height</code> <code> float</code> <p>height</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\text_object_options.py</code> <pre><code>def set_height(self, height: float) -&gt; None:\n    \"\"\"set height\n    Args:\n        height ( float): height\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/text_object_options/#cadwork.text_object_options.text_object_options.set_height_relative","title":"<code>set_height_relative(self, value)</code>","text":"<p>set height relative</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\text_object_options.py</code> <pre><code>def set_height_relative(self, value: bool) -&gt; None:\n    \"\"\"set height relative\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/text_object_options/#cadwork.text_object_options.text_object_options.set_italic","title":"<code>set_italic(self, value)</code>","text":"<p>set italic</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> bool</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\text_object_options.py</code> <pre><code>def set_italic(self, value: bool) -&gt; None:\n    \"\"\"set italic\n    Args:\n        value ( bool): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/text_object_options/#cadwork.text_object_options.text_object_options.set_text","title":"<code>set_text(self, text)</code>","text":"<p>set text</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code> str</code> <p>text</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\text_object_options.py</code> <pre><code>def set_text(self, text: str) -&gt; None:\n    \"\"\"set text\n    Args:\n        text ( str): text\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/text_object_options/#cadwork.text_object_options.text_object_options.set_thickness","title":"<code>set_thickness(self, thickness)</code>","text":"<p>set thickness</p> <p>Parameters:</p> Name Type Description Default <code>thickness</code> <code> float</code> <p>thickness</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>cadwork\\text_object_options.py</code> <pre><code>def set_thickness(self, thickness: float) -&gt; None:\n    \"\"\"set thickness\n    Args:\n        thickness ( float): thickness\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/text_object_options/#cadwork.text_element_type","title":"<code>cadwork.text_element_type</code>","text":""},{"location":"documentation/text_object_options/#cadwork.text_element_type.text_element_type","title":"<code> text_element_type            (IntEnum)         </code>","text":"<p>text element type</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cadwork.text_element_type.line\nline\n</code></pre> Source code in <code>cadwork\\text_element_type.py</code> <pre><code>@unique\nclass text_element_type(IntEnum):\n    \"\"\"text element type\n\n    Examples:\n        &gt;&gt;&gt; cadwork.text_element_type.line\n        line\n\n    Args:\n        line = 0\n        surface = 1\n        volume = 2\n\n    \"\"\"\n    line = 0\n    surface = 1\n    volume = 2\n\n    def __int__(self) -&gt; int:\n        return self.value\n</code></pre>"},{"location":"documentation/utility_controller/","title":"Utility Controller","text":""},{"location":"documentation/utility_controller/#utility_controller","title":"<code>utility_controller</code>  <code>special</code>","text":""},{"location":"documentation/utility_controller/#utility_controller.api_autostart","title":"<code>api_autostart(api_name, option)</code>","text":"<p>api autostart</p> <p>Parameters:</p> Name Type Description Default <code>api_name</code> <code> str</code> <p>api_name</p> required <code>option</code> <code> int</code> <p>option</p> required <p>Returns:</p> Type Description <code>int</code> <p>int</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def api_autostart(api_name: str, option: int) -&gt; int:\n    \"\"\"api autostart\n    Args:\n        api_name ( str): api_name\n        option ( int): option\n\n    Returns:\n        int\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.change_check_and_query_data_to_no_queries","title":"<code>change_check_and_query_data_to_no_queries()</code>","text":"<p>change check and query data to no queries</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def change_check_and_query_data_to_no_queries() -&gt; None:\n    \"\"\"change check and query data to no queries\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.change_check_and_query_data_to_queries","title":"<code>change_check_and_query_data_to_queries()</code>","text":"<p>change check and query data to queries</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def change_check_and_query_data_to_queries() -&gt; None:\n    \"\"\"change check and query data to queries\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.check_autostart","title":"<code>check_autostart(api_name)</code>","text":"<p>check autostart</p> <p>Parameters:</p> Name Type Description Default <code>api_name</code> <code> str</code> <p>api_name</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def check_autostart(api_name: str) -&gt; bool:\n    \"\"\"check autostart\n    Args:\n        api_name ( str): api_name\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.clear_errors","title":"<code>clear_errors()</code>","text":"<p>clear errors</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def clear_errors() -&gt; None:\n    \"\"\"clear errors\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.close_cadwork_document_saved","title":"<code>close_cadwork_document_saved()</code>","text":"<p>close cadwork saved </p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def close_cadwork_document_saved() -&gt; None:\n    \"\"\"close cadwork saved \n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.close_cadwork_document_unsaved","title":"<code>close_cadwork_document_unsaved()</code>","text":"<p>close cadwork document unsaved</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def close_cadwork_document_unsaved() -&gt; None:\n    \"\"\"close cadwork document unsaved\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.create_new_guid","title":"<code>create_new_guid()</code>","text":"<p>Creates a new GUID </p> <p>Returns:</p> Type Description <code>str</code> <p>GUID (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def create_new_guid() -&gt; str:\n    \"\"\"Creates a new GUID \n    Args:\n\n    Returns:\n        GUID (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.create_snapshot","title":"<code>create_snapshot()</code>","text":"<p>get snapshot from screen </p> <p>Returns:</p> Type Description <code>str</code> <p>snapshot (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def create_snapshot() -&gt; str:\n    \"\"\"get snapshot from screen \n    Args:\n\n    Returns:\n        snapshot (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.delete_project_data","title":"<code>delete_project_data(element_id)</code>","text":"<p>Deletes the project data </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> str</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def delete_project_data(element_id: str) -&gt; None:\n    \"\"\"Deletes the project data \n    Args:\n        element_id ( str): element_id\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.disable_auto_display_refresh","title":"<code>disable_auto_display_refresh()</code>","text":"<p>Disables automatic display refresh</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def disable_auto_display_refresh() -&gt; None:\n    \"\"\"Disables automatic display refresh\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.disable_autostart","title":"<code>disable_autostart(api_name)</code>","text":"<p>disable autostart</p> <p>Parameters:</p> Name Type Description Default <code>api_name</code> <code> str</code> <p>api_name</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def disable_autostart(api_name: str) -&gt; None:\n    \"\"\"disable autostart\n    Args:\n        api_name ( str): api_name\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.disable_direct_info","title":"<code>disable_direct_info()</code>","text":"<p>disable direct info</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def disable_direct_info() -&gt; None:\n    \"\"\"disable direct info\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.disable_update_variant","title":"<code>disable_update_variant()</code>","text":"<p>disable update variant</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def disable_update_variant() -&gt; None:\n    \"\"\"disable update variant\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.enable_auto_display_refresh","title":"<code>enable_auto_display_refresh()</code>","text":"<p>Enables automatic display refresh</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def enable_auto_display_refresh() -&gt; None:\n    \"\"\"Enables automatic display refresh\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.enable_autostart","title":"<code>enable_autostart(api_name)</code>","text":"<p>enable autostart</p> <p>Parameters:</p> Name Type Description Default <code>api_name</code> <code> str</code> <p>api_name</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def enable_autostart(api_name: str) -&gt; None:\n    \"\"\"enable autostart\n    Args:\n        api_name ( str): api_name\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.enable_direct_info","title":"<code>enable_direct_info()</code>","text":"<p>enable direct info</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def enable_direct_info() -&gt; None:\n    \"\"\"enable direct info\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.enable_update_variant","title":"<code>enable_update_variant()</code>","text":"<p>enable update variant</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def enable_update_variant() -&gt; None:\n    \"\"\"enable update variant\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.execute_shortcut","title":"<code>execute_shortcut(a0, a1)</code>","text":"<p>execute shortcut</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <code>a1</code> <code> int</code> <p>a1</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def execute_shortcut(a0: int, a1: int) -&gt; None:\n    \"\"\"execute shortcut\n    Args:\n        a0 ( int): a0\n        a1 ( int): a1\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.export_screen_to_image","title":"<code>export_screen_to_image(file_path)</code>","text":"<p>Exports the screen to an image </p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def export_screen_to_image(file_path: str) -&gt; None:\n    \"\"\"Exports the screen to an image \n    Args:\n        file_path ( str): file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_3d_angular_display_units","title":"<code>get_3d_angular_display_units()</code>","text":"<p>Gets the current angular display units </p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_3d_angular_display_units() -&gt; str:\n    \"\"\"Gets the current angular display units \n    Args:\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_3d_angular_units","title":"<code>get_3d_angular_units()</code>","text":"<p>Gets the current angular units </p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_3d_angular_units() -&gt; str:\n    \"\"\"Gets the current angular units \n    Args:\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_3d_build","title":"<code>get_3d_build()</code>","text":"<p>Gets the 3D build </p> <p>Returns:</p> Type Description <code>int</code> <p>3D build (int)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_3d_build() -&gt; int:\n    \"\"\"Gets the 3D build \n    Args:\n\n    Returns:\n        3D build (int)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_3d_build_date","title":"<code>get_3d_build_date()</code>","text":"<p>Gets the current build date </p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_3d_build_date() -&gt; str:\n    \"\"\"Gets the current build date \n    Args:\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_3d_file_name","title":"<code>get_3d_file_name()</code>","text":"<p>Gets the 3D file name </p> <p>Returns:</p> Type Description <code>str</code> <p>3D file name (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_3d_file_name() -&gt; str:\n    \"\"\"Gets the 3D file name \n    Args:\n\n    Returns:\n        3D file name (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_3d_file_path","title":"<code>get_3d_file_path()</code>","text":"<p>Gets the 3D file path </p> <p>Returns:</p> Type Description <code>str</code> <p>3D file path (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_3d_file_path() -&gt; str:\n    \"\"\"Gets the 3D file path \n    Args:\n\n    Returns:\n        3D file path (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_3d_gui_upper_left_screen_coordinates","title":"<code>get_3d_gui_upper_left_screen_coordinates()</code>","text":"<p>get 3d gui upper left screen coordinates</p> <p>Returns:</p> Type Description <code>Tuple[int, int]</code> <p>Tuple[int, int]</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_3d_gui_upper_left_screen_coordinates() -&gt; Tuple[int, int]:\n    \"\"\"get 3d gui upper left screen coordinates\n    Args:\n\n    Returns:\n        Tuple[int, int]\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_3d_hwnd","title":"<code>get_3d_hwnd()</code>","text":"<p>Gets the 3D HWND </p> <p>Returns:</p> Type Description <code>int</code> <p>3D HWND (int)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_3d_hwnd() -&gt; int:\n    \"\"\"Gets the 3D HWND \n    Args:\n\n    Returns:\n        3D HWND (int)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_3d_linear_display_units","title":"<code>get_3d_linear_display_units()</code>","text":"<p>Gets the current display units </p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_3d_linear_display_units() -&gt; str:\n    \"\"\"Gets the current display units \n    Args:\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_3d_linear_units","title":"<code>get_3d_linear_units()</code>","text":"<p>Gets the current linear units </p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_3d_linear_units() -&gt; str:\n    \"\"\"Gets the current linear units \n    Args:\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_3d_userprofil_path","title":"<code>get_3d_userprofil_path()</code>","text":"<p>Gets the 3D userprofil path </p> <p>Returns:</p> Type Description <code>str</code> <p>the 3D userprofil path (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_3d_userprofil_path() -&gt; str:\n    \"\"\"Gets the 3D userprofil path \n    Args:\n\n    Returns:\n        the 3D userprofil path (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_3d_version","title":"<code>get_3d_version()</code>","text":"<p>Gets the 3D version </p> <p>Returns:</p> Type Description <code>int</code> <p>3D version (int)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_3d_version() -&gt; int:\n    \"\"\"Gets the 3D version \n    Args:\n\n    Returns:\n        3D version (int)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_client_number","title":"<code>get_client_number()</code>","text":"<p>Gets the client number </p> <p>Returns:</p> Type Description <code>str</code> <p>client number (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_client_number() -&gt; str:\n    \"\"\"Gets the client number \n    Args:\n\n    Returns:\n        client number (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_global_origin","title":"<code>get_global_origin()</code>","text":"<p>Gets the global origin </p> <p>Returns:</p> Type Description <code>point_3d</code> <p>global origin (point_3d)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_global_origin() -&gt; point_3d:\n    \"\"\"Gets the global origin \n    Args:\n\n    Returns:\n        global origin (point_3d)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_global_x_offset","title":"<code>get_global_x_offset()</code>","text":"<p>get global x offset</p> <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_global_x_offset() -&gt; float:\n    \"\"\"get global x offset\n    Args:\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_global_y_offset","title":"<code>get_global_y_offset()</code>","text":"<p>get global y offset</p> <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_global_y_offset() -&gt; float:\n    \"\"\"get global y offset\n    Args:\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_global_z_offset","title":"<code>get_global_z_offset()</code>","text":"<p>get global z offset</p> <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_global_z_offset() -&gt; float:\n    \"\"\"get global z offset\n    Args:\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_imperial_string_from_millimetre","title":"<code>get_imperial_string_from_millimetre(value)</code>","text":"<p>get imperial string from millimetre</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> float</code> <p>value</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_imperial_string_from_millimetre(value: float) -&gt; str:\n    \"\"\"get imperial string from millimetre\n    Args:\n        value ( float): value\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_language","title":"<code>get_language()</code>","text":"<p>Gets the 3D language </p> <p>Returns:</p> Type Description <code>str</code> <p>3D language (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_language() -&gt; str:\n    \"\"\"Gets the 3D language \n    Args:\n\n    Returns:\n        3D language (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_last_error","title":"<code>get_last_error(error_code)</code>","text":"<p>Gets the last error </p> <p>Parameters:</p> Name Type Description Default <code>error_code</code> <code> int</code> <p>error_code</p> required <p>Returns:</p> Type Description <code>str</code> <p>error string (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_last_error(error_code: int) -&gt; str:\n    \"\"\"Gets the last error \n    Args:\n        error_code ( int): error_code\n\n    Returns:\n        error string (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_licence_first_part","title":"<code>get_licence_first_part()</code>","text":"<p>Gets the first part of the licence </p> <p>Returns:</p> Type Description <code>str</code> <p>first part of licence (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_licence_first_part() -&gt; str:\n    \"\"\"Gets the first part of the licence \n    Args:\n\n    Returns:\n        first part of licence (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_licence_second_part","title":"<code>get_licence_second_part()</code>","text":"<p>Gets the second part of the licence </p> <p>Returns:</p> Type Description <code>str</code> <p>second part of licence (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_licence_second_part() -&gt; str:\n    \"\"\"Gets the second part of the licence \n    Args:\n\n    Returns:\n        second part of licence (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_millimetre_from_imperial_string","title":"<code>get_millimetre_from_imperial_string(value)</code>","text":"<p>get millimetre from imperial string</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> str</code> <p>value</p> required <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_millimetre_from_imperial_string(value: str) -&gt; float:\n    \"\"\"get millimetre from imperial string\n    Args:\n        value ( str): value\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_new_user_file_from_dialog","title":"<code>get_new_user_file_from_dialog(name_filter)</code>","text":"<p>Gets a new file with a dialog </p> <p>Parameters:</p> Name Type Description Default <code>name_filter</code> <code> str</code> <p>name_filter</p> required <p>Returns:</p> Type Description <code>str</code> <p>file path (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_new_user_file_from_dialog(name_filter: str) -&gt; str:\n    \"\"\"Gets a new file with a dialog \n    Args:\n        name_filter ( str): name_filter\n\n    Returns:\n        file path (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_new_user_file_from_dialog_in_path","title":"<code>get_new_user_file_from_dialog_in_path(name_filter, path)</code>","text":"<p>get new user file from dialog in path</p> <p>Parameters:</p> Name Type Description Default <code>name_filter</code> <code> str</code> <p>name_filter</p> required <code>path</code> <code> str</code> <p>path</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_new_user_file_from_dialog_in_path(name_filter: str, path: str) -&gt; str:\n    \"\"\"get new user file from dialog in path\n    Args:\n        name_filter ( str): name_filter\n        path ( str): path\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_north_angle","title":"<code>get_north_angle()</code>","text":"<p>get north angle</p> <p>Returns:</p> Type Description <code>float</code> <p>float</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_north_angle() -&gt; float:\n    \"\"\"get north angle\n    Args:\n\n    Returns:\n        float\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_plugin_path","title":"<code>get_plugin_path()</code>","text":"<p>get plugin path</p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_plugin_path() -&gt; str:\n    \"\"\"get plugin path\n    Args:\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_project_address","title":"<code>get_project_address()</code>","text":"<p>Gets the project address </p> <p>Returns:</p> Type Description <code>str</code> <p>project address (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_project_address() -&gt; str:\n    \"\"\"Gets the project address \n    Args:\n\n    Returns:\n        project address (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_project_architect","title":"<code>get_project_architect()</code>","text":"<p>Gets the project architect </p> <p>Returns:</p> Type Description <code>str</code> <p>project architect (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_project_architect() -&gt; str:\n    \"\"\"Gets the project architect \n    Args:\n\n    Returns:\n        project architect (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_project_city","title":"<code>get_project_city()</code>","text":"<p>Gets the project city </p> <p>Returns:</p> Type Description <code>str</code> <p>project city (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_project_city() -&gt; str:\n    \"\"\"Gets the project city \n    Args:\n\n    Returns:\n        project city (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_project_country","title":"<code>get_project_country()</code>","text":"<p>Gets the project country </p> <p>Returns:</p> Type Description <code>str</code> <p>project country (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_project_country() -&gt; str:\n    \"\"\"Gets the project country \n    Args:\n\n    Returns:\n        project country (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_project_customer","title":"<code>get_project_customer()</code>","text":"<p>Gets the project customer </p> <p>Returns:</p> Type Description <code>str</code> <p>project customer (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_project_customer() -&gt; str:\n    \"\"\"Gets the project customer \n    Args:\n\n    Returns:\n        project customer (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_project_data","title":"<code>get_project_data(element_id)</code>","text":"<p>Gets the project data </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> str</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>str</code> <p>project data (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_project_data(element_id: str) -&gt; str:\n    \"\"\"Gets the project data \n    Args:\n        element_id ( str): element_id\n\n    Returns:\n        project data (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_project_deadline","title":"<code>get_project_deadline()</code>","text":"<p>Gets the project deadline </p> <p>Returns:</p> Type Description <code>str</code> <p>project deadline (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_project_deadline() -&gt; str:\n    \"\"\"Gets the project deadline \n    Args:\n\n    Returns:\n        project deadline (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_project_description","title":"<code>get_project_description()</code>","text":"<p>get project description</p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_project_description() -&gt; str:\n    \"\"\"get project description\n    Args:\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_project_designer","title":"<code>get_project_designer()</code>","text":"<p>Gets the project designer </p> <p>Returns:</p> Type Description <code>str</code> <p>project designer (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_project_designer() -&gt; str:\n    \"\"\"Gets the project designer \n    Args:\n\n    Returns:\n        project designer (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_project_elevation","title":"<code>get_project_elevation()</code>","text":"<p>Gets the project elevation </p> <p>Returns:</p> Type Description <code>float</code> <p>project elevation (float)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_project_elevation() -&gt; float:\n    \"\"\"Gets the project elevation \n    Args:\n\n    Returns:\n        project elevation (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_project_guid","title":"<code>get_project_guid()</code>","text":"<p>Gets the project GUID </p> <p>Returns:</p> Type Description <code>str</code> <p>project GUID (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_project_guid() -&gt; str:\n    \"\"\"Gets the project GUID \n    Args:\n\n    Returns:\n        project GUID (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_project_latitude","title":"<code>get_project_latitude()</code>","text":"<p>Gets the project latitude </p> <p>Returns:</p> Type Description <code>float</code> <p>project latitude (float)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_project_latitude() -&gt; float:\n    \"\"\"Gets the project latitude \n    Args:\n\n    Returns:\n        project latitude (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_project_longitude","title":"<code>get_project_longitude()</code>","text":"<p>Gets the project longitude </p> <p>Returns:</p> Type Description <code>float</code> <p>project longitude (float)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_project_longitude() -&gt; float:\n    \"\"\"Gets the project longitude \n    Args:\n\n    Returns:\n        project longitude (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_project_name","title":"<code>get_project_name()</code>","text":"<p>Gets the project name </p> <p>Returns:</p> Type Description <code>str</code> <p>project name (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_project_name() -&gt; str:\n    \"\"\"Gets the project name \n    Args:\n\n    Returns:\n        project name (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_project_number","title":"<code>get_project_number()</code>","text":"<p>Gets the project number </p> <p>Returns:</p> Type Description <code>str</code> <p>project number (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_project_number() -&gt; str:\n    \"\"\"Gets the project number \n    Args:\n\n    Returns:\n        project number (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_project_part","title":"<code>get_project_part()</code>","text":"<p>Sets the project part </p> <p>Returns:</p> Type Description <code>str</code> <p>project part (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_project_part() -&gt; str:\n    \"\"\"Sets the project part \n    Args:\n\n    Returns:\n        project part (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_project_postal_code","title":"<code>get_project_postal_code()</code>","text":"<p>Gets the project postal code </p> <p>Returns:</p> Type Description <code>str</code> <p>project postal code (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_project_postal_code() -&gt; str:\n    \"\"\"Gets the project postal code \n    Args:\n\n    Returns:\n        project postal code (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_project_user_attribute","title":"<code>get_project_user_attribute(number)</code>","text":"<p>Gets the project user attribute </p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code> int</code> <p>number</p> required <p>Returns:</p> Type Description <code>str</code> <p>project user attribute (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_project_user_attribute(number: int) -&gt; str:\n    \"\"\"Gets the project user attribute \n    Args:\n        number ( int): number\n\n    Returns:\n        project user attribute (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_project_user_attribute_name","title":"<code>get_project_user_attribute_name(number)</code>","text":"<p>Gets the project user attribute name </p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code> int</code> <p>number</p> required <p>Returns:</p> Type Description <code>str</code> <p>project user attribute name (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_project_user_attribute_name(number: int) -&gt; str:\n    \"\"\"Gets the project user attribute name \n    Args:\n        number ( int): number\n\n    Returns:\n        project user attribute name (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_use_of_global_coordinates","title":"<code>get_use_of_global_coordinates()</code>","text":"<p>get use of global coordinates</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_use_of_global_coordinates() -&gt; bool:\n    \"\"\"get use of global coordinates\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_user_bool","title":"<code>get_user_bool(message)</code>","text":"<p>Prompts the user for a boolean </p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code> str</code> <p>message</p> required <p>Returns:</p> Type Description <code>bool</code> <p>user boolean (bool)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_user_bool(message: str) -&gt; bool:\n    \"\"\"Prompts the user for a boolean \n    Args:\n        message ( str): message\n\n    Returns:\n        user boolean (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_user_catalog_path","title":"<code>get_user_catalog_path()</code>","text":"<p>get user catalog path</p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_user_catalog_path() -&gt; str:\n    \"\"\"get user catalog path\n    Args:\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_user_color","title":"<code>get_user_color(initial_color)</code>","text":"<p>Gets a color choosen by the user </p> <p>Parameters:</p> Name Type Description Default <code>initial_color</code> <code> int</code> <p>initial_color</p> required <p>Returns:</p> Type Description <code>int</code> <p>the colornumber (int)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_user_color(initial_color: int) -&gt; int:\n    \"\"\"Gets a color choosen by the user \n    Args:\n        initial_color ( int): initial_color\n\n    Returns:\n        the colornumber (int)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_user_double","title":"<code>get_user_double(message)</code>","text":"<p>Prompts the user for a double </p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code> str</code> <p>message</p> required <p>Returns:</p> Type Description <code>float</code> <p>user double (float)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_user_double(message: str) -&gt; float:\n    \"\"\"Prompts the user for a double \n    Args:\n        message ( str): message\n\n    Returns:\n        user double (float)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_user_file_from_dialog","title":"<code>get_user_file_from_dialog(name_filter)</code>","text":"<p>Gets a file with a dialog </p> <p>Parameters:</p> Name Type Description Default <code>name_filter</code> <code> str</code> <p>name_filter</p> required <p>Returns:</p> Type Description <code>str</code> <p>file path (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_user_file_from_dialog(name_filter: str) -&gt; str:\n    \"\"\"Gets a file with a dialog \n    Args:\n        name_filter ( str): name_filter\n\n    Returns:\n        file path (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_user_file_from_dialog_in_path","title":"<code>get_user_file_from_dialog_in_path(name_filter, path)</code>","text":"<p>get user file from dialog in path</p> <p>Parameters:</p> Name Type Description Default <code>name_filter</code> <code> str</code> <p>name_filter</p> required <code>path</code> <code> str</code> <p>path</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_user_file_from_dialog_in_path(name_filter: str, path: str) -&gt; str:\n    \"\"\"get user file from dialog in path\n    Args:\n        name_filter ( str): name_filter\n        path ( str): path\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_user_int","title":"<code>get_user_int(message)</code>","text":"<p>Prompts the user for an integer </p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code> str</code> <p>message</p> required <p>Returns:</p> Type Description <code>int</code> <p>user integer (int)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_user_int(message: str) -&gt; int:\n    \"\"\"Prompts the user for an integer \n    Args:\n        message ( str): message\n\n    Returns:\n        user integer (int)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_user_path_from_dialog","title":"<code>get_user_path_from_dialog()</code>","text":"<p>get user path from dialog</p> <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_user_path_from_dialog() -&gt; str:\n    \"\"\"get user path from dialog\n    Args:\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_user_path_from_dialog_in_path","title":"<code>get_user_path_from_dialog_in_path(a0)</code>","text":"<p>get user path from dialog in path</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> str</code> <p>a0</p> required <p>Returns:</p> Type Description <code>str</code> <p>str</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_user_path_from_dialog_in_path(a0: str) -&gt; str:\n    \"\"\"get user path from dialog in path\n    Args:\n        a0 ( str): a0\n\n    Returns:\n        str\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_user_point","title":"<code>get_user_point()</code>","text":"<p>Gets a point from the user </p> <p>Returns:</p> Type Description <code>point_3d</code> <p>user point (point_3d)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_user_point() -&gt; point_3d:\n    \"\"\"Gets a point from the user \n    Args:\n\n    Returns:\n        user point (point_3d)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_user_points","title":"<code>get_user_points()</code>","text":"<p>get user points</p> <p>Returns:</p> Type Description <code>List[cadwork.point_3d.point_3d]</code> <p>List[point_3d]</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_user_points() -&gt; List[point_3d]:\n    \"\"\"get user points\n    Args:\n\n    Returns:\n        List[point_3d]\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_user_points_with_count","title":"<code>get_user_points_with_count(a0)</code>","text":"<p>get user points with count</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>List[cadwork.point_3d.point_3d]</code> <p>List[point_3d]</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_user_points_with_count(a0: int) -&gt; List[point_3d]:\n    \"\"\"get user points with count\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        List[point_3d]\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.get_user_string","title":"<code>get_user_string(message)</code>","text":"<p>Prompts the user for a string </p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code> str</code> <p>message</p> required <p>Returns:</p> Type Description <code>str</code> <p>user string (str)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def get_user_string(message: str) -&gt; str:\n    \"\"\"Prompts the user for a string \n    Args:\n        message ( str): message\n\n    Returns:\n        user string (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.hide_north_arrow","title":"<code>hide_north_arrow()</code>","text":"<p>hide north arrow</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def hide_north_arrow() -&gt; None:\n    \"\"\"hide north arrow\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.hide_progress_bar","title":"<code>hide_progress_bar()</code>","text":"<p>Hides the ProgressBar</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def hide_progress_bar() -&gt; None:\n    \"\"\"Hides the ProgressBar\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.init_LxSDK","title":"<code>init_LxSDK()</code>","text":"<p>init LxSDK</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def init_LxSDK() -&gt; None:\n    \"\"\"init LxSDK\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.is_direct_info_enabled","title":"<code>is_direct_info_enabled()</code>","text":"<p>is direct info enabled</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def is_direct_info_enabled() -&gt; bool:\n    \"\"\"is direct info enabled\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.is_north_arrow_visible","title":"<code>is_north_arrow_visible()</code>","text":"<p>is north arrow visible</p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def is_north_arrow_visible() -&gt; bool:\n    \"\"\"is north arrow visible\n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.load_attribute_display_settings","title":"<code>load_attribute_display_settings(file_path)</code>","text":"<p>load attribute display settings</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def load_attribute_display_settings(file_path: str) -&gt; None:\n    \"\"\"load attribute display settings\n    Args:\n        file_path ( str): file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.load_element_attribute_display_settings","title":"<code>load_element_attribute_display_settings(file_path, elements)</code>","text":"<p>load element attribute display settings</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <code>elements</code> <code> List[int]</code> <p>elements</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def load_element_attribute_display_settings(file_path: str, elements: List[int]) -&gt; None:\n    \"\"\"load element attribute display settings\n    Args:\n        file_path ( str): file_path\n        elements ( List[int]): elements\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.pop_check_and_query_data","title":"<code>pop_check_and_query_data()</code>","text":"<p>pop check and query data</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def pop_check_and_query_data() -&gt; None:\n    \"\"\"pop check and query data\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.print_error","title":"<code>print_error(message)</code>","text":"<p>Prints an error </p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code> str</code> <p>message</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def print_error(message: str) -&gt; None:\n    \"\"\"Prints an error \n    Args:\n        message ( str): message\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.print_message","title":"<code>print_message(message)</code>","text":"<p>Prints a message </p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code> str</code> <p>message</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def print_message(message: str) -&gt; None:\n    \"\"\"Prints a message \n    Args:\n        message ( str): message\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.print_to_console","title":"<code>print_to_console(message)</code>","text":"<p>Prints a message to the console </p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code> str</code> <p>message</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def print_to_console(message: str) -&gt; None:\n    \"\"\"Prints a message to the console \n    Args:\n        message ( str): message\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.push_check_and_query_data","title":"<code>push_check_and_query_data()</code>","text":"<p>push check and query data</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def push_check_and_query_data() -&gt; None:\n    \"\"\"push check and query data\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.run_external_program","title":"<code>run_external_program(name)</code>","text":"<p>Runs a 3D external program </p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code> str</code> <p>name</p> required <p>Returns:</p> Type Description <code>bool</code> <p>external program return (bool)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def run_external_program(name: str) -&gt; bool:\n    \"\"\"Runs a 3D external program \n    Args:\n        name ( str): name\n\n    Returns:\n        external program return (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.run_external_program_from_custom_directory","title":"<code>run_external_program_from_custom_directory(file_path)</code>","text":"<p>Runs a 3D external program from a custom file path </p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code> str</code> <p>file_path</p> required <p>Returns:</p> Type Description <code>bool</code> <p>external program return (bool)</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def run_external_program_from_custom_directory(file_path: str) -&gt; bool:\n    \"\"\"Runs a 3D external program from a custom file path \n    Args:\n        file_path ( str): file_path\n\n    Returns:\n        external program return (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.save_3d_file_silently","title":"<code>save_3d_file_silently()</code>","text":"<p>Saves the 3D file silently</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def save_3d_file_silently() -&gt; None:\n    \"\"\"Saves the 3D file silently\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_global_origin","title":"<code>set_global_origin(global_origin)</code>","text":"<p>Sets the global origin </p> <p>Parameters:</p> Name Type Description Default <code>global_origin</code> <code> point_3d</code> <p>global_origin</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_global_origin(global_origin: point_3d) -&gt; None:\n    \"\"\"Sets the global origin \n    Args:\n        global_origin ( point_3d): global_origin\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_global_x_offset","title":"<code>set_global_x_offset(offset)</code>","text":"<p>set global x offset</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code> float</code> <p>offset</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_global_x_offset(offset: float) -&gt; None:\n    \"\"\"set global x offset\n    Args:\n        offset ( float): offset\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_global_y_offset","title":"<code>set_global_y_offset(offset)</code>","text":"<p>set global y offset</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code> float</code> <p>offset</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_global_y_offset(offset: float) -&gt; None:\n    \"\"\"set global y offset\n    Args:\n        offset ( float): offset\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_global_z_offset","title":"<code>set_global_z_offset(offset)</code>","text":"<p>set global z offset</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code> float</code> <p>offset</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_global_z_offset(offset: float) -&gt; None:\n    \"\"\"set global z offset\n    Args:\n        offset ( float): offset\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_north_angle","title":"<code>set_north_angle(north_angle)</code>","text":"<p>set north angle</p> <p>Parameters:</p> Name Type Description Default <code>north_angle</code> <code> float</code> <p>north_angle</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_north_angle(north_angle: float) -&gt; None:\n    \"\"\"set north angle\n    Args:\n        north_angle ( float): north_angle\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_project_address","title":"<code>set_project_address(address)</code>","text":"<p>Sets the project address </p> <p>Parameters:</p> Name Type Description Default <code>address</code> <code> str</code> <p>address</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_project_address(address: str) -&gt; None:\n    \"\"\"Sets the project address \n    Args:\n        address ( str): address\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_project_architect","title":"<code>set_project_architect(project_architect)</code>","text":"<p>Sets the project architect </p> <p>Parameters:</p> Name Type Description Default <code>project_architect</code> <code> str</code> <p>project_architect</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_project_architect(project_architect: str) -&gt; None:\n    \"\"\"Sets the project architect \n    Args:\n        project_architect ( str): project_architect\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_project_city","title":"<code>set_project_city(city)</code>","text":"<p>Sets the project city </p> <p>Parameters:</p> Name Type Description Default <code>city</code> <code> str</code> <p>city</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_project_city(city: str) -&gt; None:\n    \"\"\"Sets the project city \n    Args:\n        city ( str): city\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_project_country","title":"<code>set_project_country(country)</code>","text":"<p>Sets the project country </p> <p>Parameters:</p> Name Type Description Default <code>country</code> <code> str</code> <p>country</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_project_country(country: str) -&gt; None:\n    \"\"\"Sets the project country \n    Args:\n        country ( str): country\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_project_customer","title":"<code>set_project_customer(project_customer)</code>","text":"<p>Sets the project customer </p> <p>Parameters:</p> Name Type Description Default <code>project_customer</code> <code> str</code> <p>project_customer</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_project_customer(project_customer: str) -&gt; None:\n    \"\"\"Sets the project customer \n    Args:\n        project_customer ( str): project_customer\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_project_data","title":"<code>set_project_data(element_id, data)</code>","text":"<p>Sets the project data </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> str</code> <p>element_id</p> required <code>data</code> <code> str</code> <p>data</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_project_data(element_id: str, data: str) -&gt; None:\n    \"\"\"Sets the project data \n    Args:\n        element_id ( str): element_id\n        data ( str): data\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_project_deadline","title":"<code>set_project_deadline(project_deadline)</code>","text":"<p>Sets the project deadline </p> <p>Parameters:</p> Name Type Description Default <code>project_deadline</code> <code> str</code> <p>project_deadline</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_project_deadline(project_deadline: str) -&gt; None:\n    \"\"\"Sets the project deadline \n    Args:\n        project_deadline ( str): project_deadline\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_project_description","title":"<code>set_project_description(description)</code>","text":"<p>set project description</p> <p>Parameters:</p> Name Type Description Default <code>description</code> <code> str</code> <p>description</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_project_description(description: str) -&gt; None:\n    \"\"\"set project description\n    Args:\n        description ( str): description\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_project_designer","title":"<code>set_project_designer(project_designer)</code>","text":"<p>Sets the project designer </p> <p>Parameters:</p> Name Type Description Default <code>project_designer</code> <code> str</code> <p>project_designer</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_project_designer(project_designer: str) -&gt; None:\n    \"\"\"Sets the project designer \n    Args:\n        project_designer ( str): project_designer\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_project_elevation","title":"<code>set_project_elevation(elevation)</code>","text":"<p>Sets the project elevation </p> <p>Parameters:</p> Name Type Description Default <code>elevation</code> <code> float</code> <p>elevation</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_project_elevation(elevation: float) -&gt; None:\n    \"\"\"Sets the project elevation \n    Args:\n        elevation ( float): elevation\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_project_latitude","title":"<code>set_project_latitude(latitude)</code>","text":"<p>Sets the project latitude </p> <p>Parameters:</p> Name Type Description Default <code>latitude</code> <code> float</code> <p>latitude</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_project_latitude(latitude: float) -&gt; None:\n    \"\"\"Sets the project latitude \n    Args:\n        latitude ( float): latitude\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_project_longitude","title":"<code>set_project_longitude(longitude)</code>","text":"<p>Sets the project longitude </p> <p>Parameters:</p> Name Type Description Default <code>longitude</code> <code> float</code> <p>longitude</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_project_longitude(longitude: float) -&gt; None:\n    \"\"\"Sets the project longitude \n    Args:\n        longitude ( float): longitude\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_project_name","title":"<code>set_project_name(project_name)</code>","text":"<p>Sets the project name </p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code> str</code> <p>project_name</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_project_name(project_name: str) -&gt; None:\n    \"\"\"Sets the project name \n    Args:\n        project_name ( str): project_name\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_project_number","title":"<code>set_project_number(project_number)</code>","text":"<p>Sets the project number </p> <p>Parameters:</p> Name Type Description Default <code>project_number</code> <code> str</code> <p>project_number</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_project_number(project_number: str) -&gt; None:\n    \"\"\"Sets the project number \n    Args:\n        project_number ( str): project_number\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_project_part","title":"<code>set_project_part(project_part)</code>","text":"<p>Sets the project part </p> <p>Parameters:</p> Name Type Description Default <code>project_part</code> <code> str</code> <p>project_part</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_project_part(project_part: str) -&gt; None:\n    \"\"\"Sets the project part \n    Args:\n        project_part ( str): project_part\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_project_postal_code","title":"<code>set_project_postal_code(postal_code)</code>","text":"<p>Sets the project postal code </p> <p>Parameters:</p> Name Type Description Default <code>postal_code</code> <code> str</code> <p>postal_code</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_project_postal_code(postal_code: str) -&gt; None:\n    \"\"\"Sets the project postal code \n    Args:\n        postal_code ( str): postal_code\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_project_user_attribute","title":"<code>set_project_user_attribute(number, user_attribute)</code>","text":"<p>Sets the project user attribute </p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code> int</code> <p>number</p> required <code>user_attribute</code> <code> str</code> <p>user_attribute</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_project_user_attribute(number: int, user_attribute: str) -&gt; None:\n    \"\"\"Sets the project user attribute \n    Args:\n        number ( int): number\n        user_attribute ( str): user_attribute\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_project_user_attribute_name","title":"<code>set_project_user_attribute_name(number, user_attribute_name)</code>","text":"<p>Sets the project user attribute name </p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code> int</code> <p>number</p> required <code>user_attribute_name</code> <code> str</code> <p>user_attribute_name</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_project_user_attribute_name(number: int, user_attribute_name: str) -&gt; None:\n    \"\"\"Sets the project user attribute name \n    Args:\n        number ( int): number\n        user_attribute_name ( str): user_attribute_name\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.set_use_of_global_coordinates","title":"<code>set_use_of_global_coordinates(use_of_global_coordinates)</code>","text":"<p>Sets the use of global coordinates </p> <p>Parameters:</p> Name Type Description Default <code>use_of_global_coordinates</code> <code> bool</code> <p>use_of_global_coordinates</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def set_use_of_global_coordinates(use_of_global_coordinates: bool) -&gt; None:\n    \"\"\"Sets the use of global coordinates \n    Args:\n        use_of_global_coordinates ( bool): use_of_global_coordinates\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.show_north_arrow","title":"<code>show_north_arrow()</code>","text":"<p>show north arrow</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def show_north_arrow() -&gt; None:\n    \"\"\"show north arrow\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.show_progress_bar","title":"<code>show_progress_bar()</code>","text":"<p>Shows a ProgressBar in the CommandBar</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def show_progress_bar() -&gt; None:\n    \"\"\"Shows a ProgressBar in the CommandBar\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.start_project_data_dialog","title":"<code>start_project_data_dialog()</code>","text":"<p>start project data dialog</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def start_project_data_dialog() -&gt; None:\n    \"\"\"start project data dialog\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/utility_controller/#utility_controller.update_progress_bar","title":"<code>update_progress_bar(value)</code>","text":"<p>Updates the ProgressBar with a value </p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code> int</code> <p>value</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>utility_controller\\__init__.py</code> <pre><code>def update_progress_bar(value: int) -&gt; None:\n    \"\"\"Updates the ProgressBar with a value \n    Args:\n        value ( int): value\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/","title":"Visualization Controller","text":""},{"location":"documentation/visualization_controller/#visualization_controller","title":"<code>visualization_controller</code>  <code>special</code>","text":""},{"location":"documentation/visualization_controller/#visualization_controller.clear_errors","title":"<code>clear_errors()</code>","text":"<p>clear errors</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def clear_errors() -&gt; None:\n    \"\"\"clear errors\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.get_camera_data","title":"<code>get_camera_data()</code>","text":"<p>Get the camera data </p> <p>Returns:</p> Type Description <code>camera_data</code> <p>camera data (camera_data)</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def get_camera_data() -&gt; camera_data:\n    \"\"\"Get the camera data \n    Args:\n\n    Returns:\n        camera data (camera_data)\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.get_color","title":"<code>get_color(element_id)</code>","text":"<p>Gets the element color </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>int</code> <p>color ID (int)</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def get_color(element_id: int) -&gt; int:\n    \"\"\"Gets the element color \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        color ID (int)\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.get_last_error","title":"<code>get_last_error(error_code)</code>","text":"<p>Gets the last error </p> <p>Parameters:</p> Name Type Description Default <code>error_code</code> <code> int</code> <p>error_code</p> required <p>Returns:</p> Type Description <code>str</code> <p>error string (str)</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def get_last_error(error_code: int) -&gt; str:\n    \"\"\"Gets the last error \n    Args:\n        error_code ( int): error_code\n\n    Returns:\n        error string (str)\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.get_material","title":"<code>get_material(element_id)</code>","text":"<p>Gets the element material </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>int</code> <p>material ID (int)</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def get_material(element_id: int) -&gt; int:\n    \"\"\"Gets the element material \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        material ID (int)\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.get_opengl_color","title":"<code>get_opengl_color(element_id)</code>","text":"<p>Gets the element OpenGL color </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>rgb_color</code> <p>RBG color (rgb_color)</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def get_opengl_color(element_id: int) -&gt; rgb_color:\n    \"\"\"Gets the element OpenGL color \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        RBG color (rgb_color)\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.get_rgb_from_cadwork_color_id","title":"<code>get_rgb_from_cadwork_color_id(color_id)</code>","text":"<p>get rgb from cadwork color id</p> <p>Parameters:</p> Name Type Description Default <code>color_id</code> <code> None</code> <p>color_id</p> required <p>Returns:</p> Type Description <code>rgb_color</code> <p>colorRGB (rgb_color)</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def get_rgb_from_cadwork_color_id(color_id: None) -&gt; rgb_color:\n    \"\"\"get rgb from cadwork color id\n    Args:\n        color_id ( None): color_id\n\n    Returns:\n        colorRGB (rgb_color)\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.hide_all_elements","title":"<code>hide_all_elements()</code>","text":"<p>Hides all elements</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def hide_all_elements() -&gt; None:\n    \"\"\"Hides all elements\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.is_active","title":"<code>is_active(element_id)</code>","text":"<p>Tests if element is active </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is element active (bool)</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def is_active(element_id: int) -&gt; bool:\n    \"\"\"Tests if element is active \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        is element active (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.is_immutable","title":"<code>is_immutable(element_id)</code>","text":"<p>Tests if the element is immutable </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is element immutable (bool)</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def is_immutable(element_id: int) -&gt; bool:\n    \"\"\"Tests if the element is immutable \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        is element immutable (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.is_plane_2d","title":"<code>is_plane_2d()</code>","text":"<p>returns if plane 2d is active </p> <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def is_plane_2d() -&gt; bool:\n    \"\"\"returns if plane 2d is active \n    Args:\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.is_selectable","title":"<code>is_selectable(element_id)</code>","text":"<p>Returns if the element is selectable </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def is_selectable(element_id: int) -&gt; bool:\n    \"\"\"Returns if the element is selectable \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.is_texture_rotated","title":"<code>is_texture_rotated(a0)</code>","text":"<p>is texture rotated</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> int</code> <p>a0</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def is_texture_rotated(a0: int) -&gt; bool:\n    \"\"\"is texture rotated\n    Args:\n        a0 ( int): a0\n\n    Returns:\n        bool\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.is_visible","title":"<code>is_visible(element_id)</code>","text":"<p>Tests if element is visible </p> <p>Parameters:</p> Name Type Description Default <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>bool</code> <p>is element visible (bool)</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def is_visible(element_id: int) -&gt; bool:\n    \"\"\"Tests if element is visible \n    Args:\n        element_id ( int): element_id\n\n    Returns:\n        is element visible (bool)\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.load_marking_settings","title":"<code>load_marking_settings(settings_file_path)</code>","text":"<p>Loads marking settings file </p> <p>Parameters:</p> Name Type Description Default <code>settings_file_path</code> <code> str</code> <p>settings_file_path</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def load_marking_settings(settings_file_path: str) -&gt; None:\n    \"\"\"Loads marking settings file \n    Args:\n        settings_file_path ( str): settings_file_path\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the drawing area</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def refresh() -&gt; None:\n    \"\"\"Refresh the drawing area\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.restore_activation_state","title":"<code>restore_activation_state(state)</code>","text":"<p>Restores the activation state </p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code> None</code> <p>state</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def restore_activation_state(state: None) -&gt; None:\n    \"\"\"Restores the activation state \n    Args:\n        state ( None): state\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.restore_visibility_state","title":"<code>restore_visibility_state(state)</code>","text":"<p>Restores the visibility state </p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code> None</code> <p>state</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def restore_visibility_state(state: None) -&gt; None:\n    \"\"\"Restores the visibility state \n    Args:\n        state ( None): state\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.save_activation_state","title":"<code>save_activation_state()</code>","text":"<p>Saves the activation state </p> <p>Returns:</p> Type Description <code>activation_state</code> <p>activation state (activation_state)</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def save_activation_state() -&gt; 'activation_state':\n    \"\"\"Saves the activation state \n    Args:\n\n    Returns:\n        activation state (activation_state)\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.save_visibility_state","title":"<code>save_visibility_state()</code>","text":"<p>Saves the visibility state </p> <p>Returns:</p> Type Description <code>visibility_state</code> <p>visibility state (visibility_state)</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def save_visibility_state() -&gt; 'visibility_state':\n    \"\"\"Saves the visibility state \n    Args:\n\n    Returns:\n        visibility state (visibility_state)\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.set_active","title":"<code>set_active(element_id_list)</code>","text":"<p>Sets element active </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def set_active(element_id_list: List[int]) -&gt; None:\n    \"\"\"Sets element active \n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.set_camera","title":"<code>set_camera(position, target)</code>","text":"<p>Sets the position of the camera, pointing to a target. </p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code> point_3d</code> <p>position</p> required <code>target</code> <code> point_3d</code> <p>target</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def set_camera(position: point_3d, target: point_3d) -&gt; None:\n    \"\"\"Sets the position of the camera, pointing to a target. \n    Args:\n        position ( point_3d): position\n        target ( point_3d): target\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.set_camera_data","title":"<code>set_camera_data(camera_data)</code>","text":"<p>Set the camera data - this will override the current camera data </p> <p>Parameters:</p> Name Type Description Default <code>camera_data</code> <code> None</code> <p>camera_data</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def set_camera_data(camera_data: None) -&gt; None:\n    \"\"\"Set the camera data - this will override the current camera data \n    Args:\n        camera_data ( None): camera_data\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.set_color","title":"<code>set_color(element_id_list, color_id)</code>","text":"<p>Sets the element color </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>color_id</code> <code> int</code> <p>color_id</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def set_color(element_id_list: List[int], color_id: int) -&gt; None:\n    \"\"\"Sets the element color \n    Args:\n        element_id_list ( List[int]): element_id_list\n        color_id ( int): color_id\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.set_color_without_material","title":"<code>set_color_without_material(a0, a1)</code>","text":"<p>set color without material</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <code>a1</code> <code> int</code> <p>a1</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def set_color_without_material(a0: List[int], a1: int) -&gt; None:\n    \"\"\"set color without material\n    Args:\n        a0 ( List[int]): a0\n        a1 ( int): a1\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.set_immutable","title":"<code>set_immutable(element_id_list)</code>","text":"<p>Sets the element immutable </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def set_immutable(element_id_list: List[int]) -&gt; None:\n    \"\"\"Sets the element immutable \n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.set_inactive","title":"<code>set_inactive(element_id_list)</code>","text":"<p>Sets the element inactive </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def set_inactive(element_id_list: List[int]) -&gt; None:\n    \"\"\"Sets the element inactive \n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.set_invisible","title":"<code>set_invisible(element_id_list)</code>","text":"<p>Sets the element invisible </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def set_invisible(element_id_list: List[int]) -&gt; None:\n    \"\"\"Sets the element invisible \n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.set_material","title":"<code>set_material(element_id_list, element_id)</code>","text":"<p>Sets the element material </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>element_id</code> <code> int</code> <p>element_id</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def set_material(element_id_list: List[int], element_id: int) -&gt; None:\n    \"\"\"Sets the element material \n    Args:\n        element_id_list ( List[int]): element_id_list\n        element_id ( int): element_id\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.set_mutable","title":"<code>set_mutable(element_id_list)</code>","text":"<p>Sets the element mutable </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def set_mutable(element_id_list: List[int]) -&gt; None:\n    \"\"\"Sets the element mutable \n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.set_opengl_color","title":"<code>set_opengl_color(element_id_list, color)</code>","text":"<p>Sets the element OpenGL color </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <code>color</code> <code> None</code> <p>color</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def set_opengl_color(element_id_list: List[int], color: None) -&gt; None:\n    \"\"\"Sets the element OpenGL color \n    Args:\n        element_id_list ( List[int]): element_id_list\n        color ( None): color\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.set_selectable","title":"<code>set_selectable(element_id_list)</code>","text":"<p>Sets a list of elements selectable </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def set_selectable(element_id_list: List[int]) -&gt; None:\n    \"\"\"Sets a list of elements selectable \n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.set_texture_rotated","title":"<code>set_texture_rotated(a0, a1)</code>","text":"<p>set texture rotated</p> <p>Parameters:</p> Name Type Description Default <code>a0</code> <code> List[int]</code> <p>a0</p> required <code>a1</code> <code> bool</code> <p>a1</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def set_texture_rotated(a0: List[int], a1: bool) -&gt; None:\n    \"\"\"set texture rotated\n    Args:\n        a0 ( List[int]): a0\n        a1 ( bool): a1\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.set_unselectable","title":"<code>set_unselectable(element_id_list)</code>","text":"<p>Sets a list of elements unselectable </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def set_unselectable(element_id_list: List[int]) -&gt; None:\n    \"\"\"Sets a list of elements unselectable \n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.set_visible","title":"<code>set_visible(element_id_list)</code>","text":"<p>Sets the element visible </p> <p>Parameters:</p> Name Type Description Default <code>element_id_list</code> <code> List[int]</code> <p>element_id_list</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def set_visible(element_id_list: List[int]) -&gt; None:\n    \"\"\"Sets the element visible \n    Args:\n        element_id_list ( List[int]): element_id_list\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.show_all_elements","title":"<code>show_all_elements()</code>","text":"<p>Shows all elements</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def show_all_elements() -&gt; None:\n    \"\"\"Shows all elements\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.show_perspective_central","title":"<code>show_perspective_central()</code>","text":"<p>changes the viewmode to Perpective</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def show_perspective_central() -&gt; None:\n    \"\"\"changes the viewmode to Perpective\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.show_reference_side_beam","title":"<code>show_reference_side_beam(show)</code>","text":"<p>show reference side beam</p> <p>Parameters:</p> Name Type Description Default <code>show</code> <code> bool</code> <p>show</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def show_reference_side_beam(show: bool) -&gt; None:\n    \"\"\"show reference side beam\n    Args:\n        show ( bool): show\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.show_reference_side_panel","title":"<code>show_reference_side_panel(show)</code>","text":"<p>show reference side panel</p> <p>Parameters:</p> Name Type Description Default <code>show</code> <code> bool</code> <p>show</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def show_reference_side_panel(show: bool) -&gt; None:\n    \"\"\"show reference side panel\n    Args:\n        show ( bool): show\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.show_reference_side_wall","title":"<code>show_reference_side_wall(show)</code>","text":"<p>show reference side wall</p> <p>Parameters:</p> Name Type Description Default <code>show</code> <code> bool</code> <p>show</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def show_reference_side_wall(show: bool) -&gt; None:\n    \"\"\"show reference side wall\n    Args:\n        show ( bool): show\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.show_view_axo","title":"<code>show_view_axo()</code>","text":"<p>changes the viewmode to Axo</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def show_view_axo() -&gt; None:\n    \"\"\"changes the viewmode to Axo\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.show_view_dashed_hidden_lines","title":"<code>show_view_dashed_hidden_lines()</code>","text":"<p>Sets the view to dashed hidden lines</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def show_view_dashed_hidden_lines() -&gt; None:\n    \"\"\"Sets the view to dashed hidden lines\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.show_view_hidden_lines","title":"<code>show_view_hidden_lines()</code>","text":"<p>Sets the view to hidden lines</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def show_view_hidden_lines() -&gt; None:\n    \"\"\"Sets the view to hidden lines\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.show_view_negative_x","title":"<code>show_view_negative_x()</code>","text":"<p>Sets the view to -X</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def show_view_negative_x() -&gt; None:\n    \"\"\"Sets the view to -X\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.show_view_negative_y","title":"<code>show_view_negative_y()</code>","text":"<p>Sets the view to -Y</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def show_view_negative_y() -&gt; None:\n    \"\"\"Sets the view to -Y\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.show_view_negative_z","title":"<code>show_view_negative_z()</code>","text":"<p>Sets the view to -Z</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def show_view_negative_z() -&gt; None:\n    \"\"\"Sets the view to -Z\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.show_view_positive_x","title":"<code>show_view_positive_x()</code>","text":"<p>Sets the view to +X</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def show_view_positive_x() -&gt; None:\n    \"\"\"Sets the view to +X\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.show_view_positive_y","title":"<code>show_view_positive_y()</code>","text":"<p>Sets the view to +Y</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def show_view_positive_y() -&gt; None:\n    \"\"\"Sets the view to +Y\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.show_view_positive_z","title":"<code>show_view_positive_z()</code>","text":"<p>Sets the view to +Z</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def show_view_positive_z() -&gt; None:\n    \"\"\"Sets the view to +Z\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.show_view_shaded1","title":"<code>show_view_shaded1()</code>","text":"<p>Sets the view to shaded 1</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def show_view_shaded1() -&gt; None:\n    \"\"\"Sets the view to shaded 1\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.show_view_shaded2","title":"<code>show_view_shaded2()</code>","text":"<p>Sets the view to shaded 2</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def show_view_shaded2() -&gt; None:\n    \"\"\"Sets the view to shaded 2\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.show_view_standard_axo","title":"<code>show_view_standard_axo()</code>","text":"<p>Sets the view to standard axonometry</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def show_view_standard_axo() -&gt; None:\n    \"\"\"Sets the view to standard axonometry\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.show_view_wireframe","title":"<code>show_view_wireframe()</code>","text":"<p>Sets the view to wireframe</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def show_view_wireframe() -&gt; None:\n    \"\"\"Sets the view to wireframe\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.zoom_active_elements","title":"<code>zoom_active_elements()</code>","text":"<p>Zooms on all active elements</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def zoom_active_elements() -&gt; None:\n    \"\"\"Zooms on all active elements\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"documentation/visualization_controller/#visualization_controller.zoom_all_elements","title":"<code>zoom_all_elements()</code>","text":"<p>Zooms on all elements</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>visualization_controller\\__init__.py</code> <pre><code>def zoom_all_elements() -&gt; None:\n    \"\"\"Zooms on all elements\n    Args:\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"examples/attribute_example/","title":"attribute_controller","text":""},{"location":"examples/attribute_example/#conditions","title":"Conditions","text":"<pre><code>import  attribute_controller  as ac     # import module\nimport  element_controller    as ec   \n\n\n# get active element_ids\nelement_ids = ec.get_active_identifiable_element_ids()\n\nfor element_id in element_ids:\n    if ac.is_panel(element_id): # returns boolean\n        print (True)\n    else:\n        print (False)\n</code></pre> <pre><code>import  attribute_controller  as ac     # import module\nimport  element_controller    as ec   \nimport  cadwork\n\n\n# get active element_ids\nelement_ids = ec.get_active_identifiable_element_ids()\n\nfor element_id in element_ids:\n    element_type = ac.get_element_type(element_id)\n    if element_type.is_rectangular_beam():\n        # do something\n</code></pre>"},{"location":"examples/attribute_example/#set-attributes","title":"set attributes","text":"<pre><code>import  attribute_controller  as ac     # import module\nimport  element_controller    as ec   \n\nelement_ids = ec.get_active_identifiable_element_ids()\n\nac.set_user_attribute_name(11, \"ExampleAttribute\")\nac.set_user_attribute(element_ids, 11, \"Hello World!\")\n</code></pre>"},{"location":"examples/attribute_example/#get-attributes","title":"get attributes","text":"<pre><code>import  attribute_controller  as ac     # import module\nimport  element_controller    as ec   \n\n\n# get active element_ids\nelement_ids = ec.get_active_identifiable_element_ids()\n\nfor element_id in element_ids:\n    user_attr = ac.get_user_attribute(element_id, 20) # 20 = attribute number\n    user_attr_name = ac.get_user_attribute_name(20)\n    element_guid = ec.get_element_cadwork_guid(element_id)\n\n    print(user_a_name, \n          user_a,\n          element_guid\n          )\n</code></pre>"},{"location":"examples/attribute_example/#assign-attributes-to-beam","title":"assign attributes to beam","text":"<pre><code>import  cadwork                                 # import module\nimport  attribute_controller  as ac\nimport  element_controller    as ec\n\npoint      = cadwork.point_3d(100, 200, 300)         # create a cadwork Point   \nvector_x   = cadwork.point_3d(1., 0., 0.)            # x vector length direction\nvector_z   = cadwork.point_3d(0., 0., 1.)            # z vecotr height orientation \nwidth      = 200.                                    # width/heigth of beam section\nlength     = 2600.                                   # beam length\nname       = 'My first beam :)'                      # name as a string\n\nbeam            = ec.create_square_beam_vectors(width, length, \n                                                point, vector_x,\n                                                vector_z) # returns element_id\n\nadd_beam_name   = ac.set_name([beam], name) # input beam id (list), name (string)\n</code></pre>"},{"location":"examples/bim_example/","title":"bim_controller","text":""},{"location":"examples/bim_example/#get-globalid-ifcguid","title":"get GlobalId (IfcGuid)","text":"<pre><code>import cadwork\nimport bim_controller as bc\nimport element_controller as ec\n\n# get active element_ids\nelement_ids = ec.get_active_identifiable_element_ids()\n\nfor element_id in element_ids:\n    guid = bc.get_ifc_guid(element_id)\n    print(guid)\n</code></pre>"},{"location":"examples/bim_example/#set-ifctyp","title":"set IfcTyp","text":"<pre><code>import cadwork\nimport attribute_controller as ac\nimport bim_controller as bc\nimport element_controller as ec\n\n# get active element_ids\nelement_ids = ec.get_active_identifiable_element_ids()\n\nfor element_id in element_ids:\n    if ac.is_wall(element_id):\n        ifc_type = bc.get_ifc2x3_element_type(element_id)\n        ifc_type.set_ifc_wall() # notation for setting ifc types\n        bc.set_ifc2x3_element_type([element_id], ifc_type)\n</code></pre>"},{"location":"examples/bim_example/#set-building-and-storey","title":"set Building and Storey","text":"<pre><code>import cadwork\nimport bim_controller as bc\nimport element_controller as ec\n\n# get active element_ids\nelement_ids = ec.get_active_identifiable_element_ids()\nbc.set_building_and_storey([element_ids], 'BuildingName', 'Level_1')\n</code></pre>"},{"location":"examples/bim_example/#get-building","title":"get Building","text":"<pre><code>import cadwork\nimport bim_controller as bc\nimport element_controller as ec\n\n# get active element_ids\nelement_ids = ec.get_active_identifiable_element_ids()\n\nfor element_id in element_ids:\n    bc.get_building(element_id)\n    storey_name = bc.get_storey(element_id)\n</code></pre>"},{"location":"examples/bim_example/#get-storey-height","title":"get Storey height","text":"<pre><code>import cadwork\nimport bim_controller as bc\nimport element_controller as ec\n\n# get active element_ids\nelement_ids = ec.get_active_identifiable_element_ids()\n\nfor element_id in element_ids:\n    building_name = bc.get_building(element_id)\n    storey_name = bc.get_storey(element_id)\n    storey_height = bc.get_storey_height(building_name, storey_name)\n    print(storey_height)\n</code></pre>"},{"location":"examples/bim_example/#print-ifctype-to-console","title":"print IfcType to console","text":"<pre><code>import cadwork\nimport bim_controller as bc\nimport element_controller as ec\n\n# get active element_ids\nelement_ids = ec.get_active_identifiable_element_ids()\n\nfor element_id in element_ids:\n    ifc_type = bc.get_ifc2x3_element_type(element_id)\n    print(f'Ifc{ifc_type}')\n</code></pre>"},{"location":"examples/bim_example/#ifctype-getter","title":"IfcType getter","text":"<pre><code>import      element_controller      as ec\nimport      bim_controller          as bc\nimport      cadwork\n\n\nelement_ids = ec.get_active_identifiable_element_ids()\n\n\nfor element in element_ids:\n    ifc_type = bc.get_ifc2x3_element_type(element)\n    if cadwork.ifc_2x3_element_type.is_ifc_member(ifc_type):\n        # do something\n</code></pre>"},{"location":"examples/cadwork/","title":"cadwork","text":""},{"location":"examples/cadwork/#create-a-cadwork-point","title":"create a cadwork point","text":"<p>In Python, a cadwork point_3d is represented as a 3D Point structure -&gt; represented by the x, y and z coordinate values of the point.  Find more information about points and vectors in tab geometry examples.</p> <pre><code>import  cadwork                                 # import module\n\npoint = cadwork.point_3d(100, 200, 300)         # create a cadwork Point\n</code></pre>"},{"location":"examples/cadwork/#move-a-cadwork-point","title":"move a cadwork point","text":"<pre><code>import  cadwork                                 # import module\n\nvector_x = cadwork.point_3d(1., 0., 0.)         # define vector\ndistance = 1500.0                               # moving distance\n\nmoved_point = point + (vector_x * distance)    \n</code></pre>"},{"location":"examples/cadwork/#distance-between-two-3d-points","title":"distance between two 3D points","text":"<pre><code>import  cadwork                                 # import module\n\npoint1 = cadwork.point_3d(100, 200, 300) \npoint2 = cadwork.point_3d(300, 100, 200)                            \n\ndistance = point1.distance(point2)  \n</code></pre>"},{"location":"examples/cadwork/#add-3d-points","title":"add 3D points","text":"<pre><code>import  cadwork                                 # import module\n\npt1 = cadwork.point_3d(100, 200, 300)\n\npt1 += cadwork.point_3d(800, 700, 600)\n\nprint(pt1)\n</code></pre>"},{"location":"examples/cadwork/#process-type-ifc2x3-element_type","title":"process type - ifc2x3 element_type","text":"<pre><code>import  cadwork                                 # import module\nimport attribute_controller as ac\nimport bim_controller as bc\nimport element_controller as ec\n\n\n\nelement_ids = ec.get_active_identifiable_element_ids()\n\nfor element_id in element_ids:\n    output_type = ac.get_output_type(element_id)\n    ifc_type = bc.get_ifc2x3_element_type(element_id)\n\n    if cadwork.process_type.is_rough_volume_framed_wall(output_type):\n        ifc_type.set_ifc_wall()\n        bc.set_ifc2x3_element_type([element_id], ifc_type)\n</code></pre>"},{"location":"examples/cadwork/#output-type","title":"output type","text":"<pre><code>import      element_controller      as ec\nimport      attribute_controller    as ac\nimport      cadwork\n\n\nelement_ids = ec.get_active_identifiable_element_ids()\n\nfor element in element_ids:\n    if ac.is_panel(element):\n        get_output_tpye = ac.get_output_type(element)\n        get_output_tpye.set_panel_2()\n        ac.set_output_type([element], get_output_tpye)\n</code></pre> <pre><code>import      element_controller      as ec\nimport      attribute_controller    as ac\nimport      cadwork\n\n\nelement_ids = ec.get_active_identifiable_element_ids()\n\n\nfor element in element_ids:\n    element_type = ac.get_element_type(element)\n    print(cadwork.element_type.isWall(element_type))\n</code></pre>"},{"location":"examples/compare/","title":"Compare","text":""},{"location":"examples/compare/#compare-floats","title":"compare floats","text":"<pre><code>if __name__ == '__main__':\n    a: float = 1.23\n    b: float = 1.230000000001\n\n    print(\"numbers are equal\") if (a == b) else print(\"numbers are different\")\n    result: bool = abs(a - b) &lt; 1e-4\n    print(result)\n</code></pre>"},{"location":"examples/compare/#compare-strings","title":"compare strings","text":"<pre><code>if __name__ == '__main__':\n    print(\"cadwork\" == \"cadwork\")\n    print(\"Cadwork\" &lt; \"cadwork\")\n    print(\"Cadwork\" &gt; \"cadwork\")\n    print(\"cadwork\" != \"cadwork\")\n\n#output\n# True\n# True\n# False\n# False\n</code></pre>"},{"location":"examples/compare/#compare-objects","title":"compare objects","text":"<pre><code>import dataclasses\n\n# value class\n@dataclasses.dataclass()\nclass Address:\n    street: str\n    number: int\n    zipcode: int\n\n    def __eq__(self, other):\n        if not isinstance(other, Address):\n            return False\n        return self.street == other.street \\\n            and self.number == other.number \\\n            and self.zipcode == other.zipcode\n\n# entity class\nclass Person:\n    def __init__(self, name, passport_id, address):\n        self.name: str = name\n        self.address: Address = address\n        self.passport_id: int = passport_id\n\n    def __eq__(self, other):\n        if not isinstance(other, Person):\n            return False\n        return self.passport_id == other.passport_id\n\n    def __hash__(self):\n        return hash(self.passport_id)\n\n\nif __name__ == '__main__':\n    address1 = Address(street=\"ThisStreet\", number=20, zipcode=8084)\n    address2 = Address(street=\"OtherStreet\", number=204, zipcode=9000)\n\n    print(address1 == address2)\n\n    person1 = Person(name=\"John\", passport_id=123456, address=address1)\n    person2 = Person(name=\"John\", passport_id=123456, address=address2)\n\n    print(person1 == person2)\n    print(person1.__hash__() == person2.__hash__())\n</code></pre>"},{"location":"examples/connector_example/","title":"connector_axis_controller","text":""},{"location":"examples/connector_example/#check-if-axis-are-valid","title":"check if axis are valid","text":"<pre><code>import  cadwork                                 # import module\nimport attribute_controller as ac\nimport connector_axis_controller as ca\nimport element_controller as ec\n\nelement_ids = ec.get_active_identifiable_element_ids()\n\nfor element_id in element_ids:\n    if ac.is_connector_axis(element_id):\n        if ca.check_axis(element_id) == False:\n            print(f\"Element {element_id} has invlid axis\")\n</code></pre>"},{"location":"examples/connector_example/#check-settings-ignore-vba-calculation","title":"check settings - ignore vba calculation","text":"<pre><code>import  attribute_controller  as ac     # import module\nimport  cadwork\nimport  element_controller    as ec   \nimport visualization_controller as vc\n\nelement_ids = ec.get_active_identifiable_element_ids()\n\nfor element_id in element_ids:\n    if ac.get_ignore_in_vba_calculation(element_id):\n        vc.set_color([element_id], 90)\n</code></pre>"},{"location":"examples/element_example/","title":"element_controller","text":""},{"location":"examples/element_example/#create_node","title":"create_node","text":"<pre><code>import  cadwork                                 # import module\nimport  element_controller as ec\n\npoint = cadwork.point_3d(100, 200, 300)         # create a cadwork Point   \nnode = ec.create_node(point)\n</code></pre>"},{"location":"examples/element_example/#create_square_beam_vectors","title":"create_square_beam_vectors","text":"<pre><code>import  cadwork                                 # import module\nimport  element_controller  as ec\n\npoint      = cadwork.point_3d(100, 200, 300)    # create a cadwork Point   \nvector_x   = cadwork.point_3d(1., 0., 0.)       # x vector length direction\nvector_z   = cadwork.point_3d(0., 0., 1.)       # z vecotr height orientation \nwidth      = 200.                               # width/heigth of beam section\nlength     = 2600.                              # beam length\n\nbeam       = ec.create_square_beam_vectors(width, length, \n                                            point, vector_x, \n                                            vector_z) # returns element_id\n</code></pre>"},{"location":"examples/element_example/#stretch-facet","title":"stretch facet","text":"<pre><code>import element_controller as ec                 # import module\nimport cadwork\nimport geometry_controller as gc\n\n\nelement_ids = ec.get_active_identifiable_element_ids()\n\ndistance = 75.\n\nfor element_id in element_ids:\n    xl = gc.get_xl(element_id) * distance\n    ec.stretch_end_facet([element_id], xl)\n</code></pre>"},{"location":"examples/element_example/#create-surface-element-boundary","title":"create surface - element boundary","text":"<pre><code>import cadwork\nimport geometry_controller as gc\nimport element_controller as ec\n\nelement_ids = ec.get_active_identifiable_element_ids()\nfor element_id in element_ids:\n    facets = gc.get_element_facets(element_id)\n    for facet in facets:\n        ec.create_surface(facet) # create surface\n</code></pre>"},{"location":"examples/endtype_example/","title":"endtype_controller","text":""},{"location":"examples/endtype_example/#get-endtype-name-at-start-point-of-the-element","title":"get endtype name at start point of the element","text":"<pre><code>import  cadwork                                 # import module\nimport endtype_controller as etc\nimport element_controller as ec\n\nelement_ids = ec.get_active_identifiable_element_ids()\nfor element_id in element_ids:\n    endtype_name = etc.get_endtype_name_start(element_id)\n    print(endtype_name)\n</code></pre>"},{"location":"examples/endtype_example/#get-endtype-name-at-start-point-of-the-element_1","title":"get endtype name at start point of the element","text":"<pre><code>import  cadwork                                 # import module\nimport endtype_controller as etc\nimport element_controller as ec\nimport utility_controller as uc\n\nelement_ids = ec.get_active_identifiable_element_ids()\n\nnew_endtype = uc.get_user_string(\"name of the new end-type\")\n\ni = 0\nfor element_id in element_ids:\n    endtype_name = etc.get_endtype_name_start(element_id)\n    if endtype_name == \"V_8\": # V_8 = name of an endtpye\n        etc.set_endtype_name_start(element_id, new_endtype)\n        i += 1\nuc.print_error(\"Number of end-type replaced:%d\" % i)\n</code></pre>"},{"location":"examples/file_example/","title":"File_controller","text":""},{"location":"examples/file_example/#export-rhino-file","title":"Export Rhino File","text":"<pre><code>import file_controller as fc        # import module\nimport element_controller as ec\n\nelement_ids = ec.get_active_identifiable_element_ids()\n\n# list: aElementIdList, str: aFilePath, int: aVersion, bool: aUseDefaultAssignment, bool: aWriteStandardAttributes\nfc.export_rhino_file(element_ids, \"C:\\Downloads\\RhinoExport.3dm\", 6, True, True)\n</code></pre>"},{"location":"examples/file_example/#export-rhino-file-create-directory","title":"Export Rhino File - create directory","text":"<pre><code>import file_controller as fc \nimport element_controller as ec\nimport os\n\ntarget_path = 'C:\\\\Users\\\\YourUsername\\\\Downloads\\\\RhinoExports\\\\'\n\ntry:\n    create_direction = os.mkdir(target_path)\n    # replace YourUsername with your username on your PC or add another directory \n    # mkdir will create a folder with the Name RhinoExports\nexcept FileExistsError: # excepiton handling - if folder exists \n    print(\"Folder already exists!\")\n\n# path to the new file  \nfile_name = target_path + 'TestExport.3dm'\n\n\nelement_ids = ec.get_active_identifiable_element_ids()\n\nfc.export_rhino_file(element_ids, file_name, 6, True, True)\n</code></pre>"},{"location":"examples/file_example/#import-step-file","title":"Import Step File","text":"<pre><code>import file_controller as fc        # import module\nimport element_controller as ec\n\nimport_file = uc.get_new_user_file_from_dialog(\"*.stp\")\n# str: aFilePath, float: aScale, bool: aMesageOption\nfc.import_step_file_with_message_option(import_file, 0.0001, True)\n</code></pre>"},{"location":"examples/geometry/","title":"Geometry","text":"<p>Coordinates in cadwork  To be able to determine the directions of the axes and the order of the x, y and z axes, the right-hand rule is applied: Spread the first three fingers of your right hand, as seen below. By virtue of the right-hand rule, your thumb becomes the positive x axis, the index finger, which is at a right angle from the thumb, becomes the positive y axis and the middle finger becomes the z axis. The position of the middle finger is of decisive importance. It points in the positive z direction. No matter how you rotate your right hand, the positive direction of the z axis is determined by the right-hand rule.</p> <p></p> <p>Base of cadwork elements  All basic elements in cadwork have an axis system. Except for the auxiliary element, room and surfaces, the elements are defined by an axis. The axis spans between point 1 and point 2.  The orientation of the axis is defined by the vectors x, y, z. </p> <p></p>"},{"location":"examples/geometry/#vector-geometry","title":"Vector Geometry","text":"<p>A vector indicates a quantity, such as velocity or force, that has direction and length.Vectors in 3D coordinate systems are represented with an ordered set of three realnumbers.</p> <p>Two vectors are the same if they have the same magnitude and direction. This means that if we take a vector and translate it to a new position (without rotating it),  then the vector we obtain at the end of this process is the same vector we had in the beginning.</p> <p>Vector or point A vector defines a direction and length. A point defines a location.</p> <p></p>"},{"location":"examples/geometry/#cadwork-point-vector","title":"cadwork point &amp; vector","text":"<p>a point --&gt; point_3d(100,400,250)</p> <p></p> <p>a vector --&gt; point_3d(1., 0., 0.)</p> <p></p> <p>A cadwork point_3d list can be accessed like a simple python list.</p> <pre><code>import  cadwork                                 # import module\n\npoint = cadwork.point_3d(100, 200, 300)         # create a cadwork Point\n\nprint(point[0])                                 # prints x coordinate\nprint(point[1])                                 # prints y coordinate\nprint(point[2])                                 # prints z coordinate\n</code></pre> <p>The coordinates of a cadwork point_3d object can also be accessed by its .x, .y and .z attributes.</p> <pre><code>import  cadwork                                # import module\n\npoint = cadwork.point_3d(100, 200, 300)        # create a cadwork Point\n\nprint(point.x)                                 # prints x coordinate\nprint(point.y)                                 # prints y coordinate\nprint(point.z)                                 # prints z coordinate\n</code></pre>"},{"location":"examples/geometry/#point_3d-methods","title":"Point_3d methods","text":"<pre><code>point_3d + point_3d\n\npoint_3d - point_3d\n\npoint_3d * float\n\npoint_3d / float\n\npoint_3d += point_3d\n\npoint_3d -= point_3d\n\npoint_3d *= float\n\npoint_3d /= float\n\n-point_3d\n\npoint_3d == point_3d\n\npoint_3d != point_3d\n\n# dot product or scalar product\npoint_3d.dot(point_3d)    \n\n# cross product or vector product \n# operation on two vectors in a three-dimensional oriented Euclidean vector space \npoint_3d.cross(point_3d) \n\n# vector magnitude or length\npoint_3d.magnitude()\n\n# A normalized vector maintains its direction but its Length becomes 1\npoint_3d.normalized()\n\n# distance between two points\npoint_3d.distance(point_3d)\n</code></pre>"},{"location":"examples/geometry/#move-a-cadwork-point","title":"move a cadwork point","text":"<pre><code>import  cadwork                                 # import module\n\nvector_x = cadwork.point_3d(1., 0., 0.)         # define vector\ndistance = 1500.0                               # moving distance\n\nmoved_point = point + (vector_x * distance)    \n</code></pre>"},{"location":"examples/geometry/#cross-product","title":"cross product","text":"<pre><code>import cadwork\n\na = cadwork.point_3d(1., 0., 0.)\nb = cadwork.point_3d(0., 1., 0.)\n\nab = a.cross(b)\n# ab = [0.000000, 0.000000, 1.000000]\n</code></pre>"},{"location":"examples/geometry/#angle-between-two-3d-vectors","title":"angle between two 3D vectors","text":"<pre><code>import math     as m                                 # import module \nimport cadwork  as cw\n\ndef angle_between_vectors(v1:cw.point_3d, v2:cw.point_3d) -&gt; float:\n    return m.acos(v1.dot(v2) / (v1.magnitude() * v2.magnitude())) * (180 /m.pi)\n</code></pre>"},{"location":"examples/geometry_example/","title":"geometry_controller","text":""},{"location":"examples/geometry_example/#get-beam-points-and-vetors","title":"get beam points and vetors","text":"<pre><code>import  cadwork                                 # import module\nimport  element_controller    as ec\nimport  geometry_controller   as gc\n\n# get active element_ids\nelement_ids = ec.get_active_identifiable_element_ids()\n\nfor element_id in element_ids:\n    vector_x = gc.get_xl(element_id) # returns local vector\n    vector_y = gc.get_yl(element_id) # returns local vector\n    vector_z = gc.get_zl(element_id) # returns local vector\n    get_p1   = gc.get_p1(element_id) # returns cartesian point\n    get_p2   = gc.get_p2(element_id) # returns cartesian point\n    get_p3   = gc.get_p3(element_id) # returns cartesian point\n\n    print(f\"\"\"the elements local vecotr z is: {vector_z} \\n'\n            the coordinates of the point_3 are {get_p3}\"\"\")\n</code></pre>"},{"location":"examples/geometry_example/#filter-elements-according-to-a-limit-value","title":"filter elements according to a limit value","text":"<pre><code>import attribute_controller as ac\nimport element_controller as ec\nimport cadwork\nimport geometry_controller as gc\n\nelement_ids = ec.get_active_identifiable_element_ids()\n\n# max area\narea = 1500000.\n\n# list comprehension \nfiltered_ids = [element for element in element_ids if ac.is_panel(element)\n                 and gc.get_element_reference_face_area(element) &lt; area]\n\nvalue = 'area smaller than '\n\nac.set_user_attribute(filtered_ids, 10, f'{value, area} mm2' )\n</code></pre>"},{"location":"examples/list_example/","title":"list_controller","text":""},{"location":"examples/list_example/#check-production-list-discrepancies","title":"check production list discrepancies","text":"<pre><code>import cadwork\nimport list_controller as lc\nimport utility_controller as uc\nimport visualization_controller as vc\n\n\nchecked_element_ids = lc.check_position_numbers_production_list()\n\nif not checked_element_ids:\n    uc.print_error(\"No discrepancies in production list\")\nelse:\n    vc.set_active(checked_element_ids)\n    uc.print_error(\"Active elements have discrepancies in the production list !\")\n</code></pre>"},{"location":"examples/list_example/#export-part-list","title":"export part list","text":"<pre><code>import cadwork\nimport list_controller as lc\nimport utility_controller as uc\nimport visualization_controller as vc\n\nelement_ids = ec.get_active_identifiable_element_ids()\nlc.export_part_list(element_ids, 'C:\\\\Downloads\\\\api_list.cwlm')\n</code></pre>"},{"location":"examples/machine_example/","title":"machine_controller","text":""},{"location":"examples/machine_example/#check-production-list-discrepancies","title":"check production list discrepancies","text":"<pre><code>import machine_controller as mac\nimport cadwork\n\nbtl_enum = 5 # VERSION: \"BTL V10.6\"\n# The enumeration is done according to the machine export listing in the export menu.\nfile_path   = 'C:\\\\Downloads\\\\api_btl.btl'\nmac.export_btl(btl_enum, file_path)\n</code></pre> <pre><code>import machine_controller as mac\nimport cadwork\n\nhundegger_enum = 3 # Hundegger K2\n# The enumeration is done according to the machine export listing in the export menu.\nmac.export_hundegger(hundegger_enum)\n</code></pre>"},{"location":"examples/material_example/","title":"material_controller","text":""},{"location":"examples/material_example/#get-material-ids-and-names","title":"get material ids and names","text":"<pre><code>import cadwork\nimport material_controller as mc\n\nmaterial_ids_by_name = {}\nfor material_id in mc.get_all_materials():\n    mat_name = mc.get_name(material_id)\n    material_ids_by_name[mat_name] = material_id\n</code></pre>"},{"location":"examples/material_example/#create-new-material","title":"create new material","text":"<pre><code>import material_controller as mc\n\nmaterial_id = mc.create_material('Cross-Laminated-Timber')\n# the new created material is stored in the category \"No groups\"\n\nmc.set_group(material_id, 'Plattenwerkstoffe')\n# the new created material is now shifted in the category \"Plattenwerkstoffe\"\n</code></pre>"},{"location":"examples/menu_example/","title":"menu_controller","text":""},{"location":"examples/menu_example/#create-a-simple-cadwork-menu","title":"create a simple cadwork menu","text":"<pre><code>import menu_controller as mec \nimport utility_controller as uc\nimport cadwork\n\nmenu_options = 'Foo', 'Bar', 'Baz', '', 'Return'\n\nwhile True:\n    menu = mec.display_simple_menu(menu_options)\n\n    if menu == 'Foo':\n        uc.print_error('You pressed Foo')\n\n    elif menu == 'Bar':\n        uc.print_error('You pressed Bar')\n\n    elif menu == 'Baz':\n        uc.print_error('You pressed Baz')\n\n    elif menu == 'Return':\n        break\n</code></pre> <p>Above code generates a menu structure like this.</p> <p></p>"},{"location":"examples/menu_example/#process-type-setter","title":"Process type setter","text":"<pre><code>import cadwork as cw\nimport attribute_controller as ac\nimport element_controller as ec\nimport visualization_controller as vc\nimport utility_controller as uc\nimport menu_controller as mc\n\n\ndef list_ele_types(ele_type):\n    l_ele_types = [[cw.element_type.is_additional_element(ele_type), 'is_additional_element'],\n               [cw.element_type.is_auxiliary(ele_type), 'is_auxiliary'],\n               [cw.element_type.is_cadwork(ele_type), 'is_cadwork'],\n               [cw.element_type.is_circular_axis(ele_type), 'is_circular_axis'],\n               [cw.element_type.is_circular_beam(ele_type), 'is_circular_beam'],\n               [cw.element_type.is_connector_axis(ele_type), 'is_connector_axis'],\n               [cw.element_type.is_connector_node(ele_type), 'is_connector_node'],\n               [cw.element_type.is_container(ele_type), 'is_container'],\n               [cw.element_type.is_dimension(ele_type), 'is_dimension'],\n               [cw.element_type.is_drilling_axis(ele_type), 'is_drilling_axis'],\n               [cw.element_type.is_eave_axis(ele_type), 'is_eave_axis'],\n               [cw.element_type.is_export_solid(ele_type), 'is_export_solid'],\n               [cw.element_type.is_export_solid_scene(ele_type), 'is_export_solid_scene'],\n               [cw.element_type.is_floor(ele_type), 'is_floor'],\n               [cw.element_type.is_global_cut(ele_type), 'is_global_cut'],\n               [cw.element_type.is_graphical_object(ele_type), 'is_graphical_object'],\n               [cw.element_type.is_line(ele_type), 'is_line'],\n               [cw.element_type.is_nesting_parent(ele_type), 'is_nesting_parent'],\n               [cw.element_type.is_none(ele_type), 'is_none'],\n               [cw.element_type.is_normal_node(ele_type), 'is_normal_node'],\n               [cw.element_type.is_opening(ele_type), 'is_opening'],\n               [cw.element_type.is_panel(ele_type), 'is_panel'],\n               [cw.element_type.is_rectangular_axis(ele_type), 'is_rectangular_axis'],\n               [cw.element_type.is_rectangular_beam(ele_type), 'is_rectangular_beam'],\n               [cw.element_type.is_roof(ele_type), 'is_roof'],\n               [cw.element_type.is_room(ele_type), 'is_room'],\n               [cw.element_type.is_rotation_element(ele_type), 'is_rotation_element'],\n               [cw.element_type.is_section_trace(ele_type), 'is_section_trace'],\n               [cw.element_type.is_steel_shape(ele_type), 'is_steel_shape'],\n               [cw.element_type.is_surface(ele_type), 'is_surface'],\n               [cw.element_type.is_text_document(ele_type), 'is_text_document'],\n               [cw.element_type.is_wall(ele_type), 'is_wall'],\n               [cw.element_type.is_wire_axis(ele_type), 'is_wire_axis']]\n    return l_ele_types\n\n\ndef list_process_types_is(process_type):\n    l_process_types_i = [[cw.process_type.is_hip_valley(process_type), 'is_hip_valley'],\n                       [cw.process_type.is_jack_rafter(process_type), 'is_jack_rafter'],\n                       [cw.process_type.is_log(process_type), 'is_log'],\n                       [cw.process_type.is_none(process_type), 'is_none'],\n                       [cw.process_type.is_panel_1(process_type), 'is_panel_1'],\n                       [cw.process_type.is_panel_2(process_type), 'is_panel_2'],\n                       [cw.process_type.is_panel_3(process_type), 'is_panel_3'],\n                       [cw.process_type.is_panel_4(process_type), 'is_panel_4'],\n                       [cw.process_type.is_panel_5(process_type), 'is_panel_5'],\n                       [cw.process_type.is_purlin(process_type), 'is_purlin'],\n                       [cw.process_type.is_rafter(process_type), 'is_rafter'],\n                       [cw.process_type.is_rough_volume_framed_wall(process_type), 'is_rough_volume_framed_wall'],\n                       [cw.process_type.is_rough_volume_log_home(process_type), 'is_rough_volume_log_home'],\n                       [cw.process_type.is_rough_volume_solid_wood_wall(process_type),\n                        'is_rough_volume_solid_wood_wall'],\n                       [cw.process_type.is_stud(process_type), 'is_stud'],\n                       [cw.process_type.is_tread(process_type), 'is_tread'],\n                       [cw.process_type.is_truss(process_type), 'is_truss'],\n                       [cw.process_type.is_user_1(process_type), 'is_user_1'],\n                       [cw.process_type.is_user_2(process_type), 'is_user_2'],\n                       [cw.process_type.is_user_3(process_type), 'is_user_3'],\n                       [cw.process_type.is_user_4(process_type), 'is_user_4'],\n                       [cw.process_type.is_user_5(process_type), 'is_user_5'],\n                       [cw.process_type.is_user_5(process_type), 'is_user_5']]\n    return l_process_types_i\n\n\ndef list_process_types_set(z, process_type):\n    if z == 1:\n        process_type.set_hip_valley()\n    elif z == 2:\n        process_type.set_jack_rafter()\n    elif z == 3:\n        process_type.set_log()\n    elif z == 4:\n        process_type.set_none()\n    elif z == 5:\n        process_type.set_panel_1()\n    elif z == 6:\n        process_type.set_panel_2()\n    elif z == 7:\n        process_type.set_panel_3()\n    elif z == 8:\n        process_type.set_panel_4()\n    elif z == 9:\n        process_type.set_panel_5()\n    elif z == 10:\n        process_type.set_purlin()\n    elif z == 11:\n        process_type.set_rafter()\n    elif z == 12:\n        process_type.set_rough_volume_framed_wall()\n    elif z == 13:\n        process_type.set_rough_volume_log_home()\n    elif z == 14:\n        process_type.set_rough_volume_solid_wood_wall()\n    elif z == 15:\n        process_type.set_stud()\n    elif z == 16:\n        process_type.set_tread()\n    elif z == 17:\n        process_type.set_truss()\n    elif z == 18:\n        process_type.set_user_1()\n    elif z == 19:\n        process_type.set_user_2()\n    elif z == 20:\n        process_type.set_user_3()\n    elif z == 21:\n        process_type.set_user_4()\n    else:\n        process_type.set_user_5()\n\n    return process_type\n\n\n\ndef menu_output_type():\n    menu_items = ['hip_valley', 'jack_rafter', 'log', 'none', 'panel_1', 'panel_2', 'panel_3',\n                'panel_4', 'panel_5', 'purlin', 'rafter', 'rough_volume_framed_wall', 'rough_volume_log_home',\n                'rough_volume_solid_wood_wall', 'stud', 'tread', 'truss', 'user_1', 'user_2', 'user_3',\n                'user_4', 'user_5']\n\n    menu_select = mc.display_simple_menu(menu_items)\n    menu_i = menu_items.index(menu_select)\n\n    return menu_i+1\n\n\ndef main():\n    active_elements = ec.get_active_identifiable_element_ids()\n\n    if len(active_elements) &gt; 0:\n        for element in active_elements:\n            ele_type = ac.get_element_type(element)\n            l_ele_types = list_ele_types(ele_type)\n            process_type = ac.get_output_type(element)\n            l_process_types = list_process_types_is(process_type)\n\n    for p_type in l_process_types:\n        if p_type[0]:\n         for e_type in l_ele_types:\n            if e_type[0]:\n                vc.hide_all_elements()\n                vc.set_visible([element])\n                vc.zoom_all_elements()\n                uc.print_error(f'Elementyp = {e_type[1]} / Ausgabeart = {p_type[1]}')\n\n    n_process_type = list_process_types_set(menu_output_type(), process_type)\n    ac.set_output_type([element], n_process_type)\n    l_process_types = list_process_types_is(process_type)\n\n    for p_type_n in l_process_types:\n        if p_type_n[0]:\n            uc.print_error(f'Ausgabeart neu = {p_type_n[1]}')\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"examples/roof_example/","title":"Roof Controller","text":"<p>..Work in progress</p>"},{"location":"examples/scene_example/","title":"scene_controller","text":""},{"location":"examples/scene_example/#create-and-add-elements-to-scene","title":"create and add elements to scene","text":"<pre><code>import element_controller as ec\nimport cadwork\nimport scene_controller as sc\n\nelement_ids = ec.get_active_identifiable_element_ids()\nnew_scene = sc.add_scene('NewScene')\n\nif new_scene:\n    sc.add_elements_to_scene('NewScene', element_ids)\n    sc.activate_scene('NewScene')\n</code></pre>"},{"location":"examples/scene_example/#get-elements-from-scene","title":"get elements from scene","text":"<pre><code>element_ids_scene = sc.get_elements_from_scene('NewScene')\n\nelement_subgroup_scene = []\nfor element_id in element_ids_scene:\n    group = ac.get_group(element_id)\n    element_subgroup_scene.append(group)\n\n\nprint(len(element_ids_scene))\nprint(set(element_subgroup_scene))\n</code></pre>"},{"location":"examples/shop_drawing_example/","title":"shop_drawing_controller","text":""},{"location":"examples/shop_drawing_example/#export-2d-wireframe-drawing-from-current-view","title":"export 2d wireframe drawing from current view","text":"<pre><code>import cadwork\nimport shop_drawing_controller as sdc\n\nclipboard_number = 3\nwith_layout = False # boolean to export with or without layout\n\nsdc.export_2d_wireframe_with_clipboard(clipboard_number, with_layout)\n</code></pre>"},{"location":"examples/shop_drawing_example/#export-2d-wireframe-drawing-from-current-view_1","title":"export 2d wireframe drawing from current view","text":"<p><pre><code>import attribute_controller as ac\nimport cadwork\nimport geometry_controller as gc\nimport element_controller as ec\nimport shop_drawing_controller as sdc\n\nelement_id = ec.get_user_element_ids()\nif len(element_id) != 1:\n    uc.print_error('Please select just one wall element')\n    exit()\nif not ac.is_wall(*element_id):\n    uc.print_error('Please select a wall element')\n    exit()\n\nposition_vector = gc.get_p1(*element_id)\nposition_vector += (gc.get_xl(*element_id) * 500.)\n\n\nsdc.add_wall_section_vertical(*element_id, position_vector)\n</code></pre> </p>"},{"location":"examples/tk_gui/","title":"tkinter - GUI toolkit","text":"<p>The tkinter package (\u201cTk interface\u201d) is the standard Python interface to the Tcl/Tk GUI toolkit. Both Tk and tkinter are available on most Unix platforms, including macOS, as well as on Windows systems.</p> <p>Running python -m tkinter from the command line should open a window demonstrating a simple Tk interface, letting you know that tkinter is properly installed on your system, and also showing what version of Tcl/Tk is installed, so you can read the Tcl/Tk documentation specific to that version.</p> <p>Tkinter supports a range of Tcl/Tk versions, built either with or without thread support. The official Python binary release bundles Tcl/Tk 8.6 threaded. See the source code for the _tkinter module for more information about supported versions.</p> <p>Tkinter is not a thin wrapper, but adds a fair amount of its own logic to make the experience more pythonic. This documentation will concentrate on these additions and changes, and refer to the official Tcl/Tk documentation for details that are unchanged.<sup>1</sup></p>"},{"location":"examples/tk_gui/#a-simple-hello-world-program","title":"A Simple Hello World Program","text":"<pre><code>import tkinter as tk\n\nclass Application(tk.Frame):\n    def __init__(self, master=None):\n        super().__init__(master)\n        self.master = master\n        self.pack()\n        self.create_widgets()\n\n    def create_widgets(self):\n        self.hi_there = tk.Button(self)\n        self.hi_there[\"text\"] = \"Hello cadwork World\\n(click me)\"\n        self.hi_there[\"command\"] = self.say_hi\n        self.hi_there.pack(side=\"top\")\n\n        self.quit = tk.Button(self, text=\"QUIT\", fg=\"blue\",\n                              command=self.master.destroy)\n        self.quit.pack(side=\"bottom\")\n\n    def say_hi(self):\n        print(\"hi there, everyone!\")\n\nroot = tk.Tk()\napp = Application(master=root)\napp.mainloop()\n</code></pre>"},{"location":"examples/tk_gui/#button","title":"Button","text":"<pre><code>import tkinter as tk\n\nclass MyApp(tk.Frame):\n    def __init__(self, master=None):\n        super().__init__(master)\n        self.pack()\n\n        self.ok = tk.Button(self)\n        self.ok[\"text\"] = \"cadwork\"\n        self.ok[\"command\"] = self.handler\n        self.ok.pack()\n\n    def handler(self):\n        print(\"Button clicked\")\n\n\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    root.geometry(\"500x300\")\n    app = MyApp(root)\n    app.mainloop()\n</code></pre>"},{"location":"examples/tk_gui/#coupling-widget-variables","title":"Coupling Widget Variables","text":"<pre><code>import tkinter as tk\n\nclass App(tk.Frame):\n    def __init__(self, master):\n        super().__init__(master)\n        self.pack()\n\n        self.entrythingy = tk.Entry()\n        self.entrythingy.pack()\n\n        # Create the application variable.\n        self.contents = tk.StringVar()\n        # Set it to some value.\n        self.contents.set(\"this is a variable\")\n        # Tell the entry widget to watch this variable.\n        self.entrythingy[\"textvariable\"] = self.contents\n\n        # Define a callback for when the user hits return.\n        # It prints the current value of the variable.\n        self.entrythingy.bind('&lt;Key-Return&gt;',\n                             self.print_contents)\n\n    def print_contents(self, event):\n        print(\"Hi. The current entry content is:\",\n              self.contents.get())\n\nroot = tk.Tk()\nmyapp = App(root)\nmyapp.mainloop()\n</code></pre>"},{"location":"examples/tk_gui/#pyqt-5","title":"PyQt 5","text":"<pre><code>from PyQt5.QtWidgets import (QWidget, QToolTip,\n                             QPushButton, QApplication,\n                             QLabel)\n\nclass MyWindow(QWidget):\n\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n\n    def initUI(self):\n        btn = QPushButton('Button', self)\n        btn.resize(btn.sizeHint())\n        btn.move(50, 50)\n\n        self.setGeometry(300, 300, 300, 200)\n        self.setWindowTitle('Qt5 Button')\n\nif __name__ == '__main__':\n    window = MyWindow()\n    window.show()\n</code></pre> <ol> <li> <p>Python interface to Tcl/Tk \u21a9</p> </li> </ol>"},{"location":"examples/utility_example/","title":"utility_controller","text":""},{"location":"examples/utility_example/#display-refresh","title":"display refresh","text":"<p>Speed up the process within cadwork by disabling the display refresh.</p> <pre><code>import cadwork\nimport utility_controller as uc\nimport element_controller as ec\nimport visualization_controller as vc\nfrom timeit import default_timer as timer\nfrom datetime import timedelta\n\nstart = timer()\nuc.disable_auto_display_refresh()\n\ndrillings = []\npoints_range = range(1, 15000, 120)\nfor p in points_range:\n    drillings.append(ec.create_drilling_vectors(40, 50, \n                    cadwork.point_3d(p, 0., 0.), cadwork.point_3d(0., 0.,  -1.)))\n\nvc.set_color(drillings, 5)\n\nuc.enable_auto_display_refresh()\n# ec.ec.recreate_elements(element_ids)\n\nend = timer()\nprint(timedelta(seconds=end-start))\n\n# measuring time in seconds when disable display refresh    0:00:00.057018s\n# without disabling, the exucation duration is              0:00:01.831747s\n</code></pre>"},{"location":"examples/utility_example/#user-interactions","title":"user interactions","text":"<pre><code>import cadwork\nimport utility_controller as uc\nimport element_controller as ec\n\ndrill_bool = uc.get_user_bool(\"Do u want to create a drilling ?\", True)\n\nif drill_bool:\n    pt = uc.get_user_point()\n    length = uc.get_user_double('Enter the drilling length')\n    drilling = ec.create_drilling_vectors(40, length, pt, cadwork.point_3d(0., 0.,  -1.))\n</code></pre>"},{"location":"examples/visualization_example/","title":"visualization_controller","text":""},{"location":"examples/visualization_example/#assign-color-to-beam","title":"assign color to beam","text":"<pre><code>import  cadwork                                 # import module\nimport  element_controller        as ec\nimport  visualization_controller  as vc\n\npoint      = cadwork.point_3d(100, 200, 300)         # create a cadwork Point   \nvector_x   = cadwork.point_3d(1., 0., 0.)            # x vector length direction\nvector_z   = cadwork.point_3d(0., 0., 1.)            # z vecotr height orientation \nwidth      = 200.                                    # width/heigth of beam section\nlength     = 2600.                                   # beam length\ncolor     = 3                                       # color number as an int\n\nbeam            = ec.create_square_beam_vectors(width, length, \n                                                point, vector_x,\n                                                vector_z) # returns element_id\n\nadd_beam_color = vc.set_color([beam], color) # input beam id (list), color (int)\n</code></pre>"},{"location":"examples/visualization_example/#mutable-immutable","title":"mutable - immutable","text":"<pre><code>import cadwork\nimport element_controller as ec\nimport visualization_controller as vc\n\nelement_ids = ec.get_active_identifiable_element_ids()\n\nimmutable = uc.get_user_bool(\"Do you want to set the elements to immutable ?\", True)\n\nif immutable:\n    vc.set_immutable(element_ids)\n</code></pre>"}]}